<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Libs.Logger</name>
    </assembly>
    <members>
        <member name="T:Libs.Logger.Configuration.LoggerConfiguration">
            <summary>
            Корневая конфигурация логгера
            </summary>
        </member>
        <member name="M:Libs.Logger.Configuration.LoggerConfiguration.#ctor(Libs.Logger.LogLevel,System.Boolean,System.Boolean,Libs.Logger.Configuration.LogWriterWrapperConfiguration)">
            <summary>
            Конструктор LoggerConfiguration
            </summary>
            <param name="level">Уровень логирования</param>
            <param name="isEnabled">Флаг, показывающий включен логгер или нет</param>
            <param name="isStackTraceEnabled">Можно ли извлекать данные о вызове из стека</param>
            <param name="writer">Писатель логов или обёртка</param>
        </member>
        <member name="M:Libs.Logger.Configuration.LoggerConfiguration.#ctor(Libs.Logger.LogLevel,System.Boolean,System.Boolean)">
            <summary>
            Конструктор LoggerConfiguration
            </summary>
            <param name="level">Уровень логирования</param>
            <param name="isEnabled">Флаг, показывающий включен логгер или нет</param>
            <param name="isStackTraceEnabled">Можно ли извлекать данные о вызове из стека</param>
        </member>
        <member name="M:Libs.Logger.Configuration.LoggerConfiguration.#ctor(Libs.Logger.LogLevel)">
            <summary>
            Конструктор LoggerConfiguration
            </summary>
            <param name="level">Уровень логирования</param>
        </member>
        <member name="M:Libs.Logger.Configuration.LoggerConfiguration.#ctor">
            <summary>
            Конструктор LoggerConfiguration
            </summary>
        </member>
        <member name="P:Libs.Logger.Configuration.LoggerConfiguration.Level">
            <summary>
            Уровень логирования
            </summary>
        </member>
        <member name="P:Libs.Logger.Configuration.LoggerConfiguration.IsEnabled">
            <summary>
            Флаг, показывающий включен логгер или нет
            </summary>
        </member>
        <member name="P:Libs.Logger.Configuration.LoggerConfiguration.IsStackTraceEnabled">
            <summary>
            Можно ли извлекать данные о вызове из стека
            </summary>
        </member>
        <member name="T:Libs.Logger.Configuration.LogWriterWrapperConfiguration">
            <summary>
            Базовая конфигурация для писателя/обёртки
            </summary>
        </member>
        <member name="M:Libs.Logger.Configuration.LogWriterWrapperConfiguration.#ctor(Libs.Logger.Configuration.WriterTypeEnum)">
            <summary>
            Конструктор LogWriterWrapperConfiguration
            </summary>
            <param name="writerType">Тип писателя</param>
        </member>
        <member name="P:Libs.Logger.Configuration.LogWriterWrapperConfiguration.WriterType">
            <summary>
            Тип писателя
            </summary>
        </member>
        <member name="T:Libs.Logger.Configuration.AsyncQueueWrapperConfiguration">
            <summary>
            Обёртка, обеспечивающая асинхронную обработку логов
            </summary>
        </member>
        <member name="M:Libs.Logger.Configuration.AsyncQueueWrapperConfiguration.#ctor(System.Int32,System.Boolean,Libs.Logger.Configuration.LogWriterWrapperConfiguration)">
            <summary>
            Конструктор AsyncQueueWrapperConfiguration
            </summary>
            <param name="maxQueueSize">Определяет максимальный размер очереди (-1 - для бесконечной очереди)</param>
            <param name="isDiscardExcess">Выбрасывать ли записи при переполнении очереди</param>
            <param name="innerWriter">Внутренний писатель</param>
        </member>
        <member name="M:Libs.Logger.Configuration.AsyncQueueWrapperConfiguration.#ctor(System.Int32,System.Boolean)">
            <summary>
            Конструктор AsyncQueueWrapperConfiguration
            </summary>
            <param name="maxQueueSize">Определяет максимальный размер очереди (-1 - для бесконечной очереди)</param>
            <param name="isDiscardExcess">Выбрасывать ли записи при переполнении очереди</param>
        </member>
        <member name="M:Libs.Logger.Configuration.AsyncQueueWrapperConfiguration.#ctor">
            <summary>
            Конструктор AsyncQueueWrapperConfiguration
            </summary>
        </member>
        <member name="P:Libs.Logger.Configuration.AsyncQueueWrapperConfiguration.MaxQueueSize">
            <summary>
            Определяет максимальный размер очереди (-1 - для бесконечной очереди)
            </summary>
        </member>
        <member name="P:Libs.Logger.Configuration.AsyncQueueWrapperConfiguration.IsDiscardExcess">
            <summary>
            Флаг задает поведение в случае переполнения очереди событий - выбрасывать лишнии 
            или ожидать возможности добавления (блокировать поток на добавлении)
            </summary>
        </member>
        <member name="P:Libs.Logger.Configuration.AsyncQueueWrapperConfiguration.InnerWriter">
            <summary>
            Конфигурация логгера, в который будут отправляться логгирующие сообщения
            </summary>
        </member>
        <member name="T:Libs.Logger.Configuration.AsyncReliableQueueWrapperConfiguration">
            <summary>
            Обертка для обеспечения асинхронности с гарантией записи в лог (ведёт локальное хранилище)
            </summary>
        </member>
        <member name="M:Libs.Logger.Configuration.AsyncReliableQueueWrapperConfiguration.#ctor(System.Int32,System.Boolean,System.String,System.Int64,Libs.Logger.Configuration.LogWriterWrapperConfiguration)">
            <summary>
            Конструктор AsyncReliableQueueWrapperConfiguration
            </summary>
            <param name="maxQueueSize">Определяет максимальный размер очереди (-1 - для бесконечной очереди)</param>
            <param name="isDiscardExcess">Выбрасывать ли записи при переполнении очереди</param>
            <param name="folderName">Имя директории для хранения файлов</param>
            <param name="maxSingleFileSize">Максимальный размер одного файла</param>
            <param name="innerWriter">Внутренний писатель</param>
        </member>
        <member name="M:Libs.Logger.Configuration.AsyncReliableQueueWrapperConfiguration.#ctor(System.Int32,System.Boolean,System.String,System.Int64)">
            <summary>
            Конструктор AsyncReliableQueueWrapperConfiguration
            </summary>
            <param name="maxQueueSize">Определяет максимальный размер очереди (-1 - для бесконечной очереди)</param>
            <param name="isDiscardExcess">Выбрасывать ли записи при переполнении очереди</param>
            <param name="folderName">Имя директории для хранения файлов</param>
            <param name="maxSingleFileSize">Максимальный размер одного файла</param>
        </member>
        <member name="M:Libs.Logger.Configuration.AsyncReliableQueueWrapperConfiguration.#ctor(System.String)">
            <summary>
            Конструктор AsyncReliableQueueWrapperConfiguration
            </summary>
            <param name="folderName">Имя директории для хранения файлов</param>
        </member>
        <member name="M:Libs.Logger.Configuration.AsyncReliableQueueWrapperConfiguration.#ctor">
            <summary>
            Конструктор AsyncReliableQueueWrapperConfiguration
            </summary>
        </member>
        <member name="P:Libs.Logger.Configuration.AsyncReliableQueueWrapperConfiguration.MaxQueueSize">
            <summary>
            Определяет максимальный размер очереди (-1 - для бесконечной очереди)
            </summary>
        </member>
        <member name="P:Libs.Logger.Configuration.AsyncReliableQueueWrapperConfiguration.IsDiscardExcess">
            <summary>
            Флаг задает поведение в случае переполнения очереди событий - выбрасывать лишнии 
            или ожидать возможности добавления (блокировать поток на добавлении)
            </summary>
        </member>
        <member name="P:Libs.Logger.Configuration.AsyncReliableQueueWrapperConfiguration.FolderForTemporaryStore">
            <summary>
            Имя папки, в которую будут складываться неотправленные сообщения 
            для отложенной отправки
            </summary>
        </member>
        <member name="P:Libs.Logger.Configuration.AsyncReliableQueueWrapperConfiguration.MaxFileSize">
            <summary>
            Максимальный размер файла в байтах для хранения неотправленных логов
            </summary>
        </member>
        <member name="P:Libs.Logger.Configuration.AsyncReliableQueueWrapperConfiguration.InnerWriter">
            <summary>
            Конфигурация логгера, в который будут отправляться логгирующие сообщения
            </summary>
        </member>
        <member name="T:Libs.Logger.Configuration.GroupWrapperConfiguration">
            <summary>
            Групповой враппер
            </summary>
        </member>
        <member name="M:Libs.Logger.Configuration.GroupWrapperConfiguration.#ctor(System.Collections.Generic.IEnumerable{Libs.Logger.Configuration.LogWriterWrapperConfiguration})">
            <summary>
            Конструктор GroupWrapperConfiguration
            </summary>
            <param name="writers">Внутренние писатели</param>
        </member>
        <member name="M:Libs.Logger.Configuration.GroupWrapperConfiguration.#ctor">
            <summary>
            Конструктор GroupWrapperConfiguration
            </summary>
        </member>
        <member name="P:Libs.Logger.Configuration.GroupWrapperConfiguration.InnerWriters">
            <summary>
            Внутренние писатели
            </summary>
        </member>
        <member name="T:Libs.Logger.Configuration.RoutingWrapperConfiguration">
            <summary>
            Маршрутизирующий враппер
            </summary>
        </member>
        <member name="M:Libs.Logger.Configuration.RoutingWrapperConfiguration.#ctor(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{Libs.Logger.Configuration.LogWriterWrapperConfiguration}},System.Collections.Generic.IEnumerable{Libs.Logger.Configuration.LogWriterWrapperConfiguration},System.Collections.Generic.IEnumerable{Libs.Logger.Configuration.LogWriterWrapperConfiguration})">
            <summary>
            Конструктор RoutingWrapperConfiguration
            </summary>
            <param name="routing">Маршрутизация по имени подсистем</param>
            <param name="fromAll">Доставка всем</param>
            <param name="fromOthers">Доставка оставшимя</param>
        </member>
        <member name="M:Libs.Logger.Configuration.RoutingWrapperConfiguration.#ctor(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{Libs.Logger.Configuration.LogWriterWrapperConfiguration}})">
            <summary>
            Конструктор RoutingWrapperConfiguration
            </summary>
            <param name="routing">Маршрутизация по имени подсистем</param>
        </member>
        <member name="M:Libs.Logger.Configuration.RoutingWrapperConfiguration.#ctor">
            <summary>
            Конструктор RoutingWrapperConfiguration
            </summary>
        </member>
        <member name="P:Libs.Logger.Configuration.RoutingWrapperConfiguration.FromAll">
            <summary>
            Список конфигураций логгеров для логирования со всех модулей
            </summary>
        </member>
        <member name="P:Libs.Logger.Configuration.RoutingWrapperConfiguration.FromOthers">
            <summary>
            Список конфигураций логгеров для логирования с модулей которые явно не прописаны в маршрутизации
            </summary>
        </member>
        <member name="P:Libs.Logger.Configuration.RoutingWrapperConfiguration.RoutingWriters">
            <summary>
            Список конфигураций логгеров для логирования с привязкой для каждого имени модуля
            </summary>
        </member>
        <member name="T:Libs.Logger.Configuration.PatternMatchingWrapperConfiguration">
            <summary>
            Маршрутизирующий по паттерну враппер
            </summary>
        </member>
        <member name="M:Libs.Logger.Configuration.PatternMatchingWrapperConfiguration.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,Libs.Logger.Configuration.LogWriterWrapperConfiguration},Libs.Logger.Configuration.LogWriterWrapperConfiguration)">
            <summary>
            Конструктор PatternMatchingWrapperConfiguration
            </summary>
            <param name="pattern">Паттерн для получения строки</param>
            <param name="matchWriters">Словарь для выявляения совпадающих по паттерну писателей</param>
            <param name="defaultWriter">Писатель, в который пишет я при отстутвии совпадений</param>
        </member>
        <member name="M:Libs.Logger.Configuration.PatternMatchingWrapperConfiguration.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,Libs.Logger.Configuration.LogWriterWrapperConfiguration})">
            <summary>
            Конструктор PatternMatchingWrapperConfiguration
            </summary>
            <param name="pattern">Паттерн для получения строки</param>
            <param name="matchWriters">Словарь для выявляения совпадающих по паттерну писателей</param>
        </member>
        <member name="M:Libs.Logger.Configuration.PatternMatchingWrapperConfiguration.#ctor(System.String)">
            <summary>
            Конструктор PatternMatchingWrapperConfiguration
            </summary>
            <param name="pattern">Паттерн для получения строки</param>
        </member>
        <member name="P:Libs.Logger.Configuration.PatternMatchingWrapperConfiguration.Pattern">
            <summary>
            Паттерн для формирования строки по сообщению, которая потом сравнивается
            </summary>
        </member>
        <member name="P:Libs.Logger.Configuration.PatternMatchingWrapperConfiguration.MatchWriters">
            <summary>
            Список конфигураций логгеров для логирования с привязкой по паттерну
            </summary>
        </member>
        <member name="P:Libs.Logger.Configuration.PatternMatchingWrapperConfiguration.DefaultWriter">
            <summary>
            Конфигурация писателя, в который пишется при отсутствии совпадений
            </summary>
        </member>
        <member name="T:Libs.Logger.Configuration.LogWriterConfiguration">
            <summary>
            Базовая конфигурация для писателей 
            </summary>
        </member>
        <member name="M:Libs.Logger.Configuration.LogWriterConfiguration.#ctor(Libs.Logger.LogLevel,Libs.Logger.Configuration.WriterTypeEnum)">
            <summary>
            Конструктор LogWriterConfiguration
            </summary>
            <param name="level">Уровень логирования</param>
            <param name="writerType">Тип писателя</param>
        </member>
        <member name="P:Libs.Logger.Configuration.LogWriterConfiguration.Level">
            <summary>
            Уровень логирования
            </summary>
        </member>
        <member name="T:Libs.Logger.Configuration.EmptyWriterConfiguration">
            <summary>
            Пустой писатель
            </summary>
        </member>
        <member name="M:Libs.Logger.Configuration.EmptyWriterConfiguration.#ctor">
            <summary>
            Конструктор EmptyWriterConfiguration
            </summary>
        </member>
        <member name="T:Libs.Logger.Configuration.ConsoleWriterConfiguration">
            <summary>
            Писатель логов в консоль
            </summary>
        </member>
        <member name="M:Libs.Logger.Configuration.ConsoleWriterConfiguration.#ctor(Libs.Logger.LogLevel,System.String)">
            <summary>
            Конструктор ConsoleWriterConfiguration
            </summary>
            <param name="level">Уровень логирования</param>
            <param name="template">Шаблон</param>
        </member>
        <member name="M:Libs.Logger.Configuration.ConsoleWriterConfiguration.#ctor(System.String)">
            <summary>
            Конструктор ConsoleWriterConfiguration
            </summary>
            <param name="template">Шаблон</param>
        </member>
        <member name="M:Libs.Logger.Configuration.ConsoleWriterConfiguration.#ctor">
            <summary>
            Конструктор ConsoleWriterConfiguration
            </summary>
        </member>
        <member name="P:Libs.Logger.Configuration.ConsoleWriterConfiguration.Template">
            <summary>
            Шаблон для записи форматируемой строки
            </summary>
        </member>
        <member name="T:Libs.Logger.Configuration.FileWriterConfiguration">
            <summary>
            Писатель в файл
            </summary>
        </member>
        <member name="M:Libs.Logger.Configuration.FileWriterConfiguration.#ctor(Libs.Logger.LogLevel,System.String,System.String,System.Boolean,System.Text.Encoding)">
            <summary>
            Конструктор FileWriterConfiguration
            </summary>
            <param name="level">Уровень логирования</param>
            <param name="template">Шаблон записи</param>
            <param name="fileNameTemplate">Шаблон имени файла с директорией</param>
            <param name="isNeedFileRotation">Нужна ли ротация файлов</param>
            <param name="encoding">Кодировка</param>
        </member>
        <member name="M:Libs.Logger.Configuration.FileWriterConfiguration.#ctor(Libs.Logger.LogLevel,System.String,System.String,System.Text.Encoding)">
            <summary>
            Конструктор FileWriterConfiguration
            </summary>
            <param name="level">Уровень логирования</param>
            <param name="template">Шаблон записи</param>
            <param name="fileNameTemplate">Шаблон имени файла с директорией</param>
            <param name="encoding">Кодировка</param>
        </member>
        <member name="M:Libs.Logger.Configuration.FileWriterConfiguration.#ctor(Libs.Logger.LogLevel,System.String,System.String)">
            <summary>
            Конструктор FileWriterConfiguration
            </summary>
            <param name="level">Уровень логирования</param>
            <param name="template">Шаблон записи</param>
            <param name="fileNameTemplate">Шаблон имени файла с директорией</param>
        </member>
        <member name="M:Libs.Logger.Configuration.FileWriterConfiguration.#ctor(System.String,System.String)">
            <summary>
            Конструктор FileWriterConfiguration
            </summary>
            <param name="template">Шаблон записи</param>
            <param name="fileNameTemplate">Шаблон имени файла с директорией</param>
        </member>
        <member name="M:Libs.Logger.Configuration.FileWriterConfiguration.#ctor">
            <summary>
            Конструктор FileWriterConfiguration
            </summary>
        </member>
        <member name="P:Libs.Logger.Configuration.FileWriterConfiguration.Template">
            <summary>
            Шаблон для записи форматируемой строки для некоторых логгеров - ConsoleWriter, FileWriter
            </summary>
        </member>
        <member name="P:Libs.Logger.Configuration.FileWriterConfiguration.FileNameTemplate">
            <summary>
            Имя файла для записи логов
            Может содержать ключи для подстановки Data, Time, Modul, Namespace, Class, Level, 
            и ключи объявленные в контексте экземляра логгера
            Благордаря ключам поддерживается ротация файлов - по дате или по имени системы от куда пишем
            </summary>
        </member>
        <member name="P:Libs.Logger.Configuration.FileWriterConfiguration.IsNeedFileRotate">
            <summary>
            Показывает нужна ли ротация файлов
            </summary>
        </member>
        <member name="P:Libs.Logger.Configuration.FileWriterConfiguration.Encoding">
            <summary>
            Кодировка, используемая для записи в файл
            </summary>
        </member>
        <member name="T:Libs.Logger.Configuration.PipeWriterConfiguration">
            <summary>
            Конфиг писателя в Пайп
            </summary>
        </member>
        <member name="M:Libs.Logger.Configuration.PipeWriterConfiguration.#ctor(Libs.Logger.LogLevel,System.String,System.String)">
            <summary>
            Конструктор PipeWriterConfiguration
            </summary>
            <param name="level">Уровень логирования</param>
            <param name="serverName">Имя сервера</param>
            <param name="pipeName">Имя пайпа</param>
        </member>
        <member name="M:Libs.Logger.Configuration.PipeWriterConfiguration.#ctor(Libs.Logger.LogLevel,System.String)">
            <summary>
            Конструктор PipeWriterConfiguration
            </summary>
            <param name="level">Уровень логирования</param>
            <param name="pipeName">Имя пайпа</param>
        </member>
        <member name="M:Libs.Logger.Configuration.PipeWriterConfiguration.#ctor(System.String)">
            <summary>
            Конструктор PipeWriterConfiguration
            </summary>
            <param name="pipeName">Имя пайпа</param>
        </member>
        <member name="M:Libs.Logger.Configuration.PipeWriterConfiguration.#ctor">
            <summary>
            Конструктор PipeWriterConfiguration
            </summary>
        </member>
        <member name="P:Libs.Logger.Configuration.PipeWriterConfiguration.ServerName">
            <summary>
            Имя сервера
            </summary>
        </member>
        <member name="P:Libs.Logger.Configuration.PipeWriterConfiguration.PipeName">
            <summary>
            Имя пайпа
            </summary>
        </member>
        <member name="T:Libs.Logger.Configuration.NetWriterConfiguration">
            <summary>
            Конфиг писателя по сети
            </summary>
        </member>
        <member name="M:Libs.Logger.Configuration.NetWriterConfiguration.#ctor(Libs.Logger.LogLevel,System.String,System.Int32)">
            <summary>
            Конструктор NetWriterConfiguration
            </summary>
            <param name="level">Уровень логирования</param>
            <param name="serverAddress">Адрес сервера</param>
            <param name="port">Порт</param>
        </member>
        <member name="M:Libs.Logger.Configuration.NetWriterConfiguration.#ctor(Libs.Logger.LogLevel,System.String)">
            <summary>
            Конструктор NetWriterConfiguration
            </summary>
            <param name="level">Уровень логирования</param>
            <param name="serverAddress">Адрес сервера</param>
        </member>
        <member name="M:Libs.Logger.Configuration.NetWriterConfiguration.#ctor(System.String)">
            <summary>
            Конструктор NetWriterConfiguration
            </summary>
            <param name="serverAddress">Адрес сервера</param>
        </member>
        <member name="M:Libs.Logger.Configuration.NetWriterConfiguration.#ctor">
            <summary>
            Конструктор NetWriterConfiguration
            </summary>
        </member>
        <member name="P:Libs.Logger.Configuration.NetWriterConfiguration.ServerAddress">
            <summary>
            Имя или адресс сервера
            </summary>
        </member>
        <member name="P:Libs.Logger.Configuration.NetWriterConfiguration.Port">
            <summary>
            Порт для подключения
            </summary>
        </member>
        <member name="T:Libs.Logger.Configuration.DatabaseWriterConfiguration">
            <summary>
            Конфиг писателя в базу данных
            </summary>
        </member>
        <member name="M:Libs.Logger.Configuration.DatabaseWriterConfiguration.#ctor(Libs.Logger.LogLevel,System.String,System.String)">
            <summary>
            Конструктор DatabaseWriterConfiguration
            </summary>
            <param name="level">Уровень логирования</param>
            <param name="connectionString">Строка соединения</param>
            <param name="storedProcedureName">Имя хранимой процедуры</param>
        </member>
        <member name="M:Libs.Logger.Configuration.DatabaseWriterConfiguration.#ctor(Libs.Logger.LogLevel,System.String)">
            <summary>
            Конструктор DatabaseWriterConfiguration
            </summary>
            <param name="level">Уровень логирования</param>
            <param name="connectionString">Строка соединения</param>
        </member>
        <member name="M:Libs.Logger.Configuration.DatabaseWriterConfiguration.#ctor(System.String)">
            <summary>
            Конструктор DatabaseWriterConfiguration
            </summary>
            <param name="connectionString">Строка соединения</param>
        </member>
        <member name="M:Libs.Logger.Configuration.DatabaseWriterConfiguration.#ctor">
            <summary>
            Конструктор DatabaseWriterConfiguration
            </summary>
        </member>
        <member name="P:Libs.Logger.Configuration.DatabaseWriterConfiguration.ConnectionString">
            <summary>
            Строка подключения к БД
            </summary>
        </member>
        <member name="P:Libs.Logger.Configuration.DatabaseWriterConfiguration.StoredProcedureName">
            <summary>
            Имя хранимой процедуры для вставки в БД
            </summary>
        </member>
        <member name="T:Libs.Logger.Exceptions.LoggerConfigurationException">
            <summary>
            Ошибка конфигации логгера.
            </summary>
        </member>
        <member name="T:Libs.Logger.LoggerException">
            <summary>
            Базовый класс для исключений бросаемых логгером
            </summary>
        </member>
        <member name="T:Libs.Logger.Exceptions.LoggerNetWriteException">
            <summary>
            Ошибка передачи лога по сети.
            </summary>
        </member>
        <member name="T:Libs.Logger.Exceptions.LoggerFileWriteException">
            <summary>
            Ошибка записи лога в файл.
            </summary>
        </member>
        <member name="T:Libs.Logger.Exceptions.LoggerDBWriteException">
            <summary>
            Ошибка записи лога в базу данных.
            </summary>
        </member>
        <member name="T:Libs.Logger.Exceptions.LoggerSerializationException">
            <summary>
            Ошибка конфигации логгера.
            </summary>
        </member>
        <member name="T:Libs.Logger.Helpers.ErrorTimeTracker">
            <summary>
            Отслеживание периода логирования при ошибках
            </summary>
        </member>
        <member name="P:Libs.Logger.Helpers.LocalMachineInfo.MachineName">
            <summary>
            Имя машины
            </summary>
        </member>
        <member name="P:Libs.Logger.Helpers.LocalMachineInfo.MachineAddress">
            <summary>
            Адрес машины
            </summary>
        </member>
        <member name="P:Libs.Logger.Helpers.LocalMachineInfo.CombinedMachineName">
            <summary>
            Объединённое имя машины
            </summary>
        </member>
        <member name="P:Libs.Logger.Helpers.LocalMachineInfo.ProcessName">
            <summary>
            Имя процесса
            </summary>
        </member>
        <member name="T:Libs.Logger.Net.INetService">
            <summary>
            Простой интерфейс для передачи данных по сети
            </summary>
        </member>
        <member name="M:Libs.Logger.Net.INetService.SendData(System.Byte[])">
            <summary>
            Передаем данные на сервер. 
            Предполагается что под массивом байт может пониматься любой сериализованный объект.
            </summary>
            <param name="data">Массив байт</param>
        </member>
        <member name="T:Libs.Logger.Writers.Wrappers.Helpers.QueueAsyncProcessing.QueueAsyncProcessor`1">
            <summary>
            Асинхронный обработчик данных в несколько потоков с очередью
            </summary>
            <typeparam name="T">Тип обрабатываемого элемента</typeparam>
        </member>
        <member name="T:Libs.Logger.Writers.Wrappers.Helpers.QueueAsyncProcessing.QueueAsyncProcessorBase`1">
            <summary>
            Базовый класс для асинхронных обработчиков
            </summary>
            <typeparam name="T">Тип обрабатываемого элемента</typeparam>
        </member>
        <member name="M:Libs.Logger.Writers.Wrappers.Helpers.QueueAsyncProcessing.QueueAsyncProcessorBase`1.TryAdd(`0)">
            <summary>
            Попытаться добавить элемент на обработку
            </summary>
            <param name="element">Элемент</param>
            <returns>Удалось ли добавить</returns>
        </member>
        <member name="M:Libs.Logger.Writers.Wrappers.Helpers.QueueAsyncProcessing.QueueAsyncProcessorBase`1.Add(`0)">
            <summary>
            Добавление элемента на обработку
            </summary>
            <param name="element">Элемент</param>
        </member>
        <member name="M:Libs.Logger.Writers.Wrappers.Helpers.QueueAsyncProcessing.QueueAsyncProcessorBase`1.Dispose(System.Boolean)">
            <summary>
            Основной код освобождения ресурсов
            </summary>
            <param name="isUserCall">Вызвано ли освобождение пользователем. False - деструктор</param>
        </member>
        <member name="M:Libs.Logger.Writers.Wrappers.Helpers.QueueAsyncProcessing.QueueAsyncProcessorBase`1.Dispose">
            <summary>
            Освобождение ресурсов
            </summary>
        </member>
        <member name="M:Libs.Logger.Writers.Wrappers.Helpers.QueueAsyncProcessing.QueueAsyncProcessor`1.Invariant">
            <summary>
            Контракты
            </summary>
        </member>
        <member name="M:Libs.Logger.Writers.Wrappers.Helpers.QueueAsyncProcessing.QueueAsyncProcessor`1.#ctor(System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            Конструктор QueueAsyncProcessor
            </summary>
            <param name="processorCount">Число потоков обработки</param>
            <param name="maxQueueSize">Максимальный размер очереди</param>
            <param name="name">Имя, присваемое потокам</param>
            <param name="isBackground">Будут ли потоки работать в фоновом режиме</param>
            <param name="customCollection">Коллекция - контейнер</param>
        </member>
        <member name="M:Libs.Logger.Writers.Wrappers.Helpers.QueueAsyncProcessing.QueueAsyncProcessor`1.Start">
            <summary>
            Запуск обработчиков.
            Возможен перезапуск после вызова метода Stop()
            </summary>
        </member>
        <member name="M:Libs.Logger.Writers.Wrappers.Helpers.QueueAsyncProcessing.QueueAsyncProcessor`1.Stop(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Остановка работы асинхронного обработчика
            </summary>
            <param name="waitForStop">Ждать ли завершения всех потоков</param>
            <param name="letFinishProcess">Позволить закончить обработку того, что есть в очереди</param>
            <param name="completeAdding">Заблокировать добавление новых элементов</param>
            <returns>Запущен ли процесс остановки</returns>
        </member>
        <member name="M:Libs.Logger.Writers.Wrappers.Helpers.QueueAsyncProcessing.QueueAsyncProcessor`1.Stop">
            <summary>
            Остановка работы асинхронного обработчика
            </summary>
        </member>
        <member name="M:Libs.Logger.Writers.Wrappers.Helpers.QueueAsyncProcessing.QueueAsyncProcessor`1.WaitUntilStop">
            <summary>
            Ожидание полной остановки
            </summary>
        </member>
        <member name="M:Libs.Logger.Writers.Wrappers.Helpers.QueueAsyncProcessing.QueueAsyncProcessor`1.WaitUntilStop(System.Int32)">
            <summary>
            Ожидание полной остановки с таймаутом
            </summary>
            <param name="timeout">Таймаут ожидания в миллисекундах</param>
            <returns>true - дождались, false - вышли по таймауту</returns>
        </member>
        <member name="M:Libs.Logger.Writers.Wrappers.Helpers.QueueAsyncProcessing.QueueAsyncProcessor`1.TryAdd(`0)">
            <summary>
            Попытаться добавить элемент на обработку
            </summary>
            <param name="element">Элемент</param>
            <returns>Удалось ли добавить</returns>
        </member>
        <member name="M:Libs.Logger.Writers.Wrappers.Helpers.QueueAsyncProcessing.QueueAsyncProcessor`1.Add(`0)">
            <summary>
            Добавление элемента на обработку
            </summary>
            <param name="element">Элемент</param>
        </member>
        <member name="M:Libs.Logger.Writers.Wrappers.Helpers.QueueAsyncProcessing.QueueAsyncProcessor`1.ExtractToken">
            <summary>
            Извлечение токена отмены. (Обрабатывает ситуацию, когда _threadWaitCancelation == null)
            </summary>
            <returns>Токен отмены</returns>
        </member>
        <member name="M:Libs.Logger.Writers.Wrappers.Helpers.QueueAsyncProcessing.QueueAsyncProcessor`1.ThreadProcFunc">
            <summary>
            Основноя функция, выполняемая потоками
            </summary>
        </member>
        <member name="M:Libs.Logger.Writers.Wrappers.Helpers.QueueAsyncProcessing.QueueAsyncProcessor`1.ProcessThreadException(System.Exception)">
            <summary>
            Обработка исключений. 
            Чтобы исключение было проброшено наверх, нужно выбросить новое исключение внутри метода.
            </summary>
            <param name="ex">Исключение</param>
            <returns>Игнорировать ли исключение (false - поток завершает работу)</returns>
        </member>
        <member name="M:Libs.Logger.Writers.Wrappers.Helpers.QueueAsyncProcessing.QueueAsyncProcessor`1.Prepare">
            <summary>
            Создание объекта состояния на поток.
            Вызывается при старте для каждого потока
            </summary>
            <returns>Объект состояния</returns>
        </member>
        <member name="M:Libs.Logger.Writers.Wrappers.Helpers.QueueAsyncProcessing.QueueAsyncProcessor`1.Process(`0,System.Object,System.Threading.CancellationToken)">
            <summary>
            Основной метод обработки элементов
            </summary>
            <param name="element">Элемент</param>
            <param name="state">Объект состояния, инициализированный в методе Prepare()</param>
            <param name="token">Токен для отмены обработки</param>
        </member>
        <member name="M:Libs.Logger.Writers.Wrappers.Helpers.QueueAsyncProcessing.QueueAsyncProcessor`1.Finalize(System.Object)">
            <summary>
            Освобождение объекта состояния потока
            </summary>
            <param name="state">Объект состояния</param>
        </member>
        <member name="M:Libs.Logger.Writers.Wrappers.Helpers.QueueAsyncProcessing.QueueAsyncProcessor`1.Dispose(System.Boolean)">
            <summary>
            Основной код освобождения ресурсов
            </summary>
            <param name="isUserCall">Вызвано ли освобождение пользователем. False - деструктор</param>
        </member>
        <member name="M:Libs.Logger.Writers.Wrappers.Helpers.QueueAsyncProcessing.QueueAsyncProcessor`1.Finalize">
            <summary>
            Финализатор
            </summary>
        </member>
        <member name="P:Libs.Logger.Writers.Wrappers.Helpers.QueueAsyncProcessing.QueueAsyncProcessor`1.IsWorkState">
            <summary>
            Запущен ли сейчас обработчик
            </summary>
        </member>
        <member name="P:Libs.Logger.Writers.Wrappers.Helpers.QueueAsyncProcessing.QueueAsyncProcessor`1.Name">
            <summary>
            Имя обработчика
            </summary>
        </member>
        <member name="P:Libs.Logger.Writers.Wrappers.Helpers.QueueAsyncProcessing.QueueAsyncProcessor`1.IsBackground">
            <summary>
            Работают ли потоки в фоновом режиме
            </summary>
        </member>
        <member name="P:Libs.Logger.Writers.Wrappers.Helpers.QueueAsyncProcessing.QueueAsyncProcessor`1.ProcessorCount">
            <summary>
            Число потоков обработки
            </summary>
        </member>
        <member name="P:Libs.Logger.Writers.Wrappers.Helpers.QueueAsyncProcessing.QueueAsyncProcessor`1.ElementCount">
            <summary>
            Число элементов в очереди
            </summary>
        </member>
        <member name="P:Libs.Logger.Writers.Wrappers.Helpers.QueueAsyncProcessing.QueueAsyncProcessor`1.State">
            <summary>
            Текущее состояние
            </summary>
        </member>
        <member name="P:Libs.Logger.Writers.Wrappers.Helpers.QueueAsyncProcessing.QueueAsyncProcessor`1.IsStopingRequested">
            <summary>
            Запрошена ли остановка потоков
            </summary>
        </member>
        <member name="T:Libs.Logger.Writers.Wrappers.Helpers.QueueAsyncProcessing.QueueAsyncProcessorState">
            <summary>
            Состояние асинхронного обработчика
            </summary>
        </member>
        <member name="F:Libs.Logger.Writers.Wrappers.Helpers.QueueAsyncProcessing.QueueAsyncProcessorState.Created">
            <summary>
            Создан
            </summary>
        </member>
        <member name="F:Libs.Logger.Writers.Wrappers.Helpers.QueueAsyncProcessing.QueueAsyncProcessorState.StartPending">
            <summary>
            В процессе запуска
            </summary>
        </member>
        <member name="F:Libs.Logger.Writers.Wrappers.Helpers.QueueAsyncProcessing.QueueAsyncProcessorState.InWork">
            <summary>
            Работает
            </summary>
        </member>
        <member name="F:Libs.Logger.Writers.Wrappers.Helpers.QueueAsyncProcessing.QueueAsyncProcessorState.StopPending">
            <summary>
            В процессе остановки
            </summary>
        </member>
        <member name="F:Libs.Logger.Writers.Wrappers.Helpers.QueueAsyncProcessing.QueueAsyncProcessorState.Stopped">
            <summary>
            Остановлен
            </summary>
        </member>
        <member name="F:Libs.Logger.Writers.Wrappers.Helpers.QueueAsyncProcessing.QueueAsyncProcessorState.Disposed">
            <summary>
            Уничтожен
            </summary>
        </member>
        <member name="T:Libs.Logger.LoggingEventConverters.LegacyConverterFactory">
            <summary>
            Фабрика конвертеров старого формата
            </summary>
        </member>
        <member name="T:Libs.Logger.LoggingEventConverters.ConverterFactory">
            <summary>
            Фабрика для создания конвертеров,
            необходимых для преобразования логируемых данных в строки для вывода в файл или консоль
            </summary>
        </member>
        <member name="M:Libs.Logger.LoggingEventConverters.ConverterFactory.CreateLoggingEventConverter(System.Collections.Generic.List{Libs.Logger.LoggingEventConverters.LoggingEventConverterBase})">
            <summary>
            Создание результирующего конвертора,
            содержащего последовательность конверторов, 
            с помощью которых он получает результирующую строку
            </summary>
            <param name="converters">Пооследовательность конвертеров</param>
            <returns></returns>
        </member>
        <member name="M:Libs.Logger.LoggingEventConverters.ConverterFactory.CreateConstConverter(System.String)">
            <summary>
            Создание конвертора для статической части шаблона
            Пример
            Для шаблона "-- {Msg} " - Потребуется два статичных конвертора
            1) Возвращает строку "-- "
            2) Возвращает " "
            </summary>
            <param name="constString">строка</param>
            <returns></returns>
        </member>
        <member name="M:Libs.Logger.LoggingEventConverters.ConverterFactory.CreateContextConverter">
            <summary>
            Создание конвертора для контекста
            </summary>
            <returns></returns>
        </member>
        <member name="M:Libs.Logger.LoggingEventConverters.ConverterFactory.CreateDateConverter(System.String)">
            <summary>
            Создание ковертора для преобразования даты в строковый формат
            </summary>
            <param name="format">Формат даты и времени</param>
            <returns></returns>
        </member>
        <member name="M:Libs.Logger.LoggingEventConverters.ConverterFactory.CreateLevelConverter">
            <summary>
            Создание ковертора для получения строки из уровня логирования
            </summary>
            <returns></returns>
        </member>
        <member name="M:Libs.Logger.LoggingEventConverters.ConverterFactory.CreateMachineNameConverter">
            <summary>
            Создание конвертера для получения имени машины
            </summary>
            <returns></returns>
        </member>
        <member name="M:Libs.Logger.LoggingEventConverters.ConverterFactory.CreateProcessNameConverter">
            <summary>
            Создание конвертера для получения имени процесса
            </summary>
            <returns></returns>
        </member>
        <member name="M:Libs.Logger.LoggingEventConverters.ConverterFactory.CreateAssemblyConverter">
            <summary>
            Создание конвертера для получения имени сборки
            </summary>
            <returns></returns>
        </member>
        <member name="M:Libs.Logger.LoggingEventConverters.ConverterFactory.CreateNamespaceConverter">
            <summary>
            Создание конвертера для получения пространства имён
            </summary>
            <returns></returns>
        </member>
        <member name="M:Libs.Logger.LoggingEventConverters.ConverterFactory.CreateClassConverter">
            <summary>
            Создание ковертора для получения имени класса
            </summary>
            <returns></returns>
        </member>
        <member name="M:Libs.Logger.LoggingEventConverters.ConverterFactory.CreateMethodConverter">
            <summary>
            Создание ковертора для получения имени метода
            </summary>
            <returns></returns>
        </member>
        <member name="M:Libs.Logger.LoggingEventConverters.ConverterFactory.CreateMessageConverter">
            <summary>
            Создание ковертора для получения строки сообщения
            </summary>
            <returns></returns>
        </member>
        <member name="M:Libs.Logger.LoggingEventConverters.ConverterFactory.CreateExceptionConverter">
            <summary>
            Создание ковертора для получения строкого представления исключения
            </summary>
            <returns></returns>
        </member>
        <member name="M:Libs.Logger.LoggingEventConverters.ConverterFactory.CreateStackSourceConverter">
            <summary>
            Создание ковертора для получения строки из списка StackSource
            </summary>
            <returns></returns>
        </member>
        <member name="P:Libs.Logger.LoggingEventConverters.ConverterFactory.Default">
            <summary>
            Инстанс фабрики по-умолчанию
            </summary>
        </member>
        <member name="T:Libs.Logger.LoggingEventConverters.LoggingEventConverterBase">
            <summary>
            Интерфейс конвертера, используемого для преобразования части логируемых данных 
            (имени метода или времени) в строковое представление
            Может использоваться в последовательности конвертеров, которые строят строку для вывода в файл или консоль
            </summary>
        </member>
        <member name="M:Libs.Logger.LoggingEventConverters.LoggingEventConverterBase.Convert(Libs.Logger.Common.LoggingEvent)">
            <summary>
             Преобразовать в строковое представление данные о событие
             </summary><param name="data">Данные</param><returns></returns>
        </member>
        <member name="M:Libs.Logger.LoggingEventConverters.LegacyExceptionConverter.ConvertOld(Libs.Logger.Common.Error)">
            <summary>
            Старый конвертор ошибки в строку - можно сказать он дефолтный и самый разумный
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:Libs.Logger.LoggingEventConverters.LegacyExceptionConverter.Convert(Libs.Logger.Common.Error,System.String)">
            <summary>
            Преобразование информации об исключительной ситуации в строковый вид
            С поддежки LogReader
            </summary>
            <param name="error">Информация об ошибке</param>
            <param name="methodName">Имя метода, где возникла ошибка</param>
            <returns></returns>
        </member>
        <member name="M:Libs.Logger.LoggingEventConverters.LegacyStackSourceConverter.Convert(System.Collections.Generic.List{System.String})">
            <summary>
            Преобразование списка в строковый вид
            </summary>
            <param name="arr">Массив строк</param>
            <returns></returns>
        </member>
        <member name="T:Libs.Logger.LoggingEventConverters.LoggingEventConverterExtension">
            <summary>
            Расширение для конвертера с префиксами и суффиксами
            </summary>
        </member>
        <member name="M:Libs.Logger.LoggingEventConverters.LoggingEventConverterExtension.#ctor(Libs.Logger.LoggingEventConverters.LoggingEventConverterBase)">
            <summary>
            Конструктор LoggingEventConverterExtension
            </summary>
            <param name="innerConv">Внутренний конвертер</param>
        </member>
        <member name="M:Libs.Logger.LoggingEventConverters.LoggingEventConverterExtension.#ctor(Libs.Logger.LoggingEventConverters.LoggingEventConverterBase,System.String)">
            <summary>
            Конструктор LoggingEventConverterExtension
            </summary>
            <param name="innerConv">Внутренний конвертер</param>
            <param name="valueOnNull">Значение, когда параметр null</param>
        </member>
        <member name="M:Libs.Logger.LoggingEventConverters.LoggingEventConverterExtension.#ctor(Libs.Logger.LoggingEventConverters.LoggingEventConverterBase,System.String,System.String,System.String)">
            <summary>
            Конструктор LoggingEventConverterExtension
            </summary>
            <param name="innerConv">Внутренний конвертер</param>
            <param name="prefix">Префикс</param>
            <param name="suffix">Суффикс</param>
            <param name="valueOnNull">Значение, когда параметр null</param>
        </member>
        <member name="M:Libs.Logger.LoggingEventConverters.LoggingEventConverterExtension.Convert(Libs.Logger.Common.LoggingEvent)">
            <summary>
            Конвертация
            </summary>
            <param name="data">Сообщение лога</param>
            <returns>Строковое представление</returns>
        </member>
        <member name="P:Libs.Logger.LoggingEventConverters.LoggingEventConverterExtension.Prefix">
            <summary>
            Префикс
            </summary>
        </member>
        <member name="P:Libs.Logger.LoggingEventConverters.LoggingEventConverterExtension.Suffix">
            <summary>
            Суффикс
            </summary>
        </member>
        <member name="T:Libs.Logger.Configuration.WriterTypeEnum">
            <summary>
            Тип писателя
            </summary>
        </member>
        <member name="F:Libs.Logger.Configuration.WriterTypeEnum.EmptyWriter">
            <summary>
            Логгер для сложной настройки роутинга собщений между внутренними логгерами
            </summary>
        </member>
        <member name="F:Libs.Logger.Configuration.WriterTypeEnum.AsyncQueueWrapper">
            <summary>
            Очередь для поддержания ассинхронности
            </summary>
        </member>
        <member name="F:Libs.Logger.Configuration.WriterTypeEnum.AsyncQueueWithReliableSendingWrapper">
            <summary>
            Очередь для поддержания ассинхронности и надежной доставки логов.
            Использует дополнительное хранилище на диске для записи логов, которые не удается отправить в данный момент
            </summary>
        </member>
        <member name="F:Libs.Logger.Configuration.WriterTypeEnum.ConsoleWriter">
            <summary>
            Консольный логгер
            </summary>
        </member>
        <member name="F:Libs.Logger.Configuration.WriterTypeEnum.FileWriter">
            <summary>
            Логгер для записи в файл
            </summary>
        </member>
        <member name="F:Libs.Logger.Configuration.WriterTypeEnum.DBWriter">
            <summary>
            Логгер для БД
            </summary>
        </member>
        <member name="F:Libs.Logger.Configuration.WriterTypeEnum.PipeWriter">
            <summary>
            Логгер для локального сервера - подключение по пайпу
            </summary>
        </member>
        <member name="F:Libs.Logger.Configuration.WriterTypeEnum.NetWriter">
            <summary>
            Логгер для ссетевого сервера - подключение по tcp
            </summary>
        </member>
        <member name="F:Libs.Logger.Configuration.WriterTypeEnum.GroupWrapper">
            <summary>
            Логгер для передачи сообщений группе внутренних логгеров
            </summary>
        </member>
        <member name="F:Libs.Logger.Configuration.WriterTypeEnum.RoutingWrapper">
            <summary>
            Логгер для сложной настройки роутинга собщений между внутренними логгерами
            </summary>
        </member>
        <member name="F:Libs.Logger.Configuration.WriterTypeEnum.PatternMatchingWrapper">
            <summary>
            Враппер с маршрутизацией на основе сравнения паттернов
            </summary>
        </member>
        <member name="T:Libs.Logger.LogLevel">
            <summary>
            Класс представляет собой уровень логирования и методы работы с ним
            </summary>
        </member>
        <member name="F:Libs.Logger.LogLevel.Trace">
            <summary>
            Константа для уровня логгирования Trace
            </summary>
        </member>
        <member name="F:Libs.Logger.LogLevel.Debug">
            <summary>
            Константа для уровня логгирования Debug
            </summary>
        </member>
        <member name="F:Libs.Logger.LogLevel.Info">
            <summary>
            Константа для уровня логгирования Info
            </summary>
        </member>
        <member name="F:Libs.Logger.LogLevel.Warn">
            <summary>
            Константа для уровня логгирования Warn
            </summary>
        </member>
        <member name="F:Libs.Logger.LogLevel.Error">
            <summary>
            Константа для уровня логгирования Error
            </summary>
        </member>
        <member name="F:Libs.Logger.LogLevel.Fatal">
            <summary>
            Константа для уровня логгирования Fatal
            </summary>
        </member>
        <member name="M:Libs.Logger.LogLevel.#ctor">
            <summary>
            Конструктор по умолчанию нужен для десериализации
            </summary>
        </member>
        <member name="M:Libs.Logger.LogLevel.Parse(System.String)">
            <summary>
            Преобразование строкового имени уровня логгирования в тип LogLevel
            </summary>
            <param name="value">Cтроковое имя уровня логгирования</param>
            <returns></returns>
        </member>
        <member name="M:Libs.Logger.LogLevel.Parse(System.Int32)">
            <summary>
            Преобразование целочисленного значения уровня логгирования в тип LogLevel
            </summary>
            <param name="value">Число от 0 до 5</param>
            <returns></returns>
        </member>
        <member name="M:Libs.Logger.LogLevel.IsEnabled(Libs.Logger.LogLevel)">
            <summary>
            Определяет активен ли уровень логгирования
            </summary>
            <param name="level">Уровень логгирования активность которого проверяется</param>
            <returns></returns>
        </member>
        <member name="M:Libs.Logger.LogLevel.CompareTo(System.Object)">
            <summary>
            Реализация IComparable
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Libs.Logger.LogLevel.CompareTo(Libs.Logger.LogLevel)">
            <summary>
            Реализация IComparable<LogLevel/>
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Libs.Logger.LogLevel.Equals(Libs.Logger.LogLevel)">
            <summary>
            Реализация IEquatable<LogLevel/>
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Libs.Logger.LogLevel.GetHashCode">
            <summary>
            Переобределние получения хеша
            </summary>
            <returns></returns>
        </member>
        <member name="M:Libs.Logger.LogLevel.op_Equality(Libs.Logger.LogLevel,Libs.Logger.LogLevel)">
            <summary>
            Переопределение ==
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Libs.Logger.LogLevel.op_Inequality(Libs.Logger.LogLevel,Libs.Logger.LogLevel)">
            <summary>
            Переопределение !=
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Libs.Logger.LogLevel.op_GreaterThan(Libs.Logger.LogLevel,Libs.Logger.LogLevel)">
            <summary>
            Переопределение
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Libs.Logger.LogLevel.op_GreaterThanOrEqual(Libs.Logger.LogLevel,Libs.Logger.LogLevel)">
            <summary>
            Переопределение
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Libs.Logger.LogLevel.op_LessThan(Libs.Logger.LogLevel,Libs.Logger.LogLevel)">
            <summary>
            Переопределение
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Libs.Logger.LogLevel.op_LessThanOrEqual(Libs.Logger.LogLevel,Libs.Logger.LogLevel)">
            <summary>
            Переопределение
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Libs.Logger.LogLevel.Equals(System.Object)">
            <summary>
            Переопределение Equals()
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Libs.Logger.LogLevel.ToString">
            <summary>
            Переопределение ToString()
            </summary>
            <returns></returns>
        </member>
        <member name="P:Libs.Logger.LogLevel.FullLog">
            <summary>
            Константа для логирования всего
            </summary>
        </member>
        <member name="P:Libs.Logger.LogLevel.Name">
            <summary>
            Название уровня логирования (TRACE, DEBUG, ..., FATAL)
            </summary>
        </member>
        <member name="P:Libs.Logger.LogLevel.Level">
            <summary>
            Порядковый номер уровня логирования (0, 1, ..., 5)
            </summary>
        </member>
        <member name="P:Libs.Logger.LogLevel.IsTraceEnabled">
            <summary>
            Активен ли уровень логгирования Trace
            </summary>
        </member>
        <member name="P:Libs.Logger.LogLevel.IsDebugEnabled">
            <summary>
            Активен ли уровень логгирования Debug
            </summary>
        </member>
        <member name="P:Libs.Logger.LogLevel.IsInfoEnabled">
            <summary>
            Активен ли уровень логгирования Info
            </summary>
        </member>
        <member name="P:Libs.Logger.LogLevel.IsWarnEnabled">
            <summary>
            Активен ли уровень логгирования Warn
            </summary>
        </member>
        <member name="P:Libs.Logger.LogLevel.IsErrorEnabled">
            <summary>
            Активен ли уровень логгирования Error
            </summary>
        </member>
        <member name="P:Libs.Logger.LogLevel.IsFatalEnabled">
            <summary>
            Активен ли уровень логгирования Fatal
            </summary>
        </member>
        <member name="T:Libs.Logger.Common.Error">
            <summary>
            Класс для хранения и передачи информации об ошибке.
            Мы меньше храним и у нас не возникает проблем с сериализацией/десериализацией
            </summary>
        </member>
        <member name="M:Libs.Logger.Common.Error.#ctor">
            Констуктор по умолчанию нужен для десериализации
        </member>
        <member name="M:Libs.Logger.Common.Error.#ctor(System.String,System.String,System.String,System.String,Libs.Logger.Common.Error)">
            <summary>
            Конструктор для создания внутреннего типа для хранения информации об ошибке
            </summary>
            <param name="type"></param>
            <param name="message"></param>
            <param name="source"></param>
            <param name="stackTrace"></param>
            <param name="innerError"></param>
        </member>
        <member name="M:Libs.Logger.Common.Error.#ctor(System.Exception)">
            <summary>
            Конструктор для создания внутреннего типа для хранения информации об ошибке
            </summary>
            <param name="exception"></param>
        </member>
        <member name="P:Libs.Logger.Common.Error.Type">
            <summary>
            Имя типа исключения
            </summary>
        </member>
        <member name="P:Libs.Logger.Common.Error.Message">
            <summary>
            Сообщение исключения
            </summary>
        </member>
        <member name="P:Libs.Logger.Common.Error.Source">
            <summary>
            Источник исключения
            </summary>
        </member>
        <member name="P:Libs.Logger.Common.Error.StackTrace">
            <summary>
            Стек вызовов
            </summary>
        </member>
        <member name="P:Libs.Logger.Common.Error.InnerError">
            <summary>
            Внутренняя ошибка
            </summary>
        </member>
        <member name="T:Libs.Logger.Common.LoggingEvent">
            <summary>
            Контейнер, хранящий информацию о сообщении, которое хотим залогировать
            </summary>
        </member>
        <member name="M:Libs.Logger.Common.LoggingEvent.#ctor">
            <summary>
            Констуктор для создания логгирующего сообщения (нужен для десериализации)
            </summary>
        </member>
        <member name="M:Libs.Logger.Common.LoggingEvent.#ctor(System.DateTime,System.String,System.Exception,Libs.Logger.LogLevel,System.String,System.Collections.Generic.List{System.String},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Констуктор для создания логгирующего сообщения
            </summary>
            <param name="date">Дата</param>
            <param name="message">Сообщение</param>
            <param name="exception">Исключение</param>
            <param name="level">Уровень логирования</param>
            <param name="context">Контекст</param>
            <param name="stackSources">Источник</param>
            <param name="machineName">Имя машины</param>
            <param name="processName">Имя процесса</param>
            <param name="assembly">Сборка</param>
            <param name="namespace">Пространство имён</param>
            <param name="class">Класс</param>
            <param name="method">Метод</param>
            <param name="filePath">Путь до файла</param>
            <param name="lineNumber">Номер строки</param>
        </member>
        <member name="M:Libs.Logger.Common.LoggingEvent.#ctor(System.String,System.Exception,Libs.Logger.LogLevel,System.String,System.Collections.Generic.List{System.String},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Констуктор для создания логгирующего сообщения
            </summary>
            <param name="message">Сообщение</param>
            <param name="exception">Исключение</param>
            <param name="level">Уровень логирования</param>
            <param name="context">Контекст</param>
            <param name="stackSources">Источник</param>
            <param name="machineName">Имя машины</param>
            <param name="processName">Имя процесса</param>
            <param name="assembly">Сборка</param>
            <param name="namespace">Пространство имён</param>
            <param name="class">Класс</param>
            <param name="method">Метод</param>
            <param name="filePath">Путь до файла</param>
            <param name="lineNumber">Номер строки</param>
        </member>
        <member name="M:Libs.Logger.Common.LoggingEvent.#ctor(System.String,System.Exception,Libs.Logger.LogLevel,System.Collections.Generic.List{System.String},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Констуктор для создания логгирующего сообщения
            </summary>
            <param name="message">Сообщение</param>
            <param name="exception">Исключение</param>
            <param name="level">Уровень логирования</param>
            <param name="stackSources">Источник</param>
            <param name="machineName">Имя машины</param>
            <param name="processName">Имя процесса</param>
            <param name="assembly">Сборка</param>
            <param name="namespace">Пространство имён</param>
            <param name="class">Класс</param>
            <param name="method">Метод</param>
            <param name="filePath">Путь до файла</param>
            <param name="lineNumber">Номер строки</param>
        </member>
        <member name="P:Libs.Logger.Common.LoggingEvent.Date">
            <summary>
            Дата и время создания логирующего сообщения
            </summary>
        </member>
        <member name="P:Libs.Logger.Common.LoggingEvent.Level">
            <summary>
            Уровень логирования
            </summary>
        </member>
        <member name="P:Libs.Logger.Common.LoggingEvent.Context">
            <summary>
            Контекст логируемого сообщения
            для упрощения поиска и отслещивания лога от отдельных подсистем или для определенных процессов
            </summary>
            <summary>
            Пример использования - "id:12,name:NetSystem"
            "id:Arm13,task:24,cam:3"
            </summary>>
        </member>
        <member name="P:Libs.Logger.Common.LoggingEvent.Clazz">
            <summary>
            Полное имя класса которое мы хотим вывести в логе, т.е. Namespace.Class
            Важное замечание: для чтения лога с помощью программы LogReader обязательно должна присутствовать
            и левая и правая часть имени через точку - иначе программа вылетает
            </summary>
        </member>
        <member name="P:Libs.Logger.Common.LoggingEvent.Method">
            <summary>
            Имя метода из которого было вызвано логирование
            </summary>
        </member>
        <member name="P:Libs.Logger.Common.LoggingEvent.FilePath">
            <summary>
            Полное имя файла исходного кода, в котором было вызвано логирование
            </summary>
        </member>
        <member name="P:Libs.Logger.Common.LoggingEvent.LineNumber">
            <summary>
            Номер строки в файле исходного кода, в которой было вызвано логирование
            </summary>
        </member>
        <member name="P:Libs.Logger.Common.LoggingEvent.Message">
            <summary>
            Логируемый текст, сообщение
            </summary>
        </member>
        <member name="P:Libs.Logger.Common.LoggingEvent.Exception">
            <summary>
            Иформация об исключительной информации
            </summary>
        </member>
        <member name="P:Libs.Logger.Common.LoggingEvent.StackSources">
            <summary>
            Список имен модулей в порядке иерархии.
            Внутренний логгеры первый в списке, внешний - последний
            </summary>
        </member>
        <member name="P:Libs.Logger.Common.LoggingEvent.Namespace">
            <summary>
            Пространство имён
            </summary>
        </member>
        <member name="P:Libs.Logger.Common.LoggingEvent.Assembly">
            <summary>
            Название сборки
            </summary>
        </member>
        <member name="P:Libs.Logger.Common.LoggingEvent.MachineName">
            <summary>
            Имя компьютера
            </summary>
        </member>
        <member name="P:Libs.Logger.Common.LoggingEvent.ProcessName">
            <summary>
            Имя процесса
            </summary>
        </member>
        <member name="T:Libs.Logger.Writers.RealWriters.Helpers.FileWriterFilePool">
            <summary>
            Пул открытых файлов для FileWriter
            </summary>
        </member>
        <member name="M:Libs.Logger.Writers.RealWriters.Helpers.FileWriterFilePool.RequestFile(System.String,System.IO.FileStream,System.String)">
            <summary>
            Запросить файл из пула
            </summary>
            <param name="name">Путь до файла</param>
            <param name="releaseName">Имя файла для освобождения</param>
            <param name="streamToRelease">Старый файл для освобождения</param>
            <returns>Новый файл</returns>
        </member>
        <member name="T:Libs.Logger.Writers.AsyncQueueWithReliableSending">
            <summary>
            Обертка позволяющая в случае недоступности основного логгера
            вести запись логов во временное хранилище на диск, 
            от куда логи будут отправлены после восстановления логгером функционирования
            </summary>
        </member>
        <member name="T:Libs.Logger.ILoggingEventWriter">
            <summary>
            Интерфейс для писателя сообщений лога
            </summary>
        </member>
        <member name="M:Libs.Logger.ILoggingEventWriter.SetConverterFactory(Libs.Logger.LoggingEventConverters.ConverterFactory)">
            <summary>
            Устанавливает фабрику для создания конвертеров,
            необходимых для преобразования логируемых данных в строки для вывода в файл или консоль
            </summary>
            <param name="factory"></param>
        </member>
        <member name="M:Libs.Logger.ILoggingEventWriter.Write(Libs.Logger.Common.LoggingEvent)">
            <summary>
            Логирование
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Libs.Logger.Writers.AsyncQueueWithReliableSending.Dispose(System.Boolean)">
            <summary>
            Основной код освобождения ресурсов
            </summary>
            <param name="isUserCall">Вызвано ли освобождение пользователем. False - деструктор</param>
        </member>
        <member name="T:Libs.Logger.Writers.AsyncQueue">
            <summary>
            AsyncQueue. В эту обертку оборачивается ресурс (Writer) если нужна поддержка ассинхронности
            </summary>
        </member>
        <member name="M:Libs.Logger.Writers.AsyncQueue.Dispose(System.Boolean)">
            <summary>
            Основной код освобождения ресурсов
            </summary>
            <param name="isUserCall">Вызвано ли освобождение пользователем. False - деструктор</param>
        </member>
        <member name="T:Libs.Logger.LoggerBase">
            <summary>
            Логгер. Содержит методы для логгирования.
            Log - универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            Trace, Debug, Info, Warn, Error, Fatal - 5 методов логгирования с четко указанным уровнем.
            Выходной лог для записи файл, определяется темплейтом в app.config файле 
            (при сетевом логгировании этот параметр будет содержаться в конфигах самого сервера, принимающего логи).
            Так же в лог можно включать информацию, которая не передается в явном виде: имя метода, имя файла,
            номер строки в вызающем коде.
            Отдельно следует описать поле контекст. Под ним подразумевается строки в формате "id=3, pocessId=4, imageId=5"
            Идея этого поля в том чтобы записывать значения из контекста в отдельный столбец(ы) в БД 
            и делать четкую выборку по интересующим полям
            </summary>
        </member>
        <member name="T:Libs.Logger.ILogger">
            <summary>
            Общий интерфейс логгера
            </summary>
        </member>
        <member name="M:Libs.Logger.ILogger.GetStackSources">
            <summary>
            Возвращает цепочку вложенности программных модулей
            </summary>
            <returns>Список модулей. Первый элемент - внутренний модуль, последний - внешний.</returns>
        </member>
        <member name="M:Libs.Logger.ILogger.Refresh">
            <summary>
            Обновление цепочки вложенности программных модулей (StackSources) 
            </summary>
        </member>
        <member name="P:Libs.Logger.ILogger.Level">
            <summary>
            Возвращает уровень логирования
            </summary>
        </member>
        <member name="P:Libs.Logger.ILogger.AllowStackTraceInfoExtraction">
            <summary>
            Разрешено ли извлекать расширенную информацию об источнике логирования
            </summary>
        </member>
        <member name="M:Libs.Logger.LoggerBase.Log(Libs.Logger.LogLevel,System.String,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="level">Уровень логгирования.</param>
            <param name="message">Сообщение для логгирования.</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.Log(Libs.Logger.LogLevel,System.String,System.String,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="level">Уровень логгирования.</param>
            <param name="message">Сообщение для логгирования.</param>
            <param name="context">Контекст соолбщения. Строки в формате "id=3, pocessId=4, imageId=5"
            Идея этого поля в том чтобы записывать значения из контекста в отдельный столбец(ы) в БД
            и делать четкую выборку по интересующим полям.</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.Log(Libs.Logger.LogLevel,System.Exception,System.String,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="level">Уровень логгирования.</param>
            <param name="message">Сообщение для логгирования.</param>
            <param name="exception">Возникшее исключение.</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.Log(Libs.Logger.LogLevel,System.Exception,System.String,System.String,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="level">Уровень логгирования.</param>
            <param name="message">Сообщение для логгирования.</param>
            <param name="context">Контекст соолбщения. Строки в формате "id=3, pocessId=4, imageId=5"
            Идея этого поля в том чтобы записывать значения из контекста в отдельный столбец(ы) в БД
            и делать четкую выборку по интересующим полям.</param>
            <param name="exception">Возникшее исключение.</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.LogFormat(Libs.Logger.LogLevel,System.String,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="level">Уровень логгирования.</param>
            <param name="template">Шаблон сообщения (как в string.Format)</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.LogFormat(Libs.Logger.LogLevel,System.String,System.Object,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="level">Уровень логгирования.</param>
            <param name="template">Шаблон сообщения (как в string.Format)</param>
            <param name="arg0">Первый аргумент</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.LogFormat(Libs.Logger.LogLevel,System.String,System.Object,System.Object,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="level">Уровень логгирования.</param>
            <param name="template">Шаблон сообщения (как в string.Format)</param>
            <param name="arg0">Первый аргумент</param>
            <param name="arg1">Второй аргумент</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.LogFormat(Libs.Logger.LogLevel,System.String,System.Object,System.Object,System.Object,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="level">Уровень логгирования.</param>
            <param name="template">Шаблон сообщения (как в string.Format)</param>
            <param name="arg0">Первый аргумент</param>
            <param name="arg1">Второй аргумент</param>
            <param name="arg2">Третий аргумент</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.LogFormat(Libs.Logger.LogLevel,System.String,System.Object,System.Object,System.Object,System.Object,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="level">Уровень логгирования.</param>
            <param name="template">Шаблон сообщения (как в string.Format)</param>
            <param name="arg0">Первый аргумент</param>
            <param name="arg1">Второй аргумент</param>
            <param name="arg2">Третий аргумент</param>
            <param name="arg3">Четвертый аргумент</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.LogFormat(Libs.Logger.LogLevel,System.Exception,System.String,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="level">Уровень логгирования.</param>
            <param name="template">Шаблон сообщения (как в string.Format)</param>
            <param name="exception">Возникшее исключение.</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.LogFormat(Libs.Logger.LogLevel,System.Exception,System.String,System.Object,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="level">Уровень логгирования.</param>
            <param name="template">Шаблон сообщения (как в string.Format)</param>
            <param name="exception">Возникшее исключение.</param>
            <param name="arg0">Первый аргумент</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.LogFormat(Libs.Logger.LogLevel,System.Exception,System.String,System.Object,System.Object,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="level">Уровень логгирования.</param>
            <param name="template">Шаблон сообщения (как в string.Format)</param>
            <param name="exception">Возникшее исключение.</param>
            <param name="arg0">Первый аргумент</param>
            <param name="arg1">Второй аргумент</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.LogFormat(Libs.Logger.LogLevel,System.Exception,System.String,System.Object,System.Object,System.Object,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="level">Уровень логгирования.</param>
            <param name="template">Шаблон сообщения (как в string.Format)</param>
            <param name="exception">Возникшее исключение.</param>
            <param name="arg0">Первый аргумент</param>
            <param name="arg1">Второй аргумент</param>
            <param name="arg2">Третий аргумент</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.LogFormat(Libs.Logger.LogLevel,System.Exception,System.String,System.Object,System.Object,System.Object,System.Object,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="level">Уровень логгирования.</param>
            <param name="template">Шаблон сообщения (как в string.Format)</param>
            <param name="exception">Возникшее исключение.</param>
            <param name="arg0">Первый аргумент</param>
            <param name="arg1">Второй аргумент</param>
            <param name="arg2">Третий аргумент</param>
            <param name="arg3">Четвертый аргумент</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.Trace(System.String,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="message">Сообщение для логгирования.</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.Trace(System.String,System.String,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="message">Сообщение для логгирования.</param>
            <param name="context">Контекст соолбщения. Строки в формате "id=3, pocessId=4, imageId=5"
            Идея этого поля в том чтобы записывать значения из контекста в отдельный столбец(ы) в БД
            и делать четкую выборку по интересующим полям.</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.Trace(System.Exception,System.String,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="message">Сообщение для логгирования.</param>
            <param name="exception">Возникшее исключение.</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.Trace(System.Exception,System.String,System.String,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="message">Сообщение для логгирования.</param>
            <param name="context">Контекст соолбщения. Строки в формате "id=3, pocessId=4, imageId=5"
            Идея этого поля в том чтобы записывать значения из контекста в отдельный столбец(ы) в БД
            и делать четкую выборку по интересующим полям.</param>
            <param name="exception">Возникшее исключение.</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.TraceFormat(System.String,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="template">Шаблон сообщения (как в string.Format)</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.TraceFormat(System.String,System.Object,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="template">Шаблон сообщения (как в string.Format)</param>
            <param name="arg0">Первый аргумент</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.TraceFormat(System.String,System.Object,System.Object,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="template">Шаблон сообщения (как в string.Format)</param>
            <param name="arg0">Первый аргумент</param>
            <param name="arg1">Второй аргумент</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.TraceFormat(System.String,System.Object,System.Object,System.Object,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="template">Шаблон сообщения (как в string.Format)</param>
            <param name="arg0">Первый аргумент</param>
            <param name="arg1">Второй аргумент</param>
            <param name="arg2">Третий аргумент</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.TraceFormat(System.String,System.Object,System.Object,System.Object,System.Object,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="template">Шаблон сообщения (как в string.Format)</param>
            <param name="arg0">Первый аргумент</param>
            <param name="arg1">Второй аргумент</param>
            <param name="arg2">Третий аргумент</param>
            <param name="arg3">Четвертый аргумент</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.TraceFormat(System.Exception,System.String,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="template">Шаблон сообщения (как в string.Format)</param>
            <param name="exception">Возникшее исключение.</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.TraceFormat(System.Exception,System.String,System.Object,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="template">Шаблон сообщения (как в string.Format)</param>
            <param name="exception">Возникшее исключение.</param>
            <param name="arg0">Первый аргумент</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.TraceFormat(System.Exception,System.String,System.Object,System.Object,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="template">Шаблон сообщения (как в string.Format)</param>
            <param name="exception">Возникшее исключение.</param>
            <param name="arg0">Первый аргумент</param>
            <param name="arg1">Второй аргумент</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.TraceFormat(System.Exception,System.String,System.Object,System.Object,System.Object,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="template">Шаблон сообщения (как в string.Format)</param>
            <param name="exception">Возникшее исключение.</param>
            <param name="arg0">Первый аргумент</param>
            <param name="arg1">Второй аргумент</param>
            <param name="arg2">Третий аргумент</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.TraceFormat(System.Exception,System.String,System.Object,System.Object,System.Object,System.Object,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="template">Шаблон сообщения (как в string.Format)</param>
            <param name="exception">Возникшее исключение.</param>
            <param name="arg0">Первый аргумент</param>
            <param name="arg1">Второй аргумент</param>
            <param name="arg2">Третий аргумент</param>
            <param name="arg3">Четвертый аргумент</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.Debug(System.String,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="message">Сообщение для логгирования.</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.Debug(System.String,System.String,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="message">Сообщение для логгирования.</param>
            <param name="context">Контекст соолбщения. Строки в формате "id=3, pocessId=4, imageId=5"
            Идея этого поля в том чтобы записывать значения из контекста в отдельный столбец(ы) в БД
            и делать четкую выборку по интересующим полям.</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.Debug(System.Exception,System.String,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="message">Сообщение для логгирования.</param>
            <param name="exception">Возникшее исключение.</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.Debug(System.Exception,System.String,System.String,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="message">Сообщение для логгирования.</param>
            <param name="context">Контекст соолбщения. Строки в формате "id=3, pocessId=4, imageId=5"
            Идея этого поля в том чтобы записывать значения из контекста в отдельный столбец(ы) в БД
            и делать четкую выборку по интересующим полям.</param>
            <param name="exception">Возникшее исключение.</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.DebugFormat(System.String,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="template">Шаблон сообщения (как в string.Format)</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.DebugFormat(System.String,System.Object,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="template">Шаблон сообщения (как в string.Format)</param>
            <param name="arg0">Первый аргумент</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.DebugFormat(System.String,System.Object,System.Object,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="template">Шаблон сообщения (как в string.Format)</param>
            <param name="arg0">Первый аргумент</param>
            <param name="arg1">Второй аргумент</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.DebugFormat(System.String,System.Object,System.Object,System.Object,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="template">Шаблон сообщения (как в string.Format)</param>
            <param name="arg0">Первый аргумент</param>
            <param name="arg1">Второй аргумент</param>
            <param name="arg2">Третий аргумент</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.DebugFormat(System.String,System.Object,System.Object,System.Object,System.Object,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="template">Шаблон сообщения (как в string.Format)</param>
            <param name="arg0">Первый аргумент</param>
            <param name="arg1">Второй аргумент</param>
            <param name="arg2">Третий аргумент</param>
            <param name="arg3">Четвертый аргумент</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.DebugFormat(System.Exception,System.String,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="template">Шаблон сообщения (как в string.Format)</param>
            <param name="exception">Возникшее исключение.</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.DebugFormat(System.Exception,System.String,System.Object,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="template">Шаблон сообщения (как в string.Format)</param>
            <param name="exception">Возникшее исключение.</param>
            <param name="arg0">Первый аргумент</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.DebugFormat(System.Exception,System.String,System.Object,System.Object,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="template">Шаблон сообщения (как в string.Format)</param>
            <param name="exception">Возникшее исключение.</param>
            <param name="arg0">Первый аргумент</param>
            <param name="arg1">Второй аргумент</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.DebugFormat(System.Exception,System.String,System.Object,System.Object,System.Object,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="template">Шаблон сообщения (как в string.Format)</param>
            <param name="exception">Возникшее исключение.</param>
            <param name="arg0">Первый аргумент</param>
            <param name="arg1">Второй аргумент</param>
            <param name="arg2">Третий аргумент</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.DebugFormat(System.Exception,System.String,System.Object,System.Object,System.Object,System.Object,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="template">Шаблон сообщения (как в string.Format)</param>
            <param name="exception">Возникшее исключение.</param>
            <param name="arg0">Первый аргумент</param>
            <param name="arg1">Второй аргумент</param>
            <param name="arg2">Третий аргумент</param>
            <param name="arg3">Четвертый аргумент</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.Info(System.String,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="message">Сообщение для логгирования.</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.Info(System.String,System.String,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="message">Сообщение для логгирования.</param>
            <param name="context">Контекст соолбщения. Строки в формате "id=3, pocessId=4, imageId=5"
            Идея этого поля в том чтобы записывать значения из контекста в отдельный столбец(ы) в БД
            и делать четкую выборку по интересующим полям.</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.Info(System.Exception,System.String,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="message">Сообщение для логгирования.</param>
            <param name="exception">Возникшее исключение.</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.Info(System.Exception,System.String,System.String,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="message">Сообщение для логгирования.</param>
            <param name="context">Контекст соолбщения. Строки в формате "id=3, pocessId=4, imageId=5"
            Идея этого поля в том чтобы записывать значения из контекста в отдельный столбец(ы) в БД
            и делать четкую выборку по интересующим полям.</param>
            <param name="exception">Возникшее исключение.</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.InfoFormat(System.String,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="template">Шаблон сообщения (как в string.Format)</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.InfoFormat(System.String,System.Object,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="template">Шаблон сообщения (как в string.Format)</param>
            <param name="arg0">Первый аргумент</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.InfoFormat(System.String,System.Object,System.Object,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="template">Шаблон сообщения (как в string.Format)</param>
            <param name="arg0">Первый аргумент</param>
            <param name="arg1">Второй аргумент</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.InfoFormat(System.String,System.Object,System.Object,System.Object,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="template">Шаблон сообщения (как в string.Format)</param>
            <param name="arg0">Первый аргумент</param>
            <param name="arg1">Второй аргумент</param>
            <param name="arg2">Третий аргумент</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.InfoFormat(System.String,System.Object,System.Object,System.Object,System.Object,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="template">Шаблон сообщения (как в string.Format)</param>
            <param name="arg0">Первый аргумент</param>
            <param name="arg1">Второй аргумент</param>
            <param name="arg2">Третий аргумент</param>
            <param name="arg3">Четвертый аргумент</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.InfoFormat(System.Exception,System.String,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="template">Шаблон сообщения (как в string.Format)</param>
            <param name="exception">Возникшее исключение.</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.InfoFormat(System.Exception,System.String,System.Object,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="template">Шаблон сообщения (как в string.Format)</param>
            <param name="exception">Возникшее исключение.</param>
            <param name="arg0">Первый аргумент</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.InfoFormat(System.Exception,System.String,System.Object,System.Object,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="template">Шаблон сообщения (как в string.Format)</param>
            <param name="exception">Возникшее исключение.</param>
            <param name="arg0">Первый аргумент</param>
            <param name="arg1">Второй аргумент</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.InfoFormat(System.Exception,System.String,System.Object,System.Object,System.Object,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="template">Шаблон сообщения (как в string.Format)</param>
            <param name="exception">Возникшее исключение.</param>
            <param name="arg0">Первый аргумент</param>
            <param name="arg1">Второй аргумент</param>
            <param name="arg2">Третий аргумент</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.InfoFormat(System.Exception,System.String,System.Object,System.Object,System.Object,System.Object,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="template">Шаблон сообщения (как в string.Format)</param>
            <param name="exception">Возникшее исключение.</param>
            <param name="arg0">Первый аргумент</param>
            <param name="arg1">Второй аргумент</param>
            <param name="arg2">Третий аргумент</param>
            <param name="arg3">Четвертый аргумент</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.Warn(System.String,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="message">Сообщение для логгирования.</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.Warn(System.String,System.String,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="message">Сообщение для логгирования.</param>
            <param name="context">Контекст соолбщения. Строки в формате "id=3, pocessId=4, imageId=5"
            Идея этого поля в том чтобы записывать значения из контекста в отдельный столбец(ы) в БД
            и делать четкую выборку по интересующим полям.</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.Warn(System.Exception,System.String,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="message">Сообщение для логгирования.</param>
            <param name="exception">Возникшее исключение.</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.Warn(System.Exception,System.String,System.String,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="message">Сообщение для логгирования.</param>
            <param name="context">Контекст соолбщения. Строки в формате "id=3, pocessId=4, imageId=5"
            Идея этого поля в том чтобы записывать значения из контекста в отдельный столбец(ы) в БД
            и делать четкую выборку по интересующим полям.</param>
            <param name="exception">Возникшее исключение.</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.WarnFormat(System.String,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="template">Шаблон сообщения (как в string.Format)</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.WarnFormat(System.String,System.Object,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="template">Шаблон сообщения (как в string.Format)</param>
            <param name="arg0">Первый аргумент</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.WarnFormat(System.String,System.Object,System.Object,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="template">Шаблон сообщения (как в string.Format)</param>
            <param name="arg0">Первый аргумент</param>
            <param name="arg1">Второй аргумент</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.WarnFormat(System.String,System.Object,System.Object,System.Object,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="template">Шаблон сообщения (как в string.Format)</param>
            <param name="arg0">Первый аргумент</param>
            <param name="arg1">Второй аргумент</param>
            <param name="arg2">Третий аргумент</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.WarnFormat(System.String,System.Object,System.Object,System.Object,System.Object,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="template">Шаблон сообщения (как в string.Format)</param>
            <param name="arg0">Первый аргумент</param>
            <param name="arg1">Второй аргумент</param>
            <param name="arg2">Третий аргумент</param>
            <param name="arg3">Четвертый аргумент</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.WarnFormat(System.Exception,System.String,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="template">Шаблон сообщения (как в string.Format)</param>
            <param name="exception">Возникшее исключение.</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.WarnFormat(System.Exception,System.String,System.Object,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="template">Шаблон сообщения (как в string.Format)</param>
            <param name="exception">Возникшее исключение.</param>
            <param name="arg0">Первый аргумент</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.WarnFormat(System.Exception,System.String,System.Object,System.Object,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="template">Шаблон сообщения (как в string.Format)</param>
            <param name="exception">Возникшее исключение.</param>
            <param name="arg0">Первый аргумент</param>
            <param name="arg1">Второй аргумент</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.WarnFormat(System.Exception,System.String,System.Object,System.Object,System.Object,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="template">Шаблон сообщения (как в string.Format)</param>
            <param name="exception">Возникшее исключение.</param>
            <param name="arg0">Первый аргумент</param>
            <param name="arg1">Второй аргумент</param>
            <param name="arg2">Третий аргумент</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.WarnFormat(System.Exception,System.String,System.Object,System.Object,System.Object,System.Object,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="template">Шаблон сообщения (как в string.Format)</param>
            <param name="exception">Возникшее исключение.</param>
            <param name="arg0">Первый аргумент</param>
            <param name="arg1">Второй аргумент</param>
            <param name="arg2">Третий аргумент</param>
            <param name="arg3">Четвертый аргумент</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.Error(System.String,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="message">Сообщение для логгирования.</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.Error(System.String,System.String,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="message">Сообщение для логгирования.</param>
            <param name="context">Контекст соолбщения. Строки в формате "id=3, pocessId=4, imageId=5"
            Идея этого поля в том чтобы записывать значения из контекста в отдельный столбец(ы) в БД
            и делать четкую выборку по интересующим полям.</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.Error(System.Exception,System.String,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="message">Сообщение для логгирования.</param>
            <param name="exception">Возникшее исключение.</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.Error(System.Exception,System.String,System.String,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="message">Сообщение для логгирования.</param>
            <param name="context">Контекст соолбщения. Строки в формате "id=3, pocessId=4, imageId=5"
            Идея этого поля в том чтобы записывать значения из контекста в отдельный столбец(ы) в БД
            и делать четкую выборку по интересующим полям.</param>
            <param name="exception">Возникшее исключение.</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.ErrorFormat(System.String,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="template">Шаблон сообщения (как в string.Format)</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.ErrorFormat(System.String,System.Object,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="template">Шаблон сообщения (как в string.Format)</param>
            <param name="arg0">Первый аргумент</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.ErrorFormat(System.String,System.Object,System.Object,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="template">Шаблон сообщения (как в string.Format)</param>
            <param name="arg0">Первый аргумент</param>
            <param name="arg1">Второй аргумент</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.ErrorFormat(System.String,System.Object,System.Object,System.Object,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="template">Шаблон сообщения (как в string.Format)</param>
            <param name="arg0">Первый аргумент</param>
            <param name="arg1">Второй аргумент</param>
            <param name="arg2">Третий аргумент</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.ErrorFormat(System.String,System.Object,System.Object,System.Object,System.Object,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="template">Шаблон сообщения (как в string.Format)</param>
            <param name="arg0">Первый аргумент</param>
            <param name="arg1">Второй аргумент</param>
            <param name="arg2">Третий аргумент</param>
            <param name="arg3">Четвертый аргумент</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.ErrorFormat(System.Exception,System.String,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="template">Шаблон сообщения (как в string.Format)</param>
            <param name="exception">Возникшее исключение.</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.ErrorFormat(System.Exception,System.String,System.Object,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="template">Шаблон сообщения (как в string.Format)</param>
            <param name="exception">Возникшее исключение.</param>
            <param name="arg0">Первый аргумент</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.ErrorFormat(System.Exception,System.String,System.Object,System.Object,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="template">Шаблон сообщения (как в string.Format)</param>
            <param name="exception">Возникшее исключение.</param>
            <param name="arg0">Первый аргумент</param>
            <param name="arg1">Второй аргумент</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.ErrorFormat(System.Exception,System.String,System.Object,System.Object,System.Object,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="template">Шаблон сообщения (как в string.Format)</param>
            <param name="exception">Возникшее исключение.</param>
            <param name="arg0">Первый аргумент</param>
            <param name="arg1">Второй аргумент</param>
            <param name="arg2">Третий аргумент</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.ErrorFormat(System.Exception,System.String,System.Object,System.Object,System.Object,System.Object,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="template">Шаблон сообщения (как в string.Format)</param>
            <param name="exception">Возникшее исключение.</param>
            <param name="arg0">Первый аргумент</param>
            <param name="arg1">Второй аргумент</param>
            <param name="arg2">Третий аргумент</param>
            <param name="arg3">Четвертый аргумент</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.Fatal(System.String,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="message">Сообщение для логгирования.</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.Fatal(System.String,System.String,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="message">Сообщение для логгирования.</param>
            <param name="context">Контекст соолбщения. Строки в формате "id=3, pocessId=4, imageId=5"
            Идея этого поля в том чтобы записывать значения из контекста в отдельный столбец(ы) в БД
            и делать четкую выборку по интересующим полям.</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.Fatal(System.Exception,System.String,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="message">Сообщение для логгирования.</param>
            <param name="exception">Возникшее исключение.</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.Fatal(System.Exception,System.String,System.String,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="message">Сообщение для логгирования.</param>
            <param name="context">Контекст соолбщения. Строки в формате "id=3, pocessId=4, imageId=5"
            Идея этого поля в том чтобы записывать значения из контекста в отдельный столбец(ы) в БД
            и делать четкую выборку по интересующим полям.</param>
            <param name="exception">Возникшее исключение.</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.FatalFormat(System.String,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="template">Шаблон сообщения (как в string.Format)</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.FatalFormat(System.String,System.Object,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="template">Шаблон сообщения (как в string.Format)</param>
            <param name="arg0">Первый аргумент</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.FatalFormat(System.String,System.Object,System.Object,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="template">Шаблон сообщения (как в string.Format)</param>
            <param name="arg0">Первый аргумент</param>
            <param name="arg1">Второй аргумент</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.FatalFormat(System.String,System.Object,System.Object,System.Object,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="template">Шаблон сообщения (как в string.Format)</param>
            <param name="arg0">Первый аргумент</param>
            <param name="arg1">Второй аргумент</param>
            <param name="arg2">Третий аргумент</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.FatalFormat(System.String,System.Object,System.Object,System.Object,System.Object,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="template">Шаблон сообщения (как в string.Format)</param>
            <param name="arg0">Первый аргумент</param>
            <param name="arg1">Второй аргумент</param>
            <param name="arg2">Третий аргумент</param>
            <param name="arg3">Четвертый аргумент</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.FatalFormat(System.Exception,System.String,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="template">Шаблон сообщения (как в string.Format)</param>
            <param name="exception">Возникшее исключение.</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.FatalFormat(System.Exception,System.String,System.Object,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="template">Шаблон сообщения (как в string.Format)</param>
            <param name="exception">Возникшее исключение.</param>
            <param name="arg0">Первый аргумент</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.FatalFormat(System.Exception,System.String,System.Object,System.Object,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="template">Шаблон сообщения (как в string.Format)</param>
            <param name="exception">Возникшее исключение.</param>
            <param name="arg0">Первый аргумент</param>
            <param name="arg1">Второй аргумент</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.FatalFormat(System.Exception,System.String,System.Object,System.Object,System.Object,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="template">Шаблон сообщения (как в string.Format)</param>
            <param name="exception">Возникшее исключение.</param>
            <param name="arg0">Первый аргумент</param>
            <param name="arg1">Второй аргумент</param>
            <param name="arg2">Третий аргумент</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.FatalFormat(System.Exception,System.String,System.Object,System.Object,System.Object,System.Object,Libs.Logger.Common.ParameterGuardClass,System.String,System.String,System.String,System.Int32)">
            <summary>
            Универсальный метод логгирования в который помимо прочих аргументов передается уровень логгирования.
            </summary>
            <param name="template">Шаблон сообщения (как в string.Format)</param>
            <param name="exception">Возникшее исключение.</param>
            <param name="arg0">Первый аргумент</param>
            <param name="arg1">Второй аргумент</param>
            <param name="arg2">Третий аргумент</param>
            <param name="arg3">Четвертый аргумент</param>
            <param name="guard">Защитный параметр</param>
            <param name="class">Имя класса из которого происходит логгирование.</param>
            <param name="lineNumber">Автоподставляемый параметр! Номер строки в файле исходного кода,
            на которой произошел вызов метода логгирования.</param>
            <param name="filePath">Автоподставляемый параметр! Имя файла исходного кода,
            из которого произошел вызов метода логгирования.</param>
            <param name="method">Автоподставляемый параметр! Имя метода,
            из которого произошел вызов метода логгирования.</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.#ctor(Libs.Logger.Configuration.LoggerConfiguration,System.String,Libs.Logger.ILoggingEventWriter)">
            <summary>
            Создание логгера
            </summary>
            <param name="configuration">Конфигурация логгера</param>
            <param name="moduleName">Имя модуля (подсистемы)</param>
            <param name="innerLogger">Внутренний логгер</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.#ctor(Libs.Logger.Configuration.LoggerConfiguration,System.String)">
            <summary>
            Создание логгера
            </summary>
            <param name="configuration">Конфигурация логгера</param>
            <param name="moduleName">Имя модуля (подсистемы)</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.#ctor(Libs.Logger.LogLevel,System.String,System.Type,Libs.Logger.ILoggingEventWriter,System.Boolean,System.Boolean)">
            <summary>
            Создание логгера
            </summary>
            <param name="logLevel">Уровень логирования</param>
            <param name="moduleName">Имя модуля (подсистемы)</param>
            <param name="typeInfo">Тип, к которому привзяан логгер</param>
            <param name="innerLogger">Внутренний логгер</param>
            <param name="enableStackTraceExtraction">Разрешено ли получать данные из StackTrace</param>
            <param name="isEnabled">Включён ли логгер</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.#ctor(Libs.Logger.LogLevel,System.String,Libs.Logger.ILoggingEventWriter,System.Boolean,System.Boolean)">
            <summary>
            Создание логгера
            </summary>
            <param name="logLevel">Уровень логирования</param>
            <param name="moduleName">Имя модуля (подсистемы)</param>
            <param name="innerLogger">Внутренний логгер</param>
            <param name="enableStackTraceExtraction">Разрешено ли получать данные из StackTrace</param>
            <param name="isEnabled">Включён ли логгер</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.ExtractCallerInfoFromStackTrace(System.String@,System.String@,System.String@,System.String@,System.String@,System.Int32@)">
            <summary>
            Извлечение информации об источнике логирования по стек трейсу
            </summary>
            <param name="assembly">Сборка</param>
            <param name="namespace">Пространство имён</param>
            <param name="class">Класс</param>
            <param name="method">Метод</param>
            <param name="filePath">Файл</param>
            <param name="lineNumber">Строка</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.ExtractCallerInfoFromStackTrace(System.String@,System.String@,System.String@,System.String@)">
            <summary>
            Извлечение информации об источнике логирования по стек трейсу
            </summary>
            <param name="assembly">Сборка</param>
            <param name="namespace">Пространство имён</param>
            <param name="class">Класс</param>
            <param name="method">Метод</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.ExtractCallerInfo(System.String@,System.String@,System.String@,System.String@,System.String@,System.Int32@)">
            <summary>
            Извлечение информации о точке вызова
            </summary>
            <param name="assembly">Сборка</param>
            <param name="namespace">Пространство имён</param>
            <param name="class">Класс</param>
            <param name="method">Метод</param>
            <param name="filePath">Путь до файла</param>
            <param name="lineNumber">Строка</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.IsEnabled(Libs.Logger.LogLevel)">
            <summary>
            Включен ли специфичный уровень логирования.
            </summary>
            <param name="level">Проверяемый уровень логирования.</param>
            <returns>Значение <see langword="true" /> если логирование включено для данного уровня, иначе возвращается <see langword="false" />.</returns>
        </member>
        <member name="M:Libs.Logger.LoggerBase.OnRefreshStackSource(System.Collections.Generic.List{System.String})">
            <summary>
            Вызывается при обновлении цепочки логгеров
            </summary>
            <param name="stackSource">Текущая цепочка (может быть изменена)</param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.Refresh">
            <summary>
            Обновление цепочки вложенности программных модулей (StackSources) 
            </summary>
        </member>
        <member name="M:Libs.Logger.LoggerBase.Libs#Logger#ILogger#GetStackSources">
            <summary>
            Возвращает цепочку вложенности программных модулей
            </summary>
            <returns>Список модулей. Первый элемент - внутренний модуль, последний - внешний.</returns>
        </member>
        <member name="M:Libs.Logger.LoggerBase.SetConverterFactory(Libs.Logger.LoggingEventConverters.ConverterFactory)">
            <summary>
            Устанавливает фабрику для создания конвертеров,
            необходимых для преобразования логируемых данных в строки для вывода в файл или консоль
            </summary>
            <param name="factory"></param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.Dispose(System.Boolean)">
            <summary>
            Реализация настраиваемого освобождения ресурсов
            </summary>
            <param name="isUserCall"></param>
        </member>
        <member name="M:Libs.Logger.LoggerBase.Close(System.String)">
            <summary>
            Метод закрыть должен применятся один раз и при закрытии программы (если хотите чтобы она закрылась
            с вашим сообщением, а не с логом об экстренном закрытии программы)
            не стоит удивляться что при закрытии логгера в одном потоке, он отвалится в другом 
            (например, если они пишут в один файл - то на самом деле это один и тот же логгер)
            </summary>
        </member>
        <member name="M:Libs.Logger.LoggerBase.Dispose">
            <summary>
            Метод закрыть должен применятся один раз и при закрытии программы (если хотите чтобы она закрылась
            сообщением о корректном завершении, а не с логом об экстренном закрытии программы)
            не стоит удивляться что при закрытии логгера в одном потоке, он отвалится в другом 
            (например, если они пишут в один файл - то на самом деле это один и тот же логгер)
            </summary>
        </member>
        <member name="P:Libs.Logger.LoggerBase.AllowStackTraceInfoExtraction">
            <summary>
            Разрешено ли извлекать расширенную информацию об источнике логирования
            </summary>
        </member>
        <member name="P:Libs.Logger.LoggerBase.IsLoggerEnabled">
            <summary>
            Включён ли сам логгер
            </summary>
        </member>
        <member name="P:Libs.Logger.LoggerBase.IsTraceEnabled">
            <summary>
            Включен ли уровень <c>Trace</c> логирования.
            </summary>
            <returns>Значение <see langword="true" /> если логирование включено для <c>Trace</c> уровня, иначе возвращается <see langword="false" />.</returns>
        </member>
        <member name="P:Libs.Logger.LoggerBase.IsDebugEnabled">
            <summary>
            Включен ли уровень <c>Debug</c> логирования.
            </summary>
            <returns>Значение <see langword="true" /> если логирование включено для <c>Debug</c> уровня, иначе возвращается <see langword="false" />.</returns>
        </member>
        <member name="P:Libs.Logger.LoggerBase.IsInfoEnabled">
            <summary>
            Включен ли уровень <c>Info</c> логирования.
            </summary>
            <returns>Значение <see langword="true" /> если логирование включено для <c>Info</c> уровня, иначе возвращается <see langword="false" />.</returns>
        </member>
        <member name="P:Libs.Logger.LoggerBase.IsWarnEnabled">
            <summary>
            Включен ли уровень <c>Warn</c> логирования.
            </summary>
            <returns>Значение <see langword="true" /> если логирование включено для <c>Warn</c> уровня, иначе возвращается <see langword="false" />.</returns>
        </member>
        <member name="P:Libs.Logger.LoggerBase.IsErrorEnabled">
            <summary>
            Включен ли уровень <c>Error</c> логирования.
            </summary>
            <returns>Значение <see langword="true" /> если логирование включено для <c>Error</c> уровня, иначе возвращается <see langword="false" />.</returns>
        </member>
        <member name="P:Libs.Logger.LoggerBase.IsFatalEnabled">
            <summary>
            Включен ли уровень <c>Fatal</c> логирования.
            </summary>
            <returns>Значение <see langword="true" /> если логирование включено для <c>Fatal</c> уровня, иначе возвращается <see langword="false" />.</returns>
        </member>
        <member name="P:Libs.Logger.LoggerBase.ModuleName">
            <summary>
            Имя модуля, к которому привзяан логгер
            </summary>
        </member>
        <member name="P:Libs.Logger.LoggerBase.TypeInfo">
            <summary>
            Тип, к которому привязан логгер
            </summary>
        </member>
        <member name="P:Libs.Logger.LoggerBase.Level">
            <summary>
            Возвращает уровень логирования
            </summary>
        </member>
        <member name="M:Libs.Logger.Configuration.LoggerConfigurationV2.AppConfigLoader.LoadSection(System.String)">
            <summary>
            Возвращает конфигурацию логгера из конфигурационного файла
            </summary>
            <param name="sectionName">Имя конфигурационной секции в AppConfig </param>
            <returns>Логгер</returns>
        </member>
        <member name="M:Libs.Logger.Configuration.LoggerConfigurationV2.AppConfigLoader.LoadSection(System.String,System.String)">
            <summary>
            Возвращает конфигурацию логгера из конфигурационного файла
            </summary>
            <param name="sectionGroup">Имя группы секций в AppConfig </param>
            <param name="sectionName">Имя конфигурационной секции в AppConfig </param>
            <returns>Логгер</returns>
        </member>
        <member name="M:Libs.Logger.Configuration.LoggerConfigurationV2.AppConfigLoader.GetConfiguration(System.String)">
            <summary>
            Возвращает конфигурацию логгера из конфигурационного файла
            </summary>
            <param name="sectionName">Имя конфигурационной секции в AppConfig </param>
            <returns>Логгер</returns>
        </member>
        <member name="T:Libs.Logger.Configuration.LoggerConfigurationV2.ConfigurationFormatConverter">
            <summary>
            Преобразователь форматов конфигураций
            </summary>
        </member>
        <member name="T:Libs.Logger.Configuration.Configurator">
            <summary>
            Загрузка конфигурации логгера
            </summary>
        </member>
        <member name="M:Libs.Logger.Configuration.Configurator.LoadConfiguration(System.String)">
            <summary>
            Функция для загрузки конфигурации логгера
            </summary>
        </member>
        <member name="M:Libs.Logger.Configuration.Configurator.LoadConfiguration(System.String,System.String)">
            <summary>
            Функция для загрузки конфигурации логгера
            </summary>
        </member>
        <member name="T:Libs.Logger.LoggerFactory">
            <summary>
            Фабрика, с помощью которой можно создать полноценный логгер или внутренний логгер (writer)
            </summary>
        </member>
        <member name="M:Libs.Logger.LoggerFactory.CreateLoggerFromAppConfig(System.String,System.String)">
            <summary>
            Создаёт уже обернутый логгер для модуля с именем moduleName (уже готовый для логирования)
            </summary>
            <param name="moduleName">Имя модуля</param>
            <param name="sectionName">Имя конфигурационной секции в AppConfig </param>
            <returns>Логгер</returns>
        </member>
        <member name="M:Libs.Logger.LoggerFactory.CreateLoggerFromAppConfig(System.String,System.String,System.String)">
            <summary>
            Создаёт уже обернутый логгер для модуля с именем moduleName (уже готовый для логирования)
            </summary>
            <param name="moduleName">Имя модуля</param>
            <param name="sectionGroupName">Имя группы секций</param>
            <param name="sectionName">Имя конфигурационной секции в AppConfig </param>
            <returns>Логгер</returns>
        </member>
        <member name="M:Libs.Logger.LoggerFactory.CreateLogger(System.String,Libs.Logger.Configuration.LoggerConfiguration)">
            <summary>
            Создаёт уже обернутый логгер для модуля с именем moduleName (уже готовый для логирования)
            </summary>
            <param name="configuration">Конфигурация логгера</param>
            <param name="moduleName">Имя модуля </param>
            <returns>Логгер</returns>
        </member>
        <member name="M:Libs.Logger.LoggerFactory.CreateWriter(Libs.Logger.Configuration.LogWriterWrapperConfiguration)">
            <summary>
            Создает определенный Writer
            </summary>
            <param name="config">Конфигурация логгера</param>
        </member>
        <member name="T:Libs.Logger.Common.ParameterGuardClass">
            <summary>
            Класс для экранирования вспомогательных параметров при логировании
            </summary>
        </member>
        <member name="T:Libs.Logger.Writers.Wrappers.Helpers.QueueAsyncProcessing.QueueAsyncProcessorException">
            <summary>
            Исключение при обработке элемента в QueueAsyncProcessor
            </summary>
        </member>
        <member name="M:Libs.Logger.Writers.Wrappers.Helpers.QueueAsyncProcessing.QueueAsyncProcessorException.#ctor">
            <summary>
            Конструктор QueueAsyncProcessorException без параметров
            </summary>
        </member>
        <member name="M:Libs.Logger.Writers.Wrappers.Helpers.QueueAsyncProcessing.QueueAsyncProcessorException.#ctor(System.String)">
            <summary>
            Конструктор QueueAsyncProcessorException с сообщением об ошибке
            </summary>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Libs.Logger.Writers.Wrappers.Helpers.QueueAsyncProcessing.QueueAsyncProcessorException.#ctor(System.String,System.Exception)">
            <summary>
            Конструктор QueueAsyncProcessorException с сообщением об ошибке и внутренним исключением
            </summary>
            <param name="message">Сообщение об ошибке</param>
            <param name="innerExc">Внутреннее исключение</param>
        </member>
        <member name="T:Libs.Logger.LoggingEventConverters.TemplateParser">
            <summary>
            Ключи для указания вида формата выводимой строки
            Все ключи указываются в фигурных скобках например: {Level}
            </summary>
            <summary>
            В ручную настраивомый вывод даты и времени
            Пример "{DateTime:yyyy-MM-dd hh:mm:ss}"
            Date.ToString(string format) - соответственно нужные ключи смотрим на MSDN
            выбор  громаден, 
            Пример использования самих ключей (с MSDN):
            This example displays the following output to the console:
             d: 6/15/2008
             D: Sunday, June 15, 2008
             f: Sunday, June 15, 2008 9:15 PM
             F: Sunday, June 15, 2008 9:15:07 PM
             g: 6/15/2008 9:15 PM
             G: 6/15/2008 9:15:07 PM
             m: June 15
             o: 2008-06-15T21:15:07.0000000
             R: Sun, 15 Jun 2008 21:15:07 GMT
             s: 2008-06-15T21:15:07
             t: 9:15 PM
             T: 9:15:07 PM
             u: 2008-06-15 21:15:07Z
             U: Monday, June 16, 2008 4:15:07 AM
             y: June, 2008
             
             'h:mm:ss.ff t': 9:15:07.00 P
             'd MMM yyyy': 15 Jun 2008
             'HH:mm:ss.f': 21:15:07.0
             'dd MMM HH:mm:ss': 15 Jun 21:15:07
             '\Mon\t\h\: M': Month: 6
             'HH:mm:ss.ffffzzz': 21:15:07.0000-07:00
            </summary>
            <summary>
            LEVEL, Level, level - вывод текущего уровня логирования
            </summary>
            <summary>
            STACKSOURCE, StackSource, stacksource - вывод цепочки имен модулей от которых происходит логирование
            Пример вывода - NetworkSystem.ReceptionModule
            </summary>
            <summary>
            CLASS, Class, class - вывод полного имени класса в котором вызывается мотод логирования
            </summary>
            <summary>
            METHOD, Method, method - вывод имени метода в котором вызывается мотод логирования
            </summary>
            <summary>
            MESSAGE, Message, message - вывод логирующего сообщения
            </summary>
            <summary>
            EXCEPTION, Exception, exception - вывод логирующего сообщения
            </summary>
            <summary>
            NAMESPACE, Namespace, namespace - вывод сообщения о пространстве имён
            </summary>
            <summary>
            ASSEMBLY, Assembly, assembly - вывод сообщения о сборке
            </summary>
        </member>
        <member name="M:Libs.Logger.LoggingEventConverters.TemplateParser.Parse(System.String,Libs.Logger.LoggingEventConverters.ConverterFactory)">
            <summary>
            Преобразование строки в конвертер для получения строки из логируемых данных 
            </summary>
            <param name="template">шаблон строки</param>
            <param name="factory">фабрика</param>
            <returns></returns>
            <exception cref="T:Libs.Logger.Exceptions.LoggerMessageTemplateParsingException"></exception>
        </member>
        <member name="M:Libs.Logger.Writers.Wrappers.Helpers.TemporaryStore.TemporaryStoreBase.StoreIndexToName(System.Int32)">
            <summary>
            Преобразование индекса файла в название
            </summary>
        </member>
        <member name="M:Libs.Logger.Writers.Wrappers.Helpers.TemporaryStore.TemporaryStoreBase.StoreNameToIndex(System.String)">
            <summary>
            Преобразование имени файла в индекс (-1, если некорректное название)
            </summary>
        </member>
        <member name="M:Libs.Logger.Writers.Wrappers.Helpers.TemporaryStore.TemporaryStoreBase.AcquireHeaderLock(System.IO.FileStream)">
            <summary>
            Захват блокировки на заголовок файла
            </summary>
            <param name="stream">Файл</param>
        </member>
        <member name="M:Libs.Logger.Writers.Wrappers.Helpers.TemporaryStore.TemporaryStoreBase.ReleaseHeaderLock(System.IO.FileStream)">
            <summary>
            Освобождение блокировки на заголовке файла
            </summary>
            <param name="stream">Файл</param>
        </member>
        <member name="M:Libs.Logger.Writers.Wrappers.Helpers.TemporaryStore.TemporaryStoreBase.AtomicReadFileHeader(System.IO.FileStream)">
            <summary>
            Прочитать заголовок файла (позиция в файле сохраняется)
            </summary>
        </member>
        <member name="M:Libs.Logger.Writers.Wrappers.Helpers.TemporaryStore.TemporaryStoreBase.AtomicChangeStoreState(System.IO.FileStream,Libs.Logger.Writers.Wrappers.Helpers.TemporaryStore.TemporaryStoreBase.StoreFileState)">
            <summary>
            Изменить состояние файла. Позиция в файле сохраняется
            </summary>
        </member>
        <member name="M:Libs.Logger.Writers.Wrappers.Helpers.TemporaryStore.TemporaryStoreBase.AtomicChangeActiveRecord(System.IO.FileStream,System.Int64,System.Boolean)">
            <summary>
            Изменить индекс активной записи в файле
            </summary>
            <param name="stream">Файл</param>
            <param name="recordIndex">Индекс записи</param>
            <param name="doFlush">Делать ли сброс на диск</param>
        </member>
        <member name="M:Libs.Logger.Writers.Wrappers.Helpers.TemporaryStore.TemporaryStoreBase.ReadRecordHeader(System.IO.FileStream)">
            <summary>
            Прочитать заголовок записи (RecordHeader.Invalid в случае ошибки)
            </summary>
        </member>
        <member name="M:Libs.Logger.Writers.Wrappers.Helpers.TemporaryStore.TemporaryStoreBase.WriteRecordHeader(System.IO.FileStream,Libs.Logger.Writers.Wrappers.Helpers.TemporaryStore.TemporaryStoreBase.RecordHeader)">
            <summary>
            Записать заголовок записи
            </summary>
        </member>
        <member name="M:Libs.Logger.Writers.Wrappers.Helpers.TemporaryStore.TemporaryStoreBase.SeekToLastActiveRecord(System.IO.FileStream)">
            <summary>
            Перейти к активной записи в файле
            </summary>
        </member>
        <member name="M:Libs.Logger.Writers.Wrappers.Helpers.TemporaryStore.TemporaryStoreBase.SeekToRecord(System.IO.FileStream,System.Int64)">
            <summary>
            Перейти к указанной записи
            </summary>
        </member>
        <member name="M:Libs.Logger.Writers.Wrappers.Helpers.TemporaryStore.TemporaryStoreBase.SeekToNextRecord(System.IO.FileStream,System.Int64)">
            <summary>
            Перейти к следующей записи за указанной
            </summary>
        </member>
        <member name="M:Libs.Logger.Writers.Wrappers.Helpers.TemporaryStore.TemporaryStoreBase.CheckTemporaryStore(System.IO.FileStream)">
            <summary>
            Проверка валидности хранилища
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Libs.Logger.Writers.Wrappers.Helpers.TemporaryStore.TemporaryStoreBase.DeleteStore(System.String)">
            <summary>
            Удалить хранилище
            </summary>
            <param name="fileName">Имя файла</param>
            <returns>Успешность</returns>
        </member>
        <member name="M:Libs.Logger.Writers.Wrappers.Helpers.TemporaryStore.TemporaryStoreBase.CreateStorage(System.String,System.Int32)">
            <summary>
            Создать новое пустое хранилище
            </summary>
            <param name="folder">Директория</param>
            <param name="index">Индекс</param>
            <returns>Файл созданного хранилища</returns>
        </member>
        <member name="T:Libs.Logger.Writers.Wrappers.Helpers.TemporaryStore.TemporaryStoreBase.StoreFileState">
            <summary>
            Состояние файла
            </summary>
        </member>
        <member name="T:Libs.Logger.Writers.Wrappers.Helpers.TemporaryStore.TemporaryStoreBase.FileHeader">
            <summary>
            Заголовок файла
            </summary>
        </member>
        <member name="T:Libs.Logger.Writers.Wrappers.Helpers.TemporaryStore.TemporaryStoreBase.RecordHeader">
            <summary>
            Заголовок отдельной записи
            </summary>
        </member>
        <member name="T:Libs.Logger.Writers.Wrappers.Helpers.TemporaryStore.TemporaryStoreReader">
            <summary>
            Читатель из временного хранилища
            </summary>
        </member>
        <member name="M:Libs.Logger.Writers.Wrappers.Helpers.TemporaryStore.TemporaryStoreReader.GetRecord">
            <summary>
            Считать очередную запись из хранилища
            </summary>
            <returns></returns>
        </member>
        <member name="M:Libs.Logger.Writers.Wrappers.Helpers.TemporaryStore.TemporaryStoreReader.RecordCompleted">
            <summary>
            Пометить, что текущая запись успешно обработана и можно перейтик следующей
            </summary>
        </member>
        <member name="T:Libs.Logger.Writers.Wrappers.Helpers.TemporaryStore.TemporaryStoreWriter">
            <summary>
            Писатель во временное хранилище
            </summary>
        </member>
        <member name="M:Libs.Logger.Writers.Wrappers.Helpers.TemporaryStore.TemporaryStoreWriter.Write(Libs.Logger.Common.LoggingEvent)">
            <summary>
            Записать событие лога в хранилище
            </summary>
            <param name="data">Данные</param>
            <returns>Успешность</returns>
        </member>
        <member name="M:Libs.Logger.Initializer.InitializerHelper.InitializeLoggerWrappers(Libs.Logger.ILogger,System.Reflection.Assembly)">
            <summary>
            Инициализировать обёртку логгера
            </summary>
            <param name="assembly">Сборка для поиска</param>
            <param name="logger">Обёртка</param>
            <returns>Количество инициализированных логгеров</returns>
        </member>
        <member name="M:Libs.Logger.Initializer.InitializerHelper.InitializeLoggerWrappers(Libs.Logger.ILogger,System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Инициализировать обёртку логгера
            </summary>
            <param name="logger">Обёртка</param>
            <param name="assembly">Сборки для поиска</param>
            <returns>Количество инициализированных логгеров</returns>
        </member>
        <member name="M:Libs.Logger.Initializer.InitializerHelper.WrapLoggersInAssemblies(Libs.Logger.ILogger,System.Type[])">
            <summary>
            Инициализировать логгеры в других сборках как дочерние
            </summary>
            <param name="wrapper">Обёртка</param>
            <param name="types">Произвольные типы из сборок с дочерними логгерами</param>
            <returns>Количество инициализированных логгеров</returns>
        </member>
        <member name="T:Libs.Logger.LoggerWrapperInitializationMethodAttribute">
            <summary>
            Атрибут для указания метода инициализации логгера
            </summary>
        </member>
        <member name="T:Libs.Logger.Logger">
            <summary>
            Логгер для использования в подсистемах
            Желательно оборачивать в свой собственный сингелтон в подсистеме, 
            который обязательно наследовать от данного класса.
            </summary>
        </member>
        <member name="M:Libs.Logger.Logger.SetDefault(Libs.Logger.Logger)">
            <summary>
            Задать логгер по умолчанию
            </summary>
            <param name="newDefault">Новый логгер</param>
        </member>
        <member name="M:Libs.Logger.Logger.ResetDefault">
            <summary>
            Сбросить логгер по умолчанию в стандартный
            </summary>
        </member>
        <member name="M:Libs.Logger.Logger.LoadDefaultFromAppConfig(System.String)">
            <summary>
            Загрузить логгер по умолчанию из файла конфигурации
            </summary>
            <param name="sectionName">Имя секции для загрузки</param>
        </member>
        <member name="M:Libs.Logger.Logger.InitializeLoggerInAssembly(Libs.Logger.ILogger,System.Reflection.Assembly)">
            <summary>
            Инициализировать обёртку логгера
            </summary>
            <param name="assembly">Сборка для поиска</param>
            <param name="wrapper">Обёртка</param>
            <returns>Количество инициализированных логгеров</returns>
        </member>
        <member name="M:Libs.Logger.Logger.InitializeLoggersInAssemblies(Libs.Logger.ILogger,System.Type[])">
            <summary>
            Инициализировать логгеры в других сборках как дочерние
            </summary>
            <param name="wrapper">Обёртка</param>
            <param name="types">Произвольные типы из сборок с дочерними логгерами</param>
            <returns>Количество инициализированных логгеров</returns>
        </member>
        <member name="M:Libs.Logger.Logger.InitializeLoggerInAssembly(Libs.Logger.ILogger,System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Инициализировать обёртку логгера
            </summary>
            <param name="wrapper">Обёртка</param>
            <param name="assembly">Сборки для поиска</param>
            <returns>Количество инициализированных логгеров</returns>
        </member>
        <member name="M:Libs.Logger.Logger.DetectIsEnabled(Libs.Logger.ILogger)">
            <summary>
            Определяет, включён ли логгер (для well-known логгеров)
            </summary>
            <param name="logger">Интерфейс логгера</param>
            <returns>Включён ли</returns>
        </member>
        <member name="M:Libs.Logger.Logger.#ctor(Libs.Logger.LogLevel,System.String,Libs.Logger.ILoggingEventWriter,System.Boolean,System.Boolean)">
            <summary>
            Создание логгера
            </summary>
            <param name="logLevel">Уровень логирования</param>
            <param name="moduleName">Имя модуля (подсистемы)</param>
            <param name="innerLogger">Внутренний логгер</param>
            <param name="enableStackTraceExtraction">Разрешено ли получать данные из StackTrace</param>
            <param name="isEnabled">Вклюён ли логгер</param>
        </member>
        <member name="M:Libs.Logger.Logger.#ctor(Libs.Logger.LogLevel,System.String,System.Type,Libs.Logger.ILoggingEventWriter,System.Boolean,System.Boolean)">
            <summary>
            Создание логгера
            </summary>
            <param name="logLevel">Уровень логирования</param>
            <param name="moduleName">Имя модуля (подсистемы)</param>
            <param name="typeInfo">Тип, к которому привзяан логгер</param>
            <param name="innerLogger">Внутренний логгер</param>
            <param name="enableStackTraceExtraction">Разрешено ли получать данные из StackTrace</param>
            <param name="isEnabled">Вклюён ли логгер</param>
        </member>
        <member name="M:Libs.Logger.Logger.#ctor(System.String,Libs.Logger.ILogger)">
            <summary>
            Создание логгера
            </summary>
            <param name="moduleName">Имя модуля (подсистемы)</param>
            <param name="innerLogger">Внутренний логгер</param>
        </member>
        <member name="M:Libs.Logger.Logger.#ctor(Libs.Logger.LogLevel,System.String,Libs.Logger.ILogger)">
            <summary>
            Создание логгера
            </summary>
            <param name="logLevel">Уровень логирования</param>
            <param name="moduleName">Имя модуля (подсистемы)</param>
            <param name="innerLogger">Внутренний логгер</param>
        </member>
        <member name="M:Libs.Logger.Logger.GetClassLogger(System.Type)">
            <summary>
            Получение логгера для указанного типа
            </summary>
            <param name="typeInfo">Тип</param>
            <returns>Логгер для типа</returns>
        </member>
        <member name="M:Libs.Logger.Logger.GetThisClassLogger">
            <summary>
            Получение логгера для текущего класса
            </summary>
            <returns>Логгер для типа</returns>
        </member>
        <member name="P:Libs.Logger.Logger.EmptyLogger">
            <summary>
            Пустой логгер (в никуда)
            </summary>
        </member>
        <member name="P:Libs.Logger.Logger.ConsoleLogger">
            <summary>
            Простой консольный логгер
            </summary>
        </member>
        <member name="P:Libs.Logger.Logger.Default">
            <summary>
            Логгер по умолчанию
            </summary>
        </member>
        <member name="T:Libs.Logger.Net.NetService">
            <summary>
            Реализация интерфейса INetService.
            Принимает входящее сообщение, отправляет вызывающей стороне кол-во принятых байт
            </summary>
        </member>
        <member name="M:Libs.Logger.Net.NetService.SendData(System.Byte[])">
            <summary>
            Передаем данные - получаем количество принятых на той стороне байт
            </summary>
            <param name="data">Массив байт</param>
        </member>
        <member name="M:Libs.Logger.Net.NetService.OnDataRecieved(Libs.Logger.Common.LoggingEvent)">
            <summary>
            Вызов события у подписчиков
            </summary>
        </member>
        <member name="T:Libs.Logger.Helpers.Serializer">
            <summary>
            Сериализатор
            </summary>
        </member>
        <member name="M:Libs.Logger.Helpers.Serializer.Serialize``1(``0)">
            <summary>
            Сериализация объекта в бинарный вид
            </summary>
            <typeparam name="T">Тип</typeparam>
            <param name="obj">Объект</param>
            <returns></returns>
        </member>
        <member name="M:Libs.Logger.Helpers.Serializer.SerializeWithLength``1(``0)">
            <summary>
            Сериализация с указание длины объекта в первых 4 байтах (для передачи по сети)
            </summary>
            <typeparam name="T">Тип</typeparam>
            <param name="obj">Объект</param>
            <returns></returns>
        </member>
        <member name="M:Libs.Logger.Helpers.Serializer.Deserialize``1(System.Byte[])">
            <summary>
            Десериализация
            </summary>
            <typeparam name="T">Тип</typeparam>
            <param name="buffer">Набор байт</param>
            <returns></returns>
        </member>
        <member name="T:Libs.Logger.Writers.ConsoleWriter">
            <summary>
            ConsoleWriter. Ресурс для вывода сообщений на консоль.
            </summary>
        </member>
        <member name="T:Libs.Logger.Writers.Writer">
            <summary>
            Базовый класс для всех писателей.
            От него наследуются классы отвечающие за отправку логов в консоль, в файл и в сеть...
            </summary>
        </member>
        <member name="M:Libs.Logger.Writers.Writer.SetConverterFactory(Libs.Logger.LoggingEventConverters.ConverterFactory)">
            <summary>
            Устанавливает фабрику для создания конвертеров,
            необходимых для преобразования логируемых данных в строки для вывода в файл или консоль
            </summary>
            <param name="factory"></param>
        </member>
        <member name="M:Libs.Logger.Writers.ConsoleWriter.SetConverterFactory(Libs.Logger.LoggingEventConverters.ConverterFactory)">
            <summary>
            Устанавливает фабрику для создания конвертеров,
            необходимых для преобразования логируемых данных в строки для вывода в файл или консоль
            </summary>
            <param name="factory"></param>
        </member>
        <member name="M:Libs.Logger.LoggingEventConverters.ExceptionConverter.Convert(Libs.Logger.Common.Error,System.String)">
            <summary>
            Преобразование информации об исключительной ситуации в строковый вид
            С поддежки LogReader
            </summary>
            <param name="error">Информация об ошибке</param>
            <param name="methodName">Имя метода, где возникла ошибка</param>
            <returns></returns>
        </member>
        <member name="M:Libs.Logger.LoggingEventConverters.StackSourceConverter.Convert(System.Collections.Generic.List{System.String})">
            <summary>
            Преобразование списка в строковый вид
            </summary>
            <param name="arr">Массив строк</param>
            <returns></returns>
        </member>
        <member name="T:Libs.Logger.Writers.EmptyWriter">
            <summary>
            EmptyWriter. Ресурс для вывода в пустоту.
            </summary>
        </member>
        <member name="T:Libs.Logger.Writers.FileWriter">
            <summary>
            FileWriter. Ресурс для записи сообщений в файл
            </summary>
        </member>
        <member name="M:Libs.Logger.Writers.FileWriter.SetConverterFactory(Libs.Logger.LoggingEventConverters.ConverterFactory)">
            <summary>
            Устанавливает фабрику для создания конвертеров,
            необходимых для преобразования логируемых данных в строки для вывода в файл или консоль
            </summary>
            <param name="factory"></param>
        </member>
        <member name="T:Libs.Logger.Writers.GroupWriter">
            <summary>
            GroupWriter. Ресурс для отправки логирующийся сообщений в несколько целей
            </summary>
        </member>
        <member name="T:Libs.Logger.Writers.NetWriter">
            <summary>
            NetWriter. Ресурс для отправки сообщения по тсп на сетевой сервер сбора логов
            </summary>
        </member>
        <member name="M:Libs.Logger.Writers.NetWriter.Write(Libs.Logger.Common.LoggingEvent)">
            <summary>
            Отправка события логгера по сети
            </summary>
            <param name="data"></param>
        </member>
        <member name="T:Libs.Logger.Writers.PipeWriter">
            <summary>
            PipeWriter. Ресурс для отправки сообщения по пайпу на локальный сервер сбора логов
            </summary>
        </member>
        <member name="M:Libs.Logger.Writers.PipeWriter.Write(Libs.Logger.Common.LoggingEvent)">
            <summary>
            Отправка события логгера по сети
            </summary>
        </member>
        <member name="T:Libs.Logger.Writers.RoutingWriter">
            <summary>
            RoutingWriter. Ресурс для сложной обработки логирующийся сообщений - распределение по нескольким ресурсам или их маршрутизация
            </summary>
        </member>
        <member name="T:Libs.Logger.Writers.SupportFileWriter">
            <summary>
            SupportFileWriter. Вспомогательный ресурс для записи сообщений в файл
            </summary>
        </member>
        <member name="M:Libs.Logger.Writers.SupportFileWriter.SetConverterFactory(Libs.Logger.LoggingEventConverters.ConverterFactory)">
            <summary>
            Устанавливает фабрику для создания конвертеров,
            необходимых для преобразования логируемых данных в строки для вывода в файл или консоль
            </summary>
            <param name="factory"></param>
        </member>
        <member name="T:Libs.Logger.Writers.DBWriter">
            <summary>
            DBWriter. Ресурс для записи сообщений в БД.
            В базе предварительно нужно создать таблицу для логов и хранимую процедуру для инсерта (лежит в папке с проектом)
            </summary>
        </member>
    </members>
</doc>
