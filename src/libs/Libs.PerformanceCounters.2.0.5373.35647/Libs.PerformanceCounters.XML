<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Libs.PerformanceCounters</name>
    </assembly>
    <members>
        <member name="T:Libs.PerformanceCounters.CompositeCounters.Categories.CompositeEmptyCategory">
            <summary>
            Пустая категория для CompositeCounters
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.EmptyCategory">
            <summary>
            Пустая категория
            Для добавления элемента в названии категории - Name.SubName.SubSubName
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.Category">
            <summary>
            Категория счётчиков
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.Category.#ctor(System.String,System.String,Libs.PerformanceCounters.CategoryTypes)">
            <summary>
            Конструктор Category
            </summary>
            <param name="categoryName">Имя категории</param>
            <param name="categoryDescription">Описание категории</param>
            <param name="type">Тип категории</param>
        </member>
        <member name="M:Libs.PerformanceCounters.Category.CreateEmptySubCategory(System.String,System.String)">
            <summary>
            Создание пустой подкатегории
            Для добавления элемента в названии категории - Name.SubName.SubSubName
            </summary>
            <param name="categoryName">Имя подкатегории</param>
            <param name="categoryDescription">Описание категории</param>
            <returns>Созданная подкатегория</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.Category.CreateMultiInstanceSubCategory(System.String,System.String)">
            <summary>
            Создание подкатегории c многими инстансами
            </summary>
            <param name="categoryName">Имя категории</param>
            <param name="categoryDescription">Описание категории</param>
            <returns>Созданная подкатегория</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.Category.CreateSingleInstanceSubCategory(System.String,System.String)">
            <summary>
            Создание простой подкатегории
            </summary>
            <param name="categoryName">Имя категории</param>
            <param name="categoryDescription">Описание категории</param>
            <returns>Созданная подкатегория</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.Category.Init">
            <summary>
            Инициализация счетчиков (создание категорий, инстанцирование самих счетчиков)
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.Category.ToString">
            <summary>
            Преобразовать в строковое представление
            </summary>
            <returns>Строка</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.Category.Dispose(System.Boolean)">
            <summary>
            Освобождение ресурсов
            </summary>
            <param name="isUserCall">Было ли инициировано пользователем</param>
        </member>
        <member name="M:Libs.PerformanceCounters.Category.Dispose">
            <summary>
            Освобождение ресурсов
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.Category.Name">
            <summary>
            Имя категории
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.Category.Description">
            <summary>
            Описание категории
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.Category.Type">
            <summary>
            Тип категории
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.EmptyCategory.#ctor(System.String,System.String)">
            <summary>
            Конструктор для создания пустой подкатегории
            Для добавления элемента в названии категории - Name.SubName.SubSubName
            </summary>
            <param name="name">Название категории</param>
            <param name="description">Описание категории</param>
        </member>
        <member name="M:Libs.PerformanceCounters.CompositeCounters.Categories.CompositeEmptyCategory.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{Libs.PerformanceCounters.EmptyCategory})">
            <summary>
            Конструктор для создания пустой подкатегории CompositeEmptyCategory.
            </summary>
            <param name="name">Название категории</param>
            <param name="description">Описание категории</param>
            <param name="wrappedCategories">Оборачиваемые категории</param>
        </member>
        <member name="M:Libs.PerformanceCounters.CompositeCounters.Categories.CompositeEmptyCategory.CreateEmptySubCategory(System.String,System.String)">
            <summary>
            Создание пустой подкатегории
            Для добавления элемента в названии категории - Name.SubName.SubSubName
            </summary>
            <param name="categoryName">Имя подкатегории</param>
            <param name="categoryDescription">Описание категории</param>
            <returns>Созданная подкатегория</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.CompositeCounters.Categories.CompositeEmptyCategory.CreateMultiInstanceSubCategory(System.String,System.String)">
            <summary>
            Создание подкатегории c многими инстансами
            </summary>
            <param name="categoryName">Имя категории</param>
            <param name="categoryDescription">Описание категории</param>
            <returns>Созданная подкатегория</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.CompositeCounters.Categories.CompositeEmptyCategory.CreateSingleInstanceSubCategory(System.String,System.String)">
            <summary>
            Создание простой подкатегории
            </summary>
            <param name="categoryName">Имя категории</param>
            <param name="categoryDescription">Описание категории</param>
            <returns>Созданная подкатегория</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.CompositeCounters.Categories.CompositeEmptyCategory.Init">
            <summary>
            Инициализация счетчиков (создание категорий, инстанцирование самих счетчиков)
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.CompositeCounters.Categories.CompositeEmptyCategory.Dispose(System.Boolean)">
            <summary>
            Освобождение ресурсов
            </summary>
            <param name="isUserCall">Было ли инициировано пользователем</param>
        </member>
        <member name="P:Libs.PerformanceCounters.CompositeCounters.Categories.CompositeEmptyCategory.ChildCategories">
            <summary>
            Перечень дочерних категорий
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.CompositeCounters.Categories.CompositeEmptyCategory.WrappedCategories">
            <summary>
            Обёрнутые категории
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.CompositeCounters.Categories.CompositeSingleInstanceCategory">
            <summary>
            Категория с одним инстансом для CompositeCounters
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.SingleInstanceCategory">
            <summary>
            Создание категории с одним инстансом
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.SingleInstanceCategory.#ctor(System.String,System.String)">
            <summary>
            Конструктор
            </summary>
            <param name="categoryName">Имя категории</param>
            <param name="categoryDescription">Описание категории</param>
        </member>
        <member name="M:Libs.PerformanceCounters.SingleInstanceCategory.CreateCounter(Libs.PerformanceCounters.CounterTypes,System.String,System.String)">
            <summary>
            Создать счётчик определённого типа
            </summary>
            <param name="type">Тип счётчика</param>
            <param name="counterName">Имя счётчика</param>
            <param name="counterDescription">Описание счётчика</param>
            <returns>Счётчик</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.SingleInstanceCategory.CreateNumberOfItemsCounter(System.String,System.String)">
            <summary>
            Создать счётчик определённого типа (NumberOfItemsCounter)
            </summary>
            <param name="counterName">Имя счетчика</param>
            <param name="counterDescription">Описание счетчика</param>
            <returns>Счётчик</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.SingleInstanceCategory.CreateAverageTimeCounter(System.String,System.String)">
            <summary>
            Создать счётчик определённого типа (AverageTimeCounter)
            </summary>
            <param name="counterName">Имя счетчика</param>
            <param name="counterDescription">Описание счетчика</param>
            <returns>Счётчик</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.SingleInstanceCategory.CreateAverageCountCounter(System.String,System.String)">
            <summary>
            Создать счётчик определённого типа (AverageCountCounter)
            </summary>
            <param name="counterName">Имя счетчика</param>
            <param name="counterDescription">Описание счетчика</param>
            <returns>Счётчик</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.SingleInstanceCategory.CreateOperationsPerSecondCounter(System.String,System.String)">
            <summary>
            Создать счётчик определённого типа (OperationsPerSecondCounter)
            </summary>
            <param name="counterName">Имя счетчика</param>
            <param name="counterDescription">Описание счетчика</param>
            <returns>Счётчик</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.SingleInstanceCategory.CreateElapsedTimeCounter(System.String,System.String)">
            <summary>
            Создать счётчик определённого типа (ElapsedTimeCounter)
            </summary>
            <param name="counterName">Имя счетчика</param>
            <param name="counterDescription">Описание счетчика</param>
            <returns>Счётчик</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.SingleInstanceCategory.CreateMomentTimeCounter(System.String,System.String)">
            <summary>
            Создать счётчик определённого типа (MomentTimeCounter)
            </summary>
            <param name="counterName">Имя счетчика</param>
            <param name="counterDescription">Описание счетчика</param>
            <returns>Счётчик</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.SingleInstanceCategory.HasCounter(System.String)">
            <summary>
            Есть ли счётчик с указанным именем
            </summary>
            <param name="counterName">Имя счётчика</param>
            <returns>Есть ли он</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.SingleInstanceCategory.GetCounter(System.String)">
            <summary>
            Получение счетчика определенного типа
            </summary>
            <param name="counterName">Имя счетчика</param>
            <returns>Счётчик</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.SingleInstanceCategory.GetCounter(System.String,Libs.PerformanceCounters.CounterTypes)">
            <summary>
            Получение счетчика определенного типа
            </summary>
            <param name="counterName">Имя счетчика</param>
            <param name="expectedCounterType">Тип счётчика</param>
            <returns>Счётчик</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.SingleInstanceCategory.GetNumberOfItemsCounter(System.String)">
            <summary>
            Возвращает ранее созданный счетчик производительности (NumberOfItemsCounter)
            </summary>
            <param name="counterName">Имя счетчика</param>
            <returns>Счётчик</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.SingleInstanceCategory.GetAverageTimeCounter(System.String)">
            <summary>
            Возвращает ранее созданный счетчик производительности (AverageTimeCounter)
            </summary>
            <param name="counterName">Имя счетчика</param>
            <returns>Счётчик</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.SingleInstanceCategory.GetAverageCountCounter(System.String)">
            <summary>
            Возвращает ранее созданный счетчик производительности (AverageCountCounter)
            </summary>
            <param name="counterName">Имя счетчика</param>
            <returns>Счётчик</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.SingleInstanceCategory.GetOperationsPerSecondCounter(System.String)">
            <summary>
            Возвращает ранее созданный счетчик производительности (OperationsPerSecondCounter)
            </summary>
            <param name="counterName">Имя счетчика</param>
            <returns>Счётчик</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.SingleInstanceCategory.GetElapsedTimeCounter(System.String)">
            <summary>
            Возвращает ранее созданный счетчик производительности (ElapsedTimeCounter)
            </summary>
            <param name="counterName">Имя счетчика</param>
            <returns>Счётчик</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.SingleInstanceCategory.GetMomentTimeCounter(System.String)">
            <summary>
            Возвращает ранее созданный счетчик производительности (MomentTimeCounter)
            </summary>
            <param name="counterName">Имя счетчика</param>
            <returns>Счётчик</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.CompositeCounters.Categories.CompositeSingleInstanceCategory.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{Libs.PerformanceCounters.SingleInstanceCategory})">
            <summary>
            Конструктор CompositeSingleInstanceCategory
            </summary>
            <param name="name">Имя категории</param>
            <param name="description">Описание категории</param>
            <param name="wrappedCategories">Оборачиваемые категории</param>
        </member>
        <member name="M:Libs.PerformanceCounters.CompositeCounters.Categories.CompositeSingleInstanceCategory.CreateCounter(Libs.PerformanceCounters.CounterTypes,System.String,System.String)">
            <summary>
            Создать счётчик определённого типа
            </summary>
            <param name="type">Тип счётчика</param>
            <param name="counterName">Имя счётчика</param>
            <param name="counterDescription">Описание счётчика</param>
            <returns>Счётчик</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.CompositeCounters.Categories.CompositeSingleInstanceCategory.HasCounter(System.String)">
            <summary>
            Есть ли счётчик с указанным именем
            </summary>
            <param name="counterName">Имя счётчика</param>
            <returns>Есть ли он</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.CompositeCounters.Categories.CompositeSingleInstanceCategory.GetCounter(System.String)">
            <summary>
            Получение счетчика определенного типа
            </summary>
            <param name="counterName">Имя счетчика</param>
            <returns>Счётчик</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.CompositeCounters.Categories.CompositeSingleInstanceCategory.GetCounter(System.String,Libs.PerformanceCounters.CounterTypes)">
            <summary>
            Получение счетчика определенного типа
            </summary>
            <param name="counterName">Имя счетчика</param>
            <param name="expectedCounterType">Тип счётчика</param>
            <returns>Счётчик</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.CompositeCounters.Categories.CompositeSingleInstanceCategory.CreateEmptySubCategory(System.String,System.String)">
            <summary>
            Создание пустой подкатегории
            Для добавления элемента в названии категории - Name.SubName.SubSubName
            </summary>
            <param name="categoryName">Имя подкатегории</param>
            <param name="categoryDescription">Описание категории</param>
            <returns>Созданная подкатегория</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.CompositeCounters.Categories.CompositeSingleInstanceCategory.CreateMultiInstanceSubCategory(System.String,System.String)">
            <summary>
            Создание подкатегории c многими инстансами
            </summary>
            <param name="categoryName">Имя категории</param>
            <param name="categoryDescription">Описание категории</param>
            <returns>Созданная подкатегория</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.CompositeCounters.Categories.CompositeSingleInstanceCategory.CreateSingleInstanceSubCategory(System.String,System.String)">
            <summary>
            Создание простой подкатегории
            </summary>
            <param name="categoryName">Имя категории</param>
            <param name="categoryDescription">Описание категории</param>
            <returns>Созданная подкатегория</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.CompositeCounters.Categories.CompositeSingleInstanceCategory.Init">
            <summary>
            Инициализация счетчиков (создание категорий, инстанцирование самих счетчиков)
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.CompositeCounters.Categories.CompositeSingleInstanceCategory.Dispose(System.Boolean)">
            <summary>
            Освобождение ресурсов
            </summary>
            <param name="isUserCall">Было ли инициировано пользователем</param>
        </member>
        <member name="P:Libs.PerformanceCounters.CompositeCounters.Categories.CompositeSingleInstanceCategory.ChildCategories">
            <summary>
            Перечень дочерних категорий
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.CompositeCounters.Categories.CompositeSingleInstanceCategory.WrappedCategories">
            <summary>
            Обёрнутые категории
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.CompositeCounters.Categories.CompositeSingleInstanceCategory.Counters">
            <summary>
            Перечень счётчиков
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.CompositeCounters.Categories.CompositeInstanceInMultiInstanceCategory">
            <summary>
            Инстанс в многоинстансовой категории для CompositeCounters
            </summary> 
        </member>
        <member name="T:Libs.PerformanceCounters.InstanceInMultiInstanceCategory">
            <summary>
            Инстанс в многоинстансовой категории
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.InstanceInMultiInstanceCategory.#ctor(Libs.PerformanceCounters.MultiInstanceCategory,System.String)">
            <summary>
            Конструктор для создания инстанса
            </summary>
            <param name="parent">Родительская многоинстовая категория</param>
            <param name="instanceName">Имя инстанса</param>
        </member>
        <member name="M:Libs.PerformanceCounters.InstanceInMultiInstanceCategory.HasCounter(System.String)">
            <summary>
            Есть ли счётчик с указанным именем
            </summary>
            <param name="counterName">Имя счётчика</param>
            <returns>Есть ли он</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.InstanceInMultiInstanceCategory.GetCounter(System.String)">
            <summary>
            Получение счетчика по имени
            </summary>
            <param name="counterName">Имя счетчика</param>
            <returns>Счётчик</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.InstanceInMultiInstanceCategory.GetCounter(System.String,Libs.PerformanceCounters.CounterTypes)">
            <summary>
            Получение счетчика определенного типа
            </summary>
            <param name="counterName">Имя счетчика</param>
            <param name="expectedCounterType">Тип счётчика</param>
            <returns>Счётчик</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.InstanceInMultiInstanceCategory.GetNumberOfItemsCounter(System.String)">
            <summary>
            Возвращает ранее созданный счетчик производительности (NumberOfItemsCounter)
            </summary>
            <param name="counterName">Имя счётчика</param>
            <returns>Счётчик</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.InstanceInMultiInstanceCategory.GetAverageTimeCounter(System.String)">
            <summary>
            Возвращает ранее созданный счетчик производительности (AverageTimeCounter)
            </summary>
            <param name="counterName">Имя счётчика</param>
            <returns>Счётчик</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.InstanceInMultiInstanceCategory.GetAverageCountCounter(System.String)">
            <summary>
            Возвращает ранее созданный счетчик производительности (AverageCountCounter)
            </summary>
            <param name="counterName">Имя счётчика</param>
            <returns>Счётчик</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.InstanceInMultiInstanceCategory.GetOperationsPerSecondCounter(System.String)">
            <summary>
            Возвращает ранее созданный счетчик производительности (OperationsPerSecondCounter)
            </summary>
            <param name="counterName">Имя счётчика</param>
            <returns>Счётчик</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.InstanceInMultiInstanceCategory.GetElapsedTimeCounter(System.String)">
            <summary>
            Возвращает ранее созданный счетчик производительности (ElapsedTimeCounter)
            </summary>
            <param name="counterName">Имя счётчика</param>
            <returns>Счётчик</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.InstanceInMultiInstanceCategory.GetMomentTimeCounter(System.String)">
            <summary>
            Возвращает ранее созданный счетчик производительности (MomentTimeCounter)
            </summary>
            <param name="counterName">Имя счётчика</param>
            <returns>Счётчик</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.InstanceInMultiInstanceCategory.Remove">
            <summary>
            Удаление инстанса
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.InstanceInMultiInstanceCategory.ToString">
            <summary>
            Преобразование в строковое представление
            </summary>
            <returns>Строка</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.InstanceInMultiInstanceCategory.System#IDisposable#Dispose">
            <summary>
            Освобождение ресурсов
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.InstanceInMultiInstanceCategory.Parent">
            <summary>
            Родительская категория
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.InstanceInMultiInstanceCategory.InstanceName">
            <summary>
            Имя инстанса
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.InstanceInMultiInstanceCategory.IsAlive">
            <summary>
            Живой ли инстанс (не был ли удалён)
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.CompositeCounters.Categories.CompositeInstanceInMultiInstanceCategory.#ctor(Libs.PerformanceCounters.CompositeCounters.Categories.CompositeMultiInstanceCategory,System.String,System.Collections.Generic.IEnumerable{Libs.PerformanceCounters.InstanceInMultiInstanceCategory})">
            <summary>
            Конструктор для создания инстанса CompositeInstanceInMultiInstanceCategory
            </summary>
            <param name="parent">Родительская многоинстовая категория</param>
            <param name="instanceName">Имя инстанса</param>
            <param name="wrappedInstances">Оборачиваемые инстансы</param>
        </member>
        <member name="M:Libs.PerformanceCounters.CompositeCounters.Categories.CompositeInstanceInMultiInstanceCategory.OnRemoveFromMultiInstanceCategory">
            <summary>
            Вызывается из родительской MultiInstanceCategory при удалении данного инстанса
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.CompositeCounters.Categories.CompositeInstanceInMultiInstanceCategory.HasCounter(System.String)">
            <summary>
            Есть ли счётчик с указанным именем
            </summary>
            <param name="counterName">Имя счётчика</param>
            <returns>Есть ли он</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.CompositeCounters.Categories.CompositeInstanceInMultiInstanceCategory.GetCounter(System.String)">
            <summary>
            Получение счетчика по имени
            </summary>
            <param name="counterName">Имя счетчика</param>
            <returns>Счётчик</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.CompositeCounters.Categories.CompositeInstanceInMultiInstanceCategory.GetCounter(System.String,Libs.PerformanceCounters.CounterTypes)">
            <summary>
            Получение счетчика определенного типа
            </summary>
            <param name="counterName">Имя счетчика</param>
            <param name="expectedCounterType">Тип счётчика</param>
            <returns>Счётчик</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.CompositeCounters.Categories.CompositeInstanceInMultiInstanceCategory.Remove">
            <summary>
            Удаление инстанса
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.CompositeCounters.Categories.CompositeInstanceInMultiInstanceCategory.Counters">
            <summary>
            Перечень счётчиков
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.CompositeCounters.Categories.CompositeInstanceInMultiInstanceCategory.WrappedInstances">
            <summary>
            Обёрнутые инстансы
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.CompositeCounters.Categories.CompositeInstanceInMultiInstanceCategory.IsAlive">
            <summary>
            Живой ли инстанс (не был ли удалён)
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.CompositeCounters.Categories.CompositeMultiInstanceCategory">
            <summary>
            Создание категории поддерживающей многочисленные инстансы для CompositeCounters
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.MultiInstanceCategory">
            <summary>
            Создание категории поддерживающей многочисленные инстансы
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.MultiInstanceCategory.#ctor(System.String,System.String)">
            <summary>
            Конструктор категории
            </summary>
            <param name="categoryName">Имя категории</param>
            <param name="categoryDescription">Описание категории</param>
        </member>
        <member name="M:Libs.PerformanceCounters.MultiInstanceCategory.HasInstance(System.String)">
            <summary>
            Существует ли инстанс счётчиков
            </summary>
            <param name="instanceName">Имя инстанса</param>
            <returns>Существует ли</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.MultiInstanceCategory.RemoveInstance(System.String)">
            <summary>
            Удалить инстанс
            </summary>
            <param name="instanceName">Имя инстанса</param>
            <returns>Существал ли</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.MultiInstanceCategory.CreateCounter(Libs.PerformanceCounters.CounterTypes,System.String,System.String)">
            <summary>
            Создать счётчик определённого типа
            </summary>
            <param name="type">Тип счётчика</param>
            <param name="counterName">Имя счетчика</param>
            <param name="counterDescription">Описание счетчика</param>
        </member>
        <member name="M:Libs.PerformanceCounters.MultiInstanceCategory.CreateNumberOfItemsCounter(System.String,System.String)">
            <summary>
            Создать счётчик определённого типа (NumberOfItemsCounter)
            </summary>
            <param name="counterName">Имя счетчика</param>
            <param name="counterDescription">Описание счетчика</param>
        </member>
        <member name="M:Libs.PerformanceCounters.MultiInstanceCategory.CreateAverageTimeCounter(System.String,System.String)">
            <summary>
            Создать счётчик определённого типа (AverageTimeCounter)
            </summary>
            <param name="counterName">Имя счетчика</param>
            <param name="counterDescription">Описание счетчика</param>
        </member>
        <member name="M:Libs.PerformanceCounters.MultiInstanceCategory.CreateAverageCountCounter(System.String,System.String)">
            <summary>
            Создать счётчик определённого типа (AverageCountCounter)
            </summary>
            <param name="counterName">Имя счетчика</param>
            <param name="counterDescription">Описание счетчика</param>
        </member>
        <member name="M:Libs.PerformanceCounters.MultiInstanceCategory.CreateOperationsPerSecondCounter(System.String,System.String)">
            <summary>
            Создать счётчик определённого типа (OperationsPerSecondCounter)
            </summary>
            <param name="counterName">Имя счетчика</param>
            <param name="counterDescription">Описание счетчика</param>
        </member>
        <member name="M:Libs.PerformanceCounters.MultiInstanceCategory.CreateElapsedTimeCounter(System.String,System.String)">
            <summary>
            Создать счётчик определённого типа (ElapsedTimeCounter)
            </summary>
            <param name="counterName">Имя счетчика</param>
            <param name="counterDescription">Описание счетчика</param>
        </member>
        <member name="M:Libs.PerformanceCounters.MultiInstanceCategory.CreateMomentTimeCounter(System.String,System.String)">
            <summary>
            Создать счётчик определённого типа (MomentTimeCounter)
            </summary>
            <param name="counterName">Имя счетчика</param>
            <param name="counterDescription">Описание счетчика</param>
        </member>
        <member name="P:Libs.PerformanceCounters.MultiInstanceCategory.Item(System.String)">
            <summary>
            Получение или создание инстанса
            </summary>
            <param name="instanceName">Имя инстанса</param>
            <returns>Инстанс</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.CompositeCounters.Categories.CompositeMultiInstanceCategory.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{Libs.PerformanceCounters.MultiInstanceCategory})">
            <summary>
            Конструктор категории CompositeMultiInstanceCategory
            </summary>
            <param name="name">Имя категории</param>
            <param name="description">Описание категории</param>
            <param name="wrappedCategories">Оборачиваемые категории</param>
        </member>
        <member name="M:Libs.PerformanceCounters.CompositeCounters.Categories.CompositeMultiInstanceCategory.HasInstance(System.String)">
            <summary>
            Существует ли инстанс счётчиков
            </summary>
            <param name="instanceName">Имя инстанса</param>
            <returns>Существует ли</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.CompositeCounters.Categories.CompositeMultiInstanceCategory.RemoveInstance(System.String)">
            <summary>
            Удалить инстанс
            </summary>
            <param name="instanceName">Имя инстанса</param>
            <returns>Существал ли</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.CompositeCounters.Categories.CompositeMultiInstanceCategory.CreateCounter(Libs.PerformanceCounters.CounterTypes,System.String,System.String)">
            <summary>
            Создать счётчик определённого типа
            </summary>
            <param name="type">Тип счётчика</param>
            <param name="counterName">Имя счетчика</param>
            <param name="counterDescription">Описание счетчика</param>
        </member>
        <member name="M:Libs.PerformanceCounters.CompositeCounters.Categories.CompositeMultiInstanceCategory.CreateEmptySubCategory(System.String,System.String)">
            <summary>
            Создание пустой подкатегории
            Для добавления элемента в названии категории - Name.SubName.SubSubName
            </summary>
            <param name="categoryName">Имя подкатегории</param>
            <param name="categoryDescription">Описание категории</param>
            <returns>Созданная подкатегория</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.CompositeCounters.Categories.CompositeMultiInstanceCategory.CreateMultiInstanceSubCategory(System.String,System.String)">
            <summary>
            Создание подкатегории c многими инстансами
            </summary>
            <param name="categoryName">Имя категории</param>
            <param name="categoryDescription">Описание категории</param>
            <returns>Созданная подкатегория</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.CompositeCounters.Categories.CompositeMultiInstanceCategory.CreateSingleInstanceSubCategory(System.String,System.String)">
            <summary>
            Создание простой подкатегории
            </summary>
            <param name="categoryName">Имя категории</param>
            <param name="categoryDescription">Описание категории</param>
            <returns>Созданная подкатегория</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.CompositeCounters.Categories.CompositeMultiInstanceCategory.Init">
            <summary>
            Инициализация счетчиков (создание категорий, инстанцирование самих счетчиков)
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.CompositeCounters.Categories.CompositeMultiInstanceCategory.Dispose(System.Boolean)">
            <summary>
            Освобождение ресурсов
            </summary>
            <param name="isUserCall">Было ли инициировано пользователем</param>
        </member>
        <member name="P:Libs.PerformanceCounters.CompositeCounters.Categories.CompositeMultiInstanceCategory.ChildCategories">
            <summary>
            Перечень дочерних категорий
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.CompositeCounters.Categories.CompositeMultiInstanceCategory.WrappedCategories">
            <summary>
            Обёрнутые категории
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.CompositeCounters.Categories.CompositeMultiInstanceCategory.Instances">
            <summary>
            Перечень инстансов
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.CompositeCounters.Categories.CompositeMultiInstanceCategory.Counters">
            <summary>
            Словарь дескрипторов счётчиков (для внутреннего использования)
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.CompositeCounters.Categories.CompositeMultiInstanceCategory.Item(System.String)">
            <summary>
            Получение или создание инстанса
            </summary>
            <param name="instanceName">Имя инстанса</param>
            <returns>Инстанс</returns>
        </member>
        <member name="T:Libs.PerformanceCounters.CompositeCounters.CompositeCounterFactory">
            <summary>
            Фабрика для композиции счётчиков различных видов
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.CounterFactory">
            <summary>
            Базовый класс для фабрики счётчиков
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.CounterFactory.CreateEmptyCategory(System.String,System.String)">
            <summary>
            Создание пустой категории
            Для добавления элемента в названии категории - Name.SubName.SubSubName
            </summary>
            <param name="categoryName">Имя категории</param>
            <param name="categoryDescription">Описание категории</param>
            <returns>Категория</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.CounterFactory.CreateMultiInstanceCategory(System.String,System.String)">
            <summary>
            Создание категории c многими инстансами
            </summary>
            <param name="categoryName">Имя категории</param>
            <param name="categoryDescription">Описание категории</param>
            <returns>Категория</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.CounterFactory.CreateSingleInstanceCategory(System.String,System.String)">
            <summary>
            Создание категории
            </summary>
            <param name="categoryName">Имя категории</param>
            <param name="categoryDescription">Описание категории</param>
            <returns>Категория</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.CounterFactory.CreateCategoryWrapper``1">
            <summary>
            Создание обертки категории счетчиков вместе со всеми счетчиками.
            Счетчики должны быть одного из типов счетчиков
            и также должны быть помечены атрибутами CounterAttributes
            </summary>
            <typeparam name="T">Тип обёртки</typeparam>
            <returns>Созданная обёртка</returns>
            <exception cref="T:Libs.PerformanceCounters.InvalidCounterDefinitionException">При неверном описании счётчика в обёртке</exception>
        </member>
        <member name="M:Libs.PerformanceCounters.CounterFactory.CreateRootWrapper(System.String,System.String)">
            <summary>
            Создаёт корневой пустой враппер для инициаилизации
            </summary>
            <param name="name">Имя категории</param>
            <param name="description">Описание</param>
            <returns>Корневой враппер</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.CounterFactory.CreateRootWrapper">
            <summary>
            Создаёт корневой пустой враппер для инициаилизации
            </summary>
            <returns>Корневой враппер</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.CounterFactory.InitAll">
            <summary>
            Инициализация счетчиков во всех дочерних категориях (создание категорий, инстанцирование самих счетчиков)
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.CounterFactory.Dispose(System.Boolean)">
            <summary>
            Внутренний код освобождения ресурсов
            </summary>
            <param name="isUserCall">Вызвано ли пользователем</param>
        </member>
        <member name="M:Libs.PerformanceCounters.CounterFactory.Dispose">
            <summary>
            Освобождение ресурсов
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.CompositeCounters.CompositeCounterFactory.#ctor">
            <summary>
            Конструктор CompositeCounterFactory
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.CompositeCounters.CompositeCounterFactory.#ctor(System.Collections.Generic.IEnumerable{Libs.PerformanceCounters.CounterFactory})">
            <summary>
            Конструктор CompositeCounterFactory
            </summary>
            <param name="factories">Перечень оборачиваемых фабрик</param>
        </member>
        <member name="M:Libs.PerformanceCounters.CompositeCounters.CompositeCounterFactory.#ctor(Libs.PerformanceCounters.Configuration.CompositeCountersConfiguration)">
            <summary>
            Конструктор CompositeCounterFactory из конфига
            </summary>
            <param name="config">Конфигурация</param>
        </member>
        <member name="M:Libs.PerformanceCounters.CompositeCounters.CompositeCounterFactory.CreateEmptyCategory(System.String,System.String)">
            <summary>
            Создание пустой категории
            Для добавления элемента в названии категории - Name.SubName.SubSubName
            </summary>
            <param name="categoryName">Имя категории</param>
            <param name="categoryDescription">Описание категории</param>
            <returns>Категория</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.CompositeCounters.CompositeCounterFactory.CreateMultiInstanceCategory(System.String,System.String)">
            <summary>
            Создание категории c многими инстансами
            </summary>
            <param name="categoryName">Имя категории</param>
            <param name="categoryDescription">Описание категории</param>
            <returns>Категория</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.CompositeCounters.CompositeCounterFactory.CreateSingleInstanceCategory(System.String,System.String)">
            <summary>
            Создание категории
            </summary>
            <param name="categoryName">Имя категории</param>
            <param name="categoryDescription">Описание категории</param>
            <returns>Категория</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.CompositeCounters.CompositeCounterFactory.InitAll">
            <summary>
            Инициализация счетчиков во всех дочерних категориях (создание категорий, инстанцирование самих счетчиков)
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.CompositeCounters.CompositeCounterFactory.Dispose(System.Boolean)">
            <summary>
            Внутренний код освобождения ресурсов
            </summary>
            <param name="isUserCall">Вызвано ли пользователем</param>
        </member>
        <member name="P:Libs.PerformanceCounters.CompositeCounters.CompositeCounterFactory.Categories">
            <summary>
            Перечень дочерних категорий
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.CompositeCounters.CompositeCounterFactory.WrappedFactories">
            <summary>
            Список оборачиваемых фабрик
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.CompositeCounters.Counters.CompositeAverageCountCounter">
            <summary>
            Счётчик замера среднего числа значений для CompositeCounters
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.AverageCountCounter">
            <summary>
            Счётчик замера среднего числа значений
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.Counter">
            <summary>
            Базовый класс счётчика
            </summary>
        </member>
        <member name="F:Libs.PerformanceCounters.Counter.FailureNum">
            <summary>
            Значение счётчика в случае ошибки (для числовых)
            </summary>
        </member>
        <member name="F:Libs.PerformanceCounters.Counter.FailureTime">
            <summary>
            Значение счётчика в случае ошибки (для временных)
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.Counter.#ctor(System.String,System.String,Libs.PerformanceCounters.CounterTypes)">
            <summary>
            Конструктор Counter
            </summary>
            <param name="name">Имя счётчика</param>
            <param name="description">Описание счётчика</param>
            <param name="type">Тип счётчика</param>
        </member>
        <member name="M:Libs.PerformanceCounters.Counter.Reset">
            <summary>
            Сброс значений счётчика
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.Counter.ToString">
            <summary>
            Преобразование в строку с информацией
            </summary>
            <returns>Строка</returns>
        </member>
        <member name="P:Libs.PerformanceCounters.Counter.Name">
            <summary>
            Имя счётчика
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.Counter.Description">
            <summary>
            Описание счётчика
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.Counter.Type">
            <summary>
            Тип счётчика
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.AverageCountCounter.#ctor(System.String,System.String)">
            <summary>
            Конструктор AverageCountCounter
            </summary>
            <param name="name">Имя</param>
            <param name="description">Описание</param>
        </member>
        <member name="M:Libs.PerformanceCounters.AverageCountCounter.RegisterValue(System.Int64)">
            <summary>
            Зарегистрировать измерение
            </summary>
            <param name="value">Новое значение</param>
        </member>
        <member name="M:Libs.PerformanceCounters.AverageCountCounter.Reset">
            <summary>
            Сброс значений счётчика
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.AverageCountCounter.ToString">
            <summary>
            Преобразование в строку с информацией
            </summary>
            <returns>Строка</returns>
        </member>
        <member name="P:Libs.PerformanceCounters.AverageCountCounter.CurrentValue">
            <summary>
            Текущее значение
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.CompositeCounters.Counters.CompositeAverageCountCounter.CreateDescriptor(System.String,System.String)">
            <summary>
            Метод создания дескриптора для CompositeAverageCountCounter
            </summary>
            <param name="name">Имя счётчика</param>
            <param name="description">Описание счётчика</param>
            <returns>Дескриптор</returns>
        </member>
        <member name="F:Libs.PerformanceCounters.CompositeCounters.Counters.CompositeAverageCountCounter._wrappedCounters">
            <summary>
            Оборачиваемые счётчики
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.CompositeCounters.Counters.CompositeAverageCountCounter.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{Libs.PerformanceCounters.AverageCountCounter})">
            <summary>
            Конструктор CompositeAverageCountCounter
            </summary>
            <param name="name">Имя счётчика</param>
            <param name="description">Описание счётчика</param>
            <param name="counters">Оборачиваемые счётчики</param>
        </member>
        <member name="M:Libs.PerformanceCounters.CompositeCounters.Counters.CompositeAverageCountCounter.RegisterValue(System.Int64)">
            <summary>
            Зарегистрировать измерение
            </summary>
            <param name="value">Новое значение</param>
        </member>
        <member name="M:Libs.PerformanceCounters.CompositeCounters.Counters.CompositeAverageCountCounter.Reset">
            <summary>
            Сброс значения счётчика
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.CompositeCounters.Counters.CompositeAverageCountCounter.CurrentValue">
            <summary>
            Текущее значение
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.CompositeCounters.Counters.CompositeAverageCountCounter.Descriptor">
            <summary>
            Дескриптор для счётчика CompositeAverageCountCounter
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.CompositeCounters.Counters.CompositeCounterDescriptor">
            <summary>
            Дескриптор счётчика для его создания
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.CompositeCounters.Counters.CompositeCounterDescriptor.#ctor(System.String,System.String,Libs.PerformanceCounters.CounterTypes)">
            <summary>
            Конструктор CompositeCounterDescriptor
            </summary>
            <param name="name">Имя счётчика</param>
            <param name="description">Описание счётчика</param>
            <param name="type">Тип счётчика</param>
        </member>
        <member name="M:Libs.PerformanceCounters.CompositeCounters.Counters.CompositeCounterDescriptor.CreateCounter(System.Collections.Generic.IEnumerable{Libs.PerformanceCounters.Counter})">
            <summary>
            Метод создания счётчика из дескриптора
            </summary>
            <param name="counters">Оборачиваемые счётчики</param>
            <returns>Созданный счётчик</returns>
        </member>
        <member name="P:Libs.PerformanceCounters.CompositeCounters.Counters.CompositeCounterDescriptor.Name">
            <summary>
            Имя счётчика
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.CompositeCounters.Counters.CompositeCounterDescriptor.Description">
            <summary>
            Описание счётчика
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.CompositeCounters.Counters.CompositeCounterDescriptor.Type">
            <summary>
            Тип счётчика
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.CompositeCounters.Counters.CompositeAverageCountCounter.Descriptor.#ctor(System.String,System.String)">
            <summary>
            Конструктор Descriptor
            </summary>
            <param name="name">Имя счётчика</param>
            <param name="description">Описание счётчика</param>
        </member>
        <member name="M:Libs.PerformanceCounters.CompositeCounters.Counters.CompositeAverageCountCounter.Descriptor.CreateCounter(System.Collections.Generic.IEnumerable{Libs.PerformanceCounters.Counter})">
            <summary>
            Метод создания счётчика из дескриптора
            </summary>
            <param name="counters">Оборачиваемые счётчики</param>
            <returns>Созданный счётчик</returns>
        </member>
        <member name="T:Libs.PerformanceCounters.CompositeCounters.Counters.CompositeAverageTimeCounter">
            <summary>
            Счётчик среднего времени для CompositeCounters
            </summary> 
        </member>
        <member name="T:Libs.PerformanceCounters.AverageTimeCounter">
            <summary>
            Счётчик среднего времени
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.ITimeCounter">
            <summary>
            Интерфейс счётчика времени
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.ITimeCounter.RegisterMeasurement(System.TimeSpan)">
            <summary>
            Зарегистрировать измерение времени
            </summary>
            <param name="period">Период времени</param>
        </member>
        <member name="M:Libs.PerformanceCounters.AverageTimeCounter.#ctor(System.String,System.String)">
            <summary>
            Конструктор AverageTimeCounter
            </summary>
            <param name="name">Имя</param>
            <param name="description">Описание</param>
        </member>
        <member name="M:Libs.PerformanceCounters.AverageTimeCounter.StartNew">
            <summary>
            Запуск нового таймера
            </summary>
            <returns>Таймер</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.AverageTimeCounter.RegisterMeasurement(System.TimeSpan)">
            <summary>
            Зарегистрировать измерение
            </summary>
            <param name="period">Период</param>
        </member>
        <member name="M:Libs.PerformanceCounters.AverageTimeCounter.Reset">
            <summary>
            Сброс значений счётчика
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.AverageTimeCounter.ToString">
            <summary>
            Преобразование в строку с информацией
            </summary>
            <returns>Строка</returns>
        </member>
        <member name="P:Libs.PerformanceCounters.AverageTimeCounter.CurrentValue">
            <summary>
            Текущее значение
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.CompositeCounters.Counters.CompositeAverageTimeCounter.CreateDescriptor(System.String,System.String)">
            <summary>
            Метод создания дескриптора для CompositeAverageTimeCounter
            </summary>
            <param name="name">Имя счётчика</param>
            <param name="description">Описание счётчика</param>
            <returns>Дескриптор</returns>
        </member>
        <member name="F:Libs.PerformanceCounters.CompositeCounters.Counters.CompositeAverageTimeCounter._wrappedCounters">
            <summary>
            Оборачиваемые счётчики
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.CompositeCounters.Counters.CompositeAverageTimeCounter.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{Libs.PerformanceCounters.AverageTimeCounter})">
            <summary>
            Конструктор CompositeAverageTimeCounter
            </summary>
            <param name="name">Имя счётчика</param>
            <param name="description">Описание счётчика</param>
            <param name="counters">Оборачиваемые счётчики</param>
        </member>
        <member name="M:Libs.PerformanceCounters.CompositeCounters.Counters.CompositeAverageTimeCounter.RegisterMeasurement(System.TimeSpan)">
            <summary>
            Зарегистрировать измерение
            </summary>
            <param name="period">Период</param>
        </member>
        <member name="M:Libs.PerformanceCounters.CompositeCounters.Counters.CompositeAverageTimeCounter.Reset">
            <summary>
            Сброс значения счётчика
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.CompositeCounters.Counters.CompositeAverageTimeCounter.CurrentValue">
            <summary>
            Текущее значение
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.CompositeCounters.Counters.CompositeAverageTimeCounter.Descriptor">
            <summary>
            Дескриптор для счётчика CompositeAverageTimeCounter
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.CompositeCounters.Counters.CompositeAverageTimeCounter.Descriptor.#ctor(System.String,System.String)">
            <summary>
            Конструктор Descriptor
            </summary>
            <param name="name">Имя счётчика</param>
            <param name="description">Описание счётчика</param>
        </member>
        <member name="M:Libs.PerformanceCounters.CompositeCounters.Counters.CompositeAverageTimeCounter.Descriptor.CreateCounter(System.Collections.Generic.IEnumerable{Libs.PerformanceCounters.Counter})">
            <summary>
            Метод создания счётчика из дескриптора
            </summary>
            <param name="counters">Оборачиваемые счётчики</param>
            <returns>Созданный счётчик</returns>
        </member>
        <member name="T:Libs.PerformanceCounters.CompositeCounters.Counters.CompositeElapsedTimeCounter">
            <summary>
            Счётчик, который показывает полное время от начала работы компонента или процесса, для CompositeCounters
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.ElapsedTimeCounter">
            <summary>
            Счётчик, который показывает полное время от начала работы компонента или процесса
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.ElapsedTimeCounter.#ctor(System.String,System.String)">
            <summary>
            Конструктор ElapsedTimeCounter
            </summary>
            <param name="name">Имя</param>
            <param name="description">Описание</param>
        </member>
        <member name="M:Libs.PerformanceCounters.ElapsedTimeCounter.ToString">
            <summary>
            Преобразование в строку с информацией
            </summary>
            <returns>Строка</returns>
        </member>
        <member name="P:Libs.PerformanceCounters.ElapsedTimeCounter.CurrentValue">
            <summary>
            Текущее время, которое прошло с момента запуска
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.CompositeCounters.Counters.CompositeElapsedTimeCounter.CreateDescriptor(System.String,System.String)">
            <summary>
            Метод создания дескриптора для CompositeElapsedTimeCounter
            </summary>
            <param name="name">Имя счётчика</param>
            <param name="description">Описание счётчика</param>
            <returns>Дескриптор</returns>
        </member>
        <member name="F:Libs.PerformanceCounters.CompositeCounters.Counters.CompositeElapsedTimeCounter._wrappedCounters">
            <summary>
            Оборачиваемые счётчики
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.CompositeCounters.Counters.CompositeElapsedTimeCounter.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{Libs.PerformanceCounters.ElapsedTimeCounter})">
            <summary>
            Конструктор CompositeElapsedTimeCounter
            </summary>
            <param name="name">Имя счётчика</param>
            <param name="description">Описание счётчика</param>
            <param name="counters">Оборачиваемые счётчики</param>
        </member>
        <member name="M:Libs.PerformanceCounters.CompositeCounters.Counters.CompositeElapsedTimeCounter.Reset">
            <summary>
            Сбросить прошедшее время
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.CompositeCounters.Counters.CompositeElapsedTimeCounter.CurrentValue">
            <summary>
            Текущее время, которое прошло с момента запуска
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.CompositeCounters.Counters.CompositeElapsedTimeCounter.Descriptor">
            <summary>
            Дескриптор для счётчика CompositeElapsedTimeCounter
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.CompositeCounters.Counters.CompositeElapsedTimeCounter.Descriptor.#ctor(System.String,System.String)">
            <summary>
            Конструктор Descriptor
            </summary>
            <param name="name">Имя счётчика</param>
            <param name="description">Описание счётчика</param>
        </member>
        <member name="M:Libs.PerformanceCounters.CompositeCounters.Counters.CompositeElapsedTimeCounter.Descriptor.CreateCounter(System.Collections.Generic.IEnumerable{Libs.PerformanceCounters.Counter})">
            <summary>
            Метод создания счётчика из дескриптора
            </summary>
            <param name="counters">Оборачиваемые счётчики</param>
            <returns>Созданный счётчик</returns>
        </member>
        <member name="T:Libs.PerformanceCounters.CompositeCounters.Counters.CompositeMomentTimeCounter">
            <summary>
            Счётчик моментального времени для CompositeCounters
            </summary> 
        </member>
        <member name="T:Libs.PerformanceCounters.MomentTimeCounter">
            <summary>
            Счётчик моментального времени / одноразовой операции
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.MomentTimeCounter.#ctor(System.String,System.String)">
            <summary>
            Конструктор MomentTimeCounter
            </summary>
            <param name="name">Имя</param>
            <param name="description">Описание</param>
        </member>
        <member name="M:Libs.PerformanceCounters.MomentTimeCounter.StartNew">
            <summary>
            Запуск нового таймера
            </summary>
            <returns>Таймер</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.MomentTimeCounter.RegisterMeasurement(System.TimeSpan)">
            <summary>
            Зарегистрировать измерение
            </summary>
            <param name="period">Период</param>
        </member>
        <member name="M:Libs.PerformanceCounters.MomentTimeCounter.Reset">
            <summary>
            Сброс значений счётчика
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.MomentTimeCounter.ToString">
            <summary>
            Преобразование в строку с информацией
            </summary>
            <returns>Строка</returns>
        </member>
        <member name="P:Libs.PerformanceCounters.MomentTimeCounter.CurrentValue">
            <summary>
            Текущее значение
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.CompositeCounters.Counters.CompositeMomentTimeCounter.CreateDescriptor(System.String,System.String)">
            <summary>
            Метод создания дескриптора для CompositeMomentTimeCounter
            </summary>
            <param name="name">Имя счётчика</param>
            <param name="description">Описание счётчика</param>
            <returns>Дескриптор</returns>
        </member>
        <member name="F:Libs.PerformanceCounters.CompositeCounters.Counters.CompositeMomentTimeCounter._wrappedCounters">
            <summary>
            Оборачиваемые счётчики
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.CompositeCounters.Counters.CompositeMomentTimeCounter.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{Libs.PerformanceCounters.MomentTimeCounter})">
            <summary>
            Конструктор CompositeMomentTimeCounter
            </summary>
            <param name="name">Имя счётчика</param>
            <param name="description">Описание счётчика</param>
            <param name="counters">Оборачиваемые счётчики</param>
        </member>
        <member name="M:Libs.PerformanceCounters.CompositeCounters.Counters.CompositeMomentTimeCounter.RegisterMeasurement(System.TimeSpan)">
            <summary>
            Зарегистрировать измерение
            </summary>
            <param name="period">Период</param>
        </member>
        <member name="M:Libs.PerformanceCounters.CompositeCounters.Counters.CompositeMomentTimeCounter.Reset">
            <summary>
            Сброс значения счётчика
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.CompositeCounters.Counters.CompositeMomentTimeCounter.CurrentValue">
            <summary>
            Текущее значение
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.CompositeCounters.Counters.CompositeMomentTimeCounter.Descriptor">
            <summary>
            Дескриптор для счётчика CompositeMomentTimeCounter
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.CompositeCounters.Counters.CompositeMomentTimeCounter.Descriptor.#ctor(System.String,System.String)">
            <summary>
            Конструктор Descriptor
            </summary>
            <param name="name">Имя счётчика</param>
            <param name="description">Описание счётчика</param>
        </member>
        <member name="M:Libs.PerformanceCounters.CompositeCounters.Counters.CompositeMomentTimeCounter.Descriptor.CreateCounter(System.Collections.Generic.IEnumerable{Libs.PerformanceCounters.Counter})">
            <summary>
            Метод создания счётчика из дескриптора
            </summary>
            <param name="counters">Оборачиваемые счётчики</param>
            <returns>Созданный счётчик</returns>
        </member>
        <member name="T:Libs.PerformanceCounters.CompositeCounters.Counters.CompositeNumberOfItemsCounter">
            <summary>
            Счетчик мгновенного значения, показывающий последнее наблюдавшееся значение для CompositeCounters
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.NumberOfItemsCounter">
            <summary>
            Счетчик мгновенного значения, показывающий последнее наблюдавшееся значение
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.NumberOfItemsCounter.#ctor(System.String,System.String)">
            <summary>
            Конструктор NumberOfItemsCounter
            </summary>
            <param name="name">Имя счётчика</param>
            <param name="description">Описание счётчика</param>
        </member>
        <member name="M:Libs.PerformanceCounters.NumberOfItemsCounter.Decrement">
            <summary>
            Уменьшить значение на 1
            </summary>
            <returns>Текущее значение или Counter.FailureNum</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.NumberOfItemsCounter.DecrementBy(System.Int64)">
            <summary>
            Уменьшить значение на "value"
            </summary>
            <param name="value">Значение, на которое уменьшаем</param>
            <returns>Текущее значение или Counter.FailureNum</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.NumberOfItemsCounter.Increment">
            <summary>
            Увеличить значение на 1
            </summary>
            <returns>Текущее значение или Counter.FailureNum</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.NumberOfItemsCounter.IncrementBy(System.Int64)">
            <summary>
            Увеличить значение на "value"
            </summary>
            <param name="value">Значение, на которое увеличиваем</param>
            <returns>Текущее значение или Counter.FailureNum</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.NumberOfItemsCounter.SetValue(System.Int64)">
            <summary>
            Задать значение
            </summary>
            <param name="value">Новое значение</param>
        </member>
        <member name="M:Libs.PerformanceCounters.NumberOfItemsCounter.Reset">
            <summary>
            Сброс значения счётчика
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.NumberOfItemsCounter.ToString">
            <summary>
            Преобразование в строку с информацией
            </summary>
            <returns>Строка</returns>
        </member>
        <member name="P:Libs.PerformanceCounters.NumberOfItemsCounter.CurrentValue">
            <summary>
            Получает текущее значение счетчика производительности
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.CompositeCounters.Counters.CompositeNumberOfItemsCounter.CreateDescriptor(System.String,System.String)">
            <summary>
            Метод создания дескриптора для CompositeNumberOfItemsCounter
            </summary>
            <param name="name">Имя счётчика</param>
            <param name="description">Описание счётчика</param>
            <returns>Дескриптор</returns>
        </member>
        <member name="F:Libs.PerformanceCounters.CompositeCounters.Counters.CompositeNumberOfItemsCounter._wrappedCounters">
            <summary>
            Оборачиваемые счётчики
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.CompositeCounters.Counters.CompositeNumberOfItemsCounter.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{Libs.PerformanceCounters.NumberOfItemsCounter})">
            <summary>
            Конструктор CompositeNumberOfItemsCounter
            </summary>
            <param name="name">Имя счётчика</param>
            <param name="description">Описание счётчика</param>
            <param name="counters">Оборачиваемые счётчики</param>
        </member>
        <member name="M:Libs.PerformanceCounters.CompositeCounters.Counters.CompositeNumberOfItemsCounter.Decrement">
            <summary>
            Уменьшить значение на 1
            </summary>
            <returns>Текущее значение или Counter.FailureNum</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.CompositeCounters.Counters.CompositeNumberOfItemsCounter.DecrementBy(System.Int64)">
            <summary>
            Уменьшить значение на "value"
            </summary>
            <param name="value">Значение, на которое уменьшаем</param>
            <returns>Текущее значение или Counter.FailureNum</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.CompositeCounters.Counters.CompositeNumberOfItemsCounter.Increment">
            <summary>
            Увеличить значение на 1
            </summary>
            <returns>Текущее значение или Counter.FailureNum</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.CompositeCounters.Counters.CompositeNumberOfItemsCounter.IncrementBy(System.Int64)">
            <summary>
            Увеличить значение на "value"
            </summary>
            <param name="value">Значение, на которое увеличиваем</param>
            <returns>Текущее значение или Counter.FailureNum</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.CompositeCounters.Counters.CompositeNumberOfItemsCounter.SetValue(System.Int64)">
            <summary>
            Задать значение
            </summary>
            <param name="value">Новое значение</param>
        </member>
        <member name="P:Libs.PerformanceCounters.CompositeCounters.Counters.CompositeNumberOfItemsCounter.CurrentValue">
            <summary>
            Получает текущее значение счетчика производительности
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.CompositeCounters.Counters.CompositeNumberOfItemsCounter.Descriptor">
            <summary>
            Дескриптор для счётчика CompositeNumberOfItemsCounter
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.CompositeCounters.Counters.CompositeNumberOfItemsCounter.Descriptor.#ctor(System.String,System.String)">
            <summary>
            Конструктор Descriptor
            </summary>
            <param name="name">Имя счётчика</param>
            <param name="description">Описание счётчика</param>
        </member>
        <member name="M:Libs.PerformanceCounters.CompositeCounters.Counters.CompositeNumberOfItemsCounter.Descriptor.CreateCounter(System.Collections.Generic.IEnumerable{Libs.PerformanceCounters.Counter})">
            <summary>
            Метод создания счётчика из дескриптора
            </summary>
            <param name="counters">Оборачиваемые счётчики</param>
            <returns>Созданный счётчик</returns>
        </member>
        <member name="T:Libs.PerformanceCounters.CompositeCounters.Counters.CompositeOperationsPerSecondCounter">
            <summary>
            Счётчик числа операций в секунду для CompositeCounters
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.OperationsPerSecondCounter">
            <summary>
            Счётчик числа операций в секунду
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.OperationsPerSecondCounter.#ctor(System.String,System.String)">
            <summary>
            Конструктор OperationsPerSecondCounter
            </summary>
            <param name="name">Имя счётчика</param>
            <param name="description">Описание счётчика</param>
        </member>
        <member name="M:Libs.PerformanceCounters.OperationsPerSecondCounter.OperationFinished">
            <summary>
            Закончилась 1 операция
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.OperationsPerSecondCounter.OperationFinished(System.Int32)">
            <summary>
            Закончилось несколько операций
            </summary>
            <param name="operationCount">Число операций</param>
        </member>
        <member name="M:Libs.PerformanceCounters.OperationsPerSecondCounter.Reset">
            <summary>
            Сброс значения счётчика
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.OperationsPerSecondCounter.ToString">
            <summary>
            Преобразование в строку с информацией
            </summary>
            <returns>Строка</returns>
        </member>
        <member name="P:Libs.PerformanceCounters.OperationsPerSecondCounter.CurrentValue">
            <summary>
            Текущее значение
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.CompositeCounters.Counters.CompositeOperationsPerSecondCounter.CreateDescriptor(System.String,System.String)">
            <summary>
            Метод создания дескриптора для CompositeOperationsPerSecondCounter
            </summary>
            <param name="name">Имя счётчика</param>
            <param name="description">Описание счётчика</param>
            <returns>Дескриптор</returns>
        </member>
        <member name="F:Libs.PerformanceCounters.CompositeCounters.Counters.CompositeOperationsPerSecondCounter._wrappedCounters">
            <summary>
            Оборачиваемые счётчики
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.CompositeCounters.Counters.CompositeOperationsPerSecondCounter.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{Libs.PerformanceCounters.OperationsPerSecondCounter})">
            <summary>
            Конструктор CompositeOperationsPerSecondCounter
            </summary>
            <param name="name">Имя счётчика</param>
            <param name="description">Описание счётчика</param>
            <param name="counters">Оборачиваемые счётчики</param>
        </member>
        <member name="M:Libs.PerformanceCounters.CompositeCounters.Counters.CompositeOperationsPerSecondCounter.OperationFinished">
            <summary>
            Закончилась 1 операция
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.CompositeCounters.Counters.CompositeOperationsPerSecondCounter.OperationFinished(System.Int32)">
            <summary>
            Закончилось несколько операций
            </summary>
            <param name="operationCount">Число операций</param>
        </member>
        <member name="M:Libs.PerformanceCounters.CompositeCounters.Counters.CompositeOperationsPerSecondCounter.Reset">
            <summary>
            Сброс значения счётчика
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.CompositeCounters.Counters.CompositeOperationsPerSecondCounter.CurrentValue">
            <summary>
            Текущее значение
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.CompositeCounters.Counters.CompositeOperationsPerSecondCounter.Descriptor">
            <summary>
            Дескриптор для счётчика CompositeOperationsPerSecondCounter
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.CompositeCounters.Counters.CompositeOperationsPerSecondCounter.Descriptor.#ctor(System.String,System.String)">
            <summary>
            Конструктор Descriptor
            </summary>
            <param name="name">Имя счётчика</param>
            <param name="description">Описание счётчика</param>
        </member>
        <member name="M:Libs.PerformanceCounters.CompositeCounters.Counters.CompositeOperationsPerSecondCounter.Descriptor.CreateCounter(System.Collections.Generic.IEnumerable{Libs.PerformanceCounters.Counter})">
            <summary>
            Метод создания счётчика из дескриптора
            </summary>
            <param name="counters">Оборачиваемые счётчики</param>
            <returns>Созданный счётчик</returns>
        </member>
        <member name="T:Libs.PerformanceCounters.Configuration.Configurator">
            <summary>
            Загрузка конфигурации счётчиков
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.Configuration.Configurator.LoadConfiguration(System.String)">
            <summary>
            Функция для загрузки конфигурации счётчиков
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.Configuration.Configurator.LoadConfiguration(System.String,System.String)">
            <summary>
            Функция для загрузки конфигурации счётчиков
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.Configuration.PerfCountersAppConfig.AppConfigLoader.LoadSection(System.String)">
            <summary>
            Возвращает конфигурацию счётчиков из конфигурационного файла
            </summary>
            <param name="sectionName">Имя конфигурационной секции в AppConfig </param>
            <returns>Счётчики</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.Configuration.PerfCountersAppConfig.AppConfigLoader.LoadSection(System.String,System.String)">
            <summary>
            Возвращает конфигурацию счётчиков из конфигурационного файла
            </summary>
            <param name="sectionGroup">Имя группы секций в AppConfig </param>
            <param name="sectionName">Имя конфигурационной секции в AppConfig </param>
            <returns>Счётчики</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.Configuration.PerfCountersAppConfig.AppConfigLoader.GetConfiguration(System.String)">
            <summary>
            Возвращает конфигурацию счётчиков из конфигурационного файла
            </summary>
            <param name="sectionName">Имя конфигурационной секции в AppConfig </param>
            <returns>Счётчики</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.Configuration.PerfCountersAppConfig.AppConfigLoader.GetConfiguration(System.String,System.String)">
            <summary>
            Возвращает конфигурацию счётчиков из конфигурационного файла
            </summary>
            <param name="sectionGroupName">Имя группы секций в AppConfig </param>
            <param name="sectionName">Имя конфигурационной секции в AppConfig </param>
            <returns>Счётчики</returns>
        </member>
        <member name="T:Libs.PerformanceCounters.Configuration.PerfCountersConfiguration">
            <summary>
            Базовый класс для конфигураций счётчиков
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.Configuration.PerfCountersConfiguration.#ctor(Libs.PerformanceCounters.Configuration.PerfCountersTypeEnum)">
            <summary>
            Конструктор PerfCountersConfiguration
            </summary>
            <param name="type">Тип счётчиков</param>
        </member>
        <member name="P:Libs.PerformanceCounters.Configuration.PerfCountersConfiguration.CounterType">
            <summary>
            Тип счётчиков
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.Configuration.CompositeCountersConfiguration">
            <summary>
            Конфигурация для композитных счётчиков
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.Configuration.CompositeCountersConfiguration.#ctor(System.Collections.Generic.IEnumerable{Libs.PerformanceCounters.Configuration.PerfCountersConfiguration})">
            <summary>
            Конструктор CompositeCountersConfiguration
            </summary>
            <param name="wrappedCounters">Конфигурации для агрегируемых счётчиков</param>
        </member>
        <member name="M:Libs.PerformanceCounters.Configuration.CompositeCountersConfiguration.#ctor">
            <summary>
            Конструктор CompositeCountersConfiguration
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.Configuration.CompositeCountersConfiguration.WrappedCounters">
            <summary>
            Конфигурации агрегируемых счётчиков
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.Configuration.NullCountersConfiguration">
            <summary>
            Конфигурация для NullCounters
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.Configuration.NullCountersConfiguration.#ctor">
            <summary>
            Конструктор NullCountersConfiguration
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.Configuration.InternalCountersConfiguration">
            <summary>
            Конфигурация для InternalCounters
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.Configuration.InternalCountersConfiguration.#ctor">
            <summary>
            Конструктор InternalCountersConfiguration
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.Configuration.WinCountersConfiguration">
            <summary>
            Конфигурация для счётчиков Windows
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.Configuration.WinCountersConfiguration.#ctor(Libs.PerformanceCounters.WinCounters.WinCountersInstantiationMode,System.String,System.String,System.Boolean,Libs.PerformanceCounters.WinCounters.WinCountersPreferedBitness,System.Boolean)">
            <summary>
            Конструктор WinCountersConfiguration
            </summary>
            <param name="instMode">Режим инстанцирования счётчиков</param>
            <param name="categoryNamePrefix">Фиксированный префикс категорий</param>
            <param name="machineName">Имя машины (текущая - '.')</param>
            <param name="readOnlyCounters">Создавать счётчики только для чтения</param>
            <param name="preferedBitness">Предпочитаемая разрядность счётчиков</param>
            <param name="loadExistedInstancesForMultiInstCat">Загружать ли существующие инстансы из счётчиков Windows</param>
        </member>
        <member name="M:Libs.PerformanceCounters.Configuration.WinCountersConfiguration.#ctor(Libs.PerformanceCounters.WinCounters.WinCountersInstantiationMode,System.String,System.String,System.Boolean)">
            <summary>
            Конструктор WinCountersConfiguration
            </summary>
            <param name="instMode">Режим инстанцирования счётчиков</param>
            <param name="categoryNamePrefix">Фиксированный префикс категорий</param>
            <param name="machineName">Имя машины (текущая - '.')</param>
            <param name="readOnlyCounters">Создавать счётчики только для чтения</param>
        </member>
        <member name="M:Libs.PerformanceCounters.Configuration.WinCountersConfiguration.#ctor(Libs.PerformanceCounters.WinCounters.WinCountersInstantiationMode,System.String)">
            <summary>
            Конструктор WinCountersConfiguration
            </summary>
            <param name="instMode">Режим инстанцирования счётчиков</param>
            <param name="categoryNamePrefix">Фиксированный префикс категорий</param>
        </member>
        <member name="M:Libs.PerformanceCounters.Configuration.WinCountersConfiguration.#ctor(Libs.PerformanceCounters.WinCounters.WinCountersInstantiationMode)">
            <summary>
            Конструктор WinCountersConfiguration
            </summary>
            <param name="instMode">Режим инстанцирования счётчиков</param>
        </member>
        <member name="M:Libs.PerformanceCounters.Configuration.WinCountersConfiguration.#ctor">
            <summary>
            Конструктор WinCountersConfiguration
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.Configuration.WinCountersConfiguration.InstantiationMode">
            <summary>
            Режим инстанцирования счётчиков
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.Configuration.WinCountersConfiguration.CategoryNamePrefix">
            <summary>
            Фиксированный префикс категорий
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.Configuration.WinCountersConfiguration.MachineName">
            <summary>
            Имя машины (текущая - '.')
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.Configuration.WinCountersConfiguration.IsReadOnlyCounters">
            <summary>
            Создавать счётчики только для чтения
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.Configuration.WinCountersConfiguration.PreferedBitness">
            <summary>
            Предпочитаемая разрядность счётчиков
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.Configuration.WinCountersConfiguration.LoadExistedInstancesForMultiInstCategories">
            <summary>
            Загружать ли существующие инстансы из счётчиков Windows
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.Configuration.NetCountersConfiguration">
            <summary>
            Конфигурация для сетевых счётчиков
            </summary>
        </member>
        <member name="F:Libs.PerformanceCounters.Configuration.NetCountersConfiguration.DefaultPort">
            <summary>
            Стандартный порт сервера счётчиков
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.Configuration.NetCountersConfiguration.#ctor(System.Int32,System.String,System.Int32)">
            <summary>
            Конструктор NetCountersConfiguration
            </summary>
            <param name="distributionPeriodMs">Период между рассылкой значений счётчиков</param>
            <param name="serverAddress">Адрес сервера</param>
            <param name="serverPort">Порт сервера</param>
        </member>
        <member name="M:Libs.PerformanceCounters.Configuration.NetCountersConfiguration.#ctor(System.Int32,System.String)">
            <summary>
            Конструктор NetCountersConfiguration
            </summary>
            <param name="distributionPeriodMs">Период между рассылкой значений счётчиков</param>
            <param name="serverAddress">Адрес сервера</param>
        </member>
        <member name="M:Libs.PerformanceCounters.Configuration.NetCountersConfiguration.#ctor(System.String)">
            <summary>
            Конструктор NetCountersConfiguration
            </summary>
            <param name="serverAddress">Адрес сервера</param>
        </member>
        <member name="P:Libs.PerformanceCounters.Configuration.NetCountersConfiguration.DistributionPeriodMs">
            <summary>
            Период между рассылкой значений счётчиков
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.Configuration.NetCountersConfiguration.ServerAddress">
            <summary>
            Адрес сервера
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.Configuration.NetCountersConfiguration.ServerPort">
            <summary>
            Порт сервера
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.Configuration.GraphiteCountersConfiguration">
            <summary>
            Конфигурация для сетевых счётчиков Graphite
            </summary>
        </member>
        <member name="F:Libs.PerformanceCounters.Configuration.GraphiteCountersConfiguration.DefaultPort">
            <summary>
            Стандартный порт сервера счётчиков
            </summary>
        </member>
        <member name="F:Libs.PerformanceCounters.Configuration.GraphiteCountersConfiguration.DefaultNamePrefix">
            <summary>
            Стандартный префикс имени счётчиков
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.Configuration.GraphiteCountersConfiguration.#ctor(System.Int32,System.String,System.String,System.Int32)">
            <summary>
            Конструктор GraphiteCountersConfiguration
            </summary>
            <param name="distributionPeriodMs">Период между рассылкой значений счётчиков</param>
            <param name="namePrefixFormatString">Строка с префиксом имени всех счётчиков</param>
            <param name="serverAddress">Адрес сервера</param>
            <param name="serverPort">Порт сервера</param>
        </member>
        <member name="M:Libs.PerformanceCounters.Configuration.GraphiteCountersConfiguration.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Конструктор GraphiteCountersConfiguration
            </summary>
            <param name="distributionPeriodMs">Период между рассылкой значений счётчиков</param>
            <param name="namePrefixFormatString">Строка с префиксом имени всех счётчиков</param>
            <param name="serverAddress">Адрес сервера</param>
        </member>
        <member name="M:Libs.PerformanceCounters.Configuration.GraphiteCountersConfiguration.#ctor(System.Int32,System.String)">
            <summary>
            Конструктор GraphiteCountersConfiguration
            </summary>
            <param name="distributionPeriodMs">Период между рассылкой значений счётчиков</param>
            <param name="serverAddress">Адрес сервера</param>
        </member>
        <member name="M:Libs.PerformanceCounters.Configuration.GraphiteCountersConfiguration.#ctor(System.String)">
            <summary>
            Конструктор GraphiteCountersConfiguration
            </summary>
            <param name="serverAddress">Адрес сервера</param>
        </member>
        <member name="P:Libs.PerformanceCounters.Configuration.GraphiteCountersConfiguration.DistributionPeriodMs">
            <summary>
            Период между рассылкой значений счётчиков
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.Configuration.GraphiteCountersConfiguration.NamePrefixFormatString">
            <summary>
            Строка с префиксом имени всех счётчиков
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.Configuration.GraphiteCountersConfiguration.ServerAddress">
            <summary>
            Адрес сервера
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.Configuration.GraphiteCountersConfiguration.ServerPort">
            <summary>
            Порт сервера
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.Configuration.PerfCountersTypeEnum">
            <summary>
            Тип счётчиков
            </summary>
        </member>
        <member name="F:Libs.PerformanceCounters.Configuration.PerfCountersTypeEnum.NullCounters">
            <summary>
            Пустые счётчики (не считают)
            </summary>
        </member>
        <member name="F:Libs.PerformanceCounters.Configuration.PerfCountersTypeEnum.InternalCounters">
            <summary>
            Внутренние счётчики (доступны в рамках приложения)
            </summary>
        </member>
        <member name="F:Libs.PerformanceCounters.Configuration.PerfCountersTypeEnum.WinCounters">
            <summary>
            Счётчики Windows
            </summary>
        </member>
        <member name="F:Libs.PerformanceCounters.Configuration.PerfCountersTypeEnum.CompositeCounters">
            <summary>
            Композитные счётчики (агрегируют несколько разных типов)
            </summary>
        </member>
        <member name="F:Libs.PerformanceCounters.Configuration.PerfCountersTypeEnum.NetCounters">
            <summary>
            Сетевые счётчики
            </summary>
        </member>
        <member name="F:Libs.PerformanceCounters.Configuration.PerfCountersTypeEnum.GraphiteCounters">
            <summary>
            Счётчики Graphite
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.PerformanceCountersConfigurationException">
            <summary>
            Ошибка загрузки конфигурации счётчиков
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.PerformanceCountersException">
            <summary>
            Базовый класс исключения для библиотеки счётчиков
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.PerformanceCountersException.#ctor">
            <summary>
            Конструктор PerformanceCountersException
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.PerformanceCountersException.#ctor(System.String)">
            <summary>
            Конструктор PerformanceCountersException
            </summary>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Libs.PerformanceCounters.PerformanceCountersException.#ctor(System.String,System.Exception)">
            <summary>
            Конструктор PerformanceCountersException
            </summary>
            <param name="message">Сообщение об ошибке</param>
            <param name="ex">Внутреннее исключение</param>
        </member>
        <member name="M:Libs.PerformanceCounters.PerformanceCountersException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Конструктор PerformanceCountersException для десериализации
            </summary>
            <param name="info">info</param>
            <param name="context">context</param>
        </member>
        <member name="M:Libs.PerformanceCounters.PerformanceCountersConfigurationException.#ctor">
            <summary>
            Конструктор PerformanceCountersConfigurationException
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.PerformanceCountersConfigurationException.#ctor(System.String)">
            <summary>
            Конструктор PerformanceCountersConfigurationException
            </summary>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Libs.PerformanceCounters.PerformanceCountersConfigurationException.#ctor(System.String,System.Exception)">
            <summary>
            Конструктор PerformanceCountersConfigurationException
            </summary>
            <param name="message">Сообщение об ошибке</param>
            <param name="ex">Внутреннее исключение</param>
        </member>
        <member name="M:Libs.PerformanceCounters.PerformanceCountersConfigurationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Конструктор PerformanceCountersConfigurationException для десериализации
            </summary>
            <param name="info">info</param>
            <param name="context">context</param>
        </member>
        <member name="T:Libs.PerformanceCounters.NetCounters.CountersInfoAggregating.CountersInfoAggregator">
            <summary>
            Сборщик данных о категориях и их счётчиках
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.CountersInfoAggregating.CountersInfoAggregator.Refresh(System.Boolean)">
            <summary>
            Собрать данные по категориям (пересобирает только изменившиеся категории)
            </summary>
            <param name="force">Пересканировать всё полностью</param>
            <returns>Что изменилось</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.CountersInfoAggregating.CountersInfoAggregator.RescanCategories(Libs.PerformanceCounters.NetCounters.Categories.NetEmptyCategory)">
            <summary>
            Пересканирование категорий
            </summary>
            <param name="root">Корневая категория</param>
            <returns>Список описателей категорий</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.CountersInfoAggregating.CountersInfoAggregator.FillCategotyInfo(Libs.PerformanceCounters.Category,Libs.PerformanceCounters.NetCounters.CountersInfoAggregating.CategoryAggregatedInfo,System.Collections.Generic.List{Libs.PerformanceCounters.NetCounters.CountersInfoAggregating.CategoryAggregatedInfo})">
            <summary>
            Заполнить информацию по категории (работает рекурсивно)
            </summary>
            <param name="category">Исходная категория</param>
            <param name="parent">Описатель родительской категории</param>
            <param name="result">Список для заполнения</param>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.CountersInfoAggregating.CountersInfoAggregator.FillInstanceInfo(Libs.PerformanceCounters.NetCounters.CountersInfoAggregating.CategoryAggregatedInfo,System.Collections.Generic.List{Libs.PerformanceCounters.NetCounters.CountersInfoAggregating.InstanceAggregatedInfo})">
            <summary>
            Заполнить информацию по инстансам категории
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.CountersInfoAggregating.CountersInfoAggregator.FillCounterDescriptors(Libs.PerformanceCounters.NetCounters.CountersInfoAggregating.CategoryAggregatedInfo,System.Collections.Generic.List{Libs.PerformanceCounters.NetCounters.CountersInfoAggregating.CounterDescriptorAggregatedInfo})">
            <summary>
            Заполнить список описателей счётчиков в категории
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.CountersInfoAggregating.CountersInfoAggregator.FillCountersInfo(Libs.PerformanceCounters.NetCounters.Categories.NetInstanceInMultiInstanceCategory,System.Collections.Generic.List{Libs.PerformanceCounters.Counter})">
            <summary>
            Заполнить список счётчиков в инстансе
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.CountersInfoAggregating.CountersInfoAggregator.FillCountersInfo(Libs.PerformanceCounters.NetCounters.Categories.NetSingleInstanceCategory,System.Collections.Generic.List{Libs.PerformanceCounters.Counter})">
            <summary>
            Заполнить список счётчиков в singleInstanceCategory
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.GraphiteCounters.CountersValueDistribution.GraphiteCountersPrefixConverter">
            <summary>
            Преобразователь форматной строки префикса
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.GraphiteCounters.CountersValueDistribution.GraphiteCountersPrefixConverter.TransformPrefix(System.String)">
            <summary>
            Преобразовать форматную строку в префикс
            </summary>
            <param name="prefixFormatString">Форматная строка префикса</param>
            <returns>Префикс</returns>
        </member>
        <member name="T:Libs.PerformanceCounters.GraphiteCounters.CountersValueDistribution.GraphiteCountersValueDistributor">
            <summary>
            Рассыльщик значений счётчиков в Graphite
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.NetCounters.CountersValueDistribution.CounterValueDistributorBase">
            <summary>
            Распространитель знаачений счётчиков.
            Рассылает знаения через фиксированный период времени
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.CountersValueDistribution.CounterValueDistributorBase.#ctor(Libs.PerformanceCounters.NetCounters.CountersInfoAggregating.CountersInfoAggregator,System.Int32,System.String)">
            <summary>
            Конструктор CounterValueDistributorBase
            </summary>
            <param name="aggregator">Агрегатор данных счётчиков</param>
            <param name="distributionPeriodMs">Период рассылки</param>
            <param name="name">Имя</param>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.CountersValueDistribution.CounterValueDistributorBase.LogError(System.Exception,System.String)">
            <summary>
            Залогировать ошибку
            </summary>
            <param name="ex">Исключение (если есть)</param>
            <param name="message">Сообщение</param>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.CountersValueDistribution.CounterValueDistributorBase.PerformDistribution(System.Collections.Generic.List{Libs.PerformanceCounters.NetCounters.CountersInfoAggregating.CategoryAggregatedInfo},Libs.PerformanceCounters.NetCounters.CountersInfoAggregating.CountersInfoAggregatorChangeKind,System.Threading.CancellationToken)">
            <summary>
            Выполнить рассылку данных
            </summary>
            <param name="data">Агрегированные данные счётчиков</param>
            <param name="changes">Произошедшие изменения</param>
            <param name="token">Токен отмены</param>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.CountersValueDistribution.CounterValueDistributorBase.Start">
            <summary>
            Запустить
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.CountersValueDistribution.CounterValueDistributorBase.Stop">
            <summary>
            Остановить
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.CountersValueDistribution.CounterValueDistributorBase.Dispose(System.Boolean)">
            <summary>
            Освободить ресурсы
            </summary>
            <param name="isUserCall">Вызвано ли пользователем</param>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.CountersValueDistribution.CounterValueDistributorBase.Dispose">
            <summary>
            Освободить ресурсы
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.NetCounters.CountersValueDistribution.CounterValueDistributorBase.Name">
            <summary>
            Имя
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.NetCounters.CountersValueDistribution.CounterValueDistributorBase.IsStarted">
            <summary>
            Запущен ли
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.GraphiteCounters.CountersValueDistribution.GraphiteCountersValueDistributor.PerformDistribution(System.Collections.Generic.List{Libs.PerformanceCounters.NetCounters.CountersInfoAggregating.CategoryAggregatedInfo},Libs.PerformanceCounters.NetCounters.CountersInfoAggregating.CountersInfoAggregatorChangeKind,System.Threading.CancellationToken)">
            <summary>
            Выполнить рассылку данных
            </summary>
            <param name="data">Агрегированные данные счётчиков</param>
            <param name="changes">Произошедшие изменения</param>
            <param name="token">Токен отмены</param>
        </member>
        <member name="M:Libs.PerformanceCounters.GraphiteCounters.CountersValueDistribution.GraphiteCountersValueDistributor.AddCountersFromCategory(System.String,Libs.PerformanceCounters.NetCounters.CountersInfoAggregating.CategoryAggregatedInfo,System.Collections.Generic.List{Libs.PerformanceCounters.GraphiteCounters.Net.GraphiteCounterData})">
            <summary>
            Добавить все счётчики из категории
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.GraphiteCounters.CountersValueDistribution.GraphiteCountersValueDistributor.AddCountersFromInstance(System.String,Libs.PerformanceCounters.NetCounters.CountersInfoAggregating.InstanceAggregatedInfo,System.Collections.Generic.List{Libs.PerformanceCounters.GraphiteCounters.Net.GraphiteCounterData})">
            <summary>
            Добавить все счётчики из инстанса
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.GraphiteCounters.CountersValueDistribution.GraphiteCountersValueDistributor.ConvertCounterData(System.String,Libs.PerformanceCounters.Counter)">
            <summary>
            Сконвертировать представление счётчика из внутреннего в Graphite
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.GraphiteCounters.GraphiteCounterFactory">
            <summary>
            Фабрика для счётчиков Graphite
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.GraphiteCounters.GraphiteCounterFactory.#ctor(System.Int32,System.String,System.String,System.Int32)">
            <summary>
            Конструктор GraphiteCounterFactory
            </summary>
            <param name="distributionPeriodMs">Период рассылки данных счётчиков</param>
            <param name="namePrefixFormatString">Форматная строка с префиксом имен счётчиков</param>
            <param name="serverAddress">ip-адрес сервера</param>
            <param name="serverPort">Порт сервера</param>
        </member>
        <member name="M:Libs.PerformanceCounters.GraphiteCounters.GraphiteCounterFactory.#ctor(System.Int32,System.String,System.Int32)">
            <summary>
            Конструктор GraphiteCounterFactory
            </summary>
            <param name="distributionPeriodMs">Период рассылки данных счётчиков</param>
            <param name="serverAddress">ip-адрес сервера</param>
            <param name="serverPort">Порт сервера</param>
        </member>
        <member name="M:Libs.PerformanceCounters.GraphiteCounters.GraphiteCounterFactory.#ctor(Libs.PerformanceCounters.Configuration.GraphiteCountersConfiguration)">
            <summary>
            Конструктор GraphiteCounterFactory по конфигурации
            </summary>
            <param name="config">Объект конфига</param>
        </member>
        <member name="M:Libs.PerformanceCounters.GraphiteCounters.GraphiteCounterFactory.CreateEmptyCategory(System.String,System.String)">
            <summary>
            Создание пустой категории
            Для добавления элемента в названии категории - Name.SubName.SubSubName
            </summary>
            <param name="categoryName">Имя категории</param>
            <param name="categoryDescription">Описание категории</param>
            <returns>Категория</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.GraphiteCounters.GraphiteCounterFactory.CreateMultiInstanceCategory(System.String,System.String)">
            <summary>
            Создание категории c многими инстансами
            </summary>
            <param name="categoryName">Имя категории</param>
            <param name="categoryDescription">Описание категории</param>
            <returns>Категория</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.GraphiteCounters.GraphiteCounterFactory.CreateSingleInstanceCategory(System.String,System.String)">
            <summary>
            Создание категории
            </summary>
            <param name="categoryName">Имя категории</param>
            <param name="categoryDescription">Описание категории</param>
            <returns>Категория</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.GraphiteCounters.GraphiteCounterFactory.InitAll">
            <summary>
            Инициализация счетчиков во всех дочерних категориях (создание категорий, инстанцирование самих счетчиков)
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.GraphiteCounters.GraphiteCounterFactory.Dispose(System.Boolean)">
            <summary>
            Внутренний код освобождения ресурсов
            </summary>
            <param name="isUserCall">Вызвано ли пользователем</param>
        </member>
        <member name="P:Libs.PerformanceCounters.GraphiteCounters.GraphiteCounterFactory.Categories">
            <summary>
            Перечень дочерних категорий
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.GraphiteCounters.Net.IGraphiteCountersAPI">
            <summary>
            API для Graphite
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.GraphiteCounters.Net.IGraphiteCountersAPI.SendCounterValues(System.DateTime,System.Collections.Generic.List{Libs.PerformanceCounters.GraphiteCounters.Net.GraphiteCounterData})">
            <summary>
            Переслать значения счётчиков
            </summary>
            <param name="time">Время выборки значений</param>
            <param name="counters">Значения счётчиков</param>
        </member>
        <member name="M:Libs.PerformanceCounters.GraphiteCounters.Net.GraphiteCountersStableNetClient.MarkReconnectedWasProcessed">
            <summary>
            Пометить, что переподключение было обработано внешним кодом
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.GraphiteCounters.Net.GraphiteCountersStableNetClient.SendCounterValues(System.DateTime,System.Collections.Generic.List{Libs.PerformanceCounters.GraphiteCounters.Net.GraphiteCounterData})">
            <summary>
            Переслать значения счётчиков
            </summary>
            <param name="time">Время выборки значений</param>
            <param name="counters">Значения счётчиков</param>
        </member>
        <member name="M:Libs.PerformanceCounters.GraphiteCounters.Net.GraphiteCountersStableNetClient.Start">
            <summary>
            Запустить
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.GraphiteCounters.Net.GraphiteCountersStableNetClient.Stop">
            <summary>
            Остановить
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.GraphiteCounters.Net.GraphiteCountersStableNetClient.RemoteSideName">
            <summary>
            Имя удалённой стороны
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.GraphiteCounters.Net.GraphiteCountersStableNetClient.HasConnection">
            <summary>
            Есть ли в данный момент соединение
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.GraphiteCounters.Net.GraphiteCountersStableNetClient.IsStarted">
            <summary>
            Запущен ли клиент
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.GraphiteCounters.Net.GraphiteCountersStableNetClient.WasReconnected">
            <summary>
            Было ли пересоздано подключение
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.Helpers.LocalMachineInfo.MachineName">
            <summary>
            Имя машины
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.Helpers.LocalMachineInfo.MachineAddress">
            <summary>
            Адрес машины
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.Helpers.LocalMachineInfo.CombinedMachineName">
            <summary>
            Объединённое имя машины
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.Helpers.LocalMachineInfo.ProcessName">
            <summary>
            Имя процесса
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.Helpers.LocalMachineInfo.ProcessId">
            <summary>
            ID процесса
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.Categories.INetCategoriesExtendedInfo.MarkChildCategoriesChangedAsViewed">
            <summary>
            Пометить, что изменение дочерней категории было обработано
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.NetCounters.Categories.INetCategoriesExtendedInfo.IsChildCategoriesChanged">
            <summary>
            Изменился ли список дочерних категории
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.NetCounters.Categories.INetCategoriesExtendedInfo.IsCountersChanged">
            <summary>
            Изменился ли список счётчиков
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.NetCounters.Categories.INetCategoriesExtendedInfo.IsChildInstancesChanged">
            <summary>
            Изменился ли список инстансов
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.NetCounters.Categories.INetCategoriesExtendedInfo.ParentCategory">
            <summary>
            Родительская категория
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.NetCounters.Categories.INetCategoriesExtendedInfo.ChildCategories">
            <summary>
            Перечень дочерних категорий
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.NetCounters.Categories.NetEmptyCategory">
            <summary>
            Пустая категория для NetCounters
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.Categories.NetEmptyCategory.#ctor(System.String,System.String,Libs.PerformanceCounters.Category)">
            <summary>
            Конструктор для создания пустой подкатегории NetEmptyCategory.
            </summary>
            <param name="name">Название категории</param>
            <param name="description">Описание категории</param>
            <param name="parentCategory">Родительская категория</param>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.Categories.NetEmptyCategory.MarkChildCategoriesChangedAsViewed">
            <summary>
            Пометить, что изменение дочерней категории было обработано
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.Categories.NetEmptyCategory.CreateEmptySubCategory(System.String,System.String)">
            <summary>
            Создание пустой подкатегории
            Для добавления элемента в названии категории - Name.SubName.SubSubName
            </summary>
            <param name="categoryName">Имя подкатегории</param>
            <param name="categoryDescription">Описание подкатегории</param>
            <returns>Созданная подкатегория</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.Categories.NetEmptyCategory.CreateMultiInstanceSubCategory(System.String,System.String)">
            <summary>
            Создание подкатегории c многими инстансами
            </summary>
            <param name="categoryName">Имя категории</param>
            <param name="categoryDescription">Описание категории</param>
            <returns>Созданная подкатегория</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.Categories.NetEmptyCategory.CreateSingleInstanceSubCategory(System.String,System.String)">
            <summary>
            Создание простой подкатегории
            </summary>
            <param name="categoryName">Имя категории</param>
            <param name="categoryDescription">Описание категории</param>
            <returns>Созданная подкатегория</returns>
        </member>
        <member name="P:Libs.PerformanceCounters.NetCounters.Categories.NetEmptyCategory.ParentCategory">
            <summary>
            Родительская категория
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.NetCounters.Categories.NetEmptyCategory.ChildCategories">
            <summary>
            Перечень дочерних категорий
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.NetCounters.Categories.NetEmptyCategory.IsChildCategoriesChanged">
            <summary>
            Изменился ли список дочерних категории
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.NetCounters.Categories.NetInstanceInMultiInstanceCategory">
            <summary>
            Инстанс в многоинстансовой категории для NetCounters
            </summary> 
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.Categories.NetInstanceInMultiInstanceCategory.#ctor(Libs.PerformanceCounters.NetCounters.Categories.NetMultiInstanceCategory,System.String)">
            <summary>
            Конструктор для создания инстанса NetInstanceInMultiInstanceCategory
            </summary>
            <param name="parent">Родительская многоинстовая категория</param>
            <param name="instanceName">Имя инстанса</param>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.Categories.NetInstanceInMultiInstanceCategory.OnRemoveFromMultiInstanceCategory">
            <summary>
            Вызывается из родительской MultiInstanceCategory при удалении данного инстанса
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.Categories.NetInstanceInMultiInstanceCategory.HasCounter(System.String)">
            <summary>
            Есть ли счётчик с указанным именем
            </summary>
            <param name="counterName">Имя счётчика</param>
            <returns>Есть ли он</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.Categories.NetInstanceInMultiInstanceCategory.GetCounter(System.String)">
            <summary>
            Получение счетчика по имени
            </summary>
            <param name="counterName">Имя счетчика</param>
            <returns>Счётчик</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.Categories.NetInstanceInMultiInstanceCategory.GetCounter(System.String,Libs.PerformanceCounters.CounterTypes)">
            <summary>
            Получение счетчика определенного типа
            </summary>
            <param name="counterName">Имя счетчика</param>
            <param name="expectedCounterType">Тип счётчика</param>
            <returns>Счётчик</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.Categories.NetInstanceInMultiInstanceCategory.Remove">
            <summary>
            Удаление инстанса
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.NetCounters.Categories.NetInstanceInMultiInstanceCategory.Counters">
            <summary>
            Перечень счётчиков
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.NetCounters.Categories.NetInstanceInMultiInstanceCategory.IsAlive">
            <summary>
            Живой ли инстанс (не был ли удалён)
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.NetCounters.Categories.NetMultiInstanceCategory">
            <summary>
            Создание категории поддерживающей многочисленные инстансы для NetCounters
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.Categories.NetMultiInstanceCategory.#ctor(System.String,System.String,Libs.PerformanceCounters.Category)">
            <summary>
            Конструктор категории NetMultiInstanceCategory
            </summary>
            <param name="name">Имя категории</param>
            <param name="description">Описание категории</param>
            <param name="parentCategory">Родительская категория</param>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.Categories.NetMultiInstanceCategory.MarkChildCategoriesChangedAsViewed">
            <summary>
            Пометить, что изменение дочерней категории было обработано
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.Categories.NetMultiInstanceCategory.MarkCountersChangedAsViewed">
            <summary>
            Пометить, что изменение счётчиков было обработано
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.Categories.NetMultiInstanceCategory.MarkChildInstancesChangedAsViewed">
            <summary>
            Пометить, что изменение списка инстансов было обработано
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.Categories.NetMultiInstanceCategory.HasInstance(System.String)">
            <summary>
            Существует ли инстанс счётчиков
            </summary>
            <param name="instanceName">Имя инстанса</param>
            <returns>Существует ли</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.Categories.NetMultiInstanceCategory.RemoveInstance(System.String)">
            <summary>
            Удалить инстанс
            </summary>
            <param name="instanceName">Имя инстанса</param>
            <returns>Существал ли</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.Categories.NetMultiInstanceCategory.CreateCounter(Libs.PerformanceCounters.CounterTypes,System.String,System.String)">
            <summary>
            Создать счётчик определённого типа
            </summary>
            <param name="type">Тип счётчика</param>
            <param name="counterName">Имя счетчика</param>
            <param name="counterDescription">Описание счетчика</param>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.Categories.NetMultiInstanceCategory.CreateEmptySubCategory(System.String,System.String)">
            <summary>
            Создание пустой подкатегории
            Для добавления элемента в названии категории - Name.SubName.SubSubName
            </summary>
            <param name="categoryName">Имя подкатегории</param>
            <param name="categoryDescription">Описание категории</param>
            <returns>Созданная подкатегория</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.Categories.NetMultiInstanceCategory.CreateMultiInstanceSubCategory(System.String,System.String)">
            <summary>
            Создание подкатегории c многими инстансами
            </summary>
            <param name="categoryName">Имя категории</param>
            <param name="categoryDescription">Описание категории</param>
            <returns>Созданная подкатегория</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.Categories.NetMultiInstanceCategory.CreateSingleInstanceSubCategory(System.String,System.String)">
            <summary>
            Создание простой подкатегории
            </summary>
            <param name="categoryName">Имя категории</param>
            <param name="categoryDescription">Описание категории</param>
            <returns>Созданная подкатегория</returns>
        </member>
        <member name="P:Libs.PerformanceCounters.NetCounters.Categories.NetMultiInstanceCategory.ParentCategory">
            <summary>
            Родительская категория
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.NetCounters.Categories.NetMultiInstanceCategory.ChildCategories">
            <summary>
            Перечень дочерних категорий
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.NetCounters.Categories.NetMultiInstanceCategory.Instances">
            <summary>
            Перечень инстансов
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.NetCounters.Categories.NetMultiInstanceCategory.Counters">
            <summary>
            Словарь дескрипторов счётчиков (для внутреннего использования)
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.NetCounters.Categories.NetMultiInstanceCategory.IsChildCategoriesChanged">
            <summary>
            Изменился ли список дочерних категории
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.NetCounters.Categories.NetMultiInstanceCategory.IsCountersChanged">
            <summary>
            Изменился ли список счётчиков
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.NetCounters.Categories.NetMultiInstanceCategory.IsChildInstancesChanged">
            <summary>
            Изменился ли список инстансов
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.NetCounters.Categories.NetMultiInstanceCategory.Item(System.String)">
            <summary>
            Получение или создание инстанса
            </summary>
            <param name="instanceName">Имя инстанса</param>
            <returns>Инстанс</returns>
        </member>
        <member name="T:Libs.PerformanceCounters.NetCounters.Categories.NetSingleInstanceCategory">
            <summary>
            Создание категории с одним инстансом для NetCounters
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.Categories.NetSingleInstanceCategory.#ctor(System.String,System.String,Libs.PerformanceCounters.Category)">
            <summary>
            Конструктор NetSingleInstanceCategory
            </summary>
            <param name="name">Имя категории</param>
            <param name="description">Описание категории</param>
            <param name="parentCategory">Родительская категория</param>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.Categories.NetSingleInstanceCategory.MarkChildCategoriesChangedAsViewed">
            <summary>
            Пометить, что изменение дочерней категории было обработано
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.Categories.NetSingleInstanceCategory.MarkCountersChangedAsViewed">
            <summary>
            Пометить, что изменение счётчиков было обработано
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.Categories.NetSingleInstanceCategory.CreateCounter(Libs.PerformanceCounters.CounterTypes,System.String,System.String)">
            <summary>
            Создать счётчик определённого типа
            </summary>
            <param name="type">Тип счётчика</param>
            <param name="counterName">Имя счётчика</param>
            <param name="counterDescription">Описание счётчика</param>
            <returns>Счётчик</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.Categories.NetSingleInstanceCategory.HasCounter(System.String)">
            <summary>
            Есть ли счётчик с указанным именем
            </summary>
            <param name="counterName">Имя счётчика</param>
            <returns>Есть ли он</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.Categories.NetSingleInstanceCategory.GetCounter(System.String)">
            <summary>
            Получение счетчика определенного типа
            </summary>
            <param name="counterName">Имя счетчика</param>
            <returns>Счётчик</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.Categories.NetSingleInstanceCategory.GetCounter(System.String,Libs.PerformanceCounters.CounterTypes)">
            <summary>
            Получение счетчика определенного типа
            </summary>
            <param name="counterName">Имя счетчика</param>
            <param name="expectedCounterType">Тип счётчика</param>
            <returns>Счётчик</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.Categories.NetSingleInstanceCategory.CreateEmptySubCategory(System.String,System.String)">
            <summary>
            Создание пустой подкатегории
            Для добавления элемента в названии категории - Name.SubName.SubSubName
            </summary>
            <param name="categoryName">Имя подкатегории</param>
            <param name="categoryDescription">Описание категории</param>
            <returns>Созданная подкатегория</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.Categories.NetSingleInstanceCategory.CreateMultiInstanceSubCategory(System.String,System.String)">
            <summary>
            Создание подкатегории c многими инстансами
            </summary>
            <param name="categoryName">Имя категории</param>
            <param name="categoryDescription">Описание категории</param>
            <returns>Созданная подкатегория</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.Categories.NetSingleInstanceCategory.CreateSingleInstanceSubCategory(System.String,System.String)">
            <summary>
            Создание простой подкатегории
            </summary>
            <param name="categoryName">Имя категории</param>
            <param name="categoryDescription">Описание категории</param>
            <returns>Созданная подкатегория</returns>
        </member>
        <member name="P:Libs.PerformanceCounters.NetCounters.Categories.NetSingleInstanceCategory.ParentCategory">
            <summary>
            Родительская категория
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.NetCounters.Categories.NetSingleInstanceCategory.ChildCategories">
            <summary>
            Перечень дочерних категорий
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.NetCounters.Categories.NetSingleInstanceCategory.Counters">
            <summary>
            Перечень счётчиков
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.NetCounters.Categories.NetSingleInstanceCategory.IsChildCategoriesChanged">
            <summary>
            Изменился ли список дочерних категории
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.NetCounters.Categories.NetSingleInstanceCategory.IsCountersChanged">
            <summary>
            Изменился ли список счётчиков
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.NetCounters.CountersInfoAggregating.CategoryAggregatedInfo">
            <summary>
            Агрегированная информация о категории
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.NetCounters.CountersInfoAggregating.CategoryAggregatedInfo.Instances">
            <summary>
            Инстансы категории (для SingleInstance тут должна быть 1 запись)
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.NetCounters.CountersInfoAggregating.CategoryAggregatedInfo.CounterDescriptors">
            <summary>
            Счётчики в категории
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.NetCounters.CountersInfoAggregating.CounterDescriptorAggregatedInfo">
            <summary>
            Описатель счётчика
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.CountersInfoAggregating.CounterDescriptorAggregatedInfo.#ctor(System.String,System.String,Libs.PerformanceCounters.CounterTypes)">
            <summary>
            Конструктор CounterDescriptorAggregatedInfo
            </summary>
            <param name="name">Имя счётчика</param>
            <param name="description">Описание счётчика</param>
            <param name="type">Тип счётчика</param>
        </member>
        <member name="P:Libs.PerformanceCounters.NetCounters.CountersInfoAggregating.CounterDescriptorAggregatedInfo.Name">
            <summary>
            Имя счётчика
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.NetCounters.CountersInfoAggregating.CounterDescriptorAggregatedInfo.Description">
            <summary>
            Описание счётчика
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.NetCounters.CountersInfoAggregating.CounterDescriptorAggregatedInfo.Type">
            <summary>
            Тип счётчика
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.NetCounters.CountersInfoAggregating.CountersInfoAggregatorChangeKind">
            <summary>
            Флаги, помечающие, что изменилось
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.NetCounters.CountersInfoAggregating.InstanceAggregatedInfo">
            <summary>
            Описатель инстанса
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.NetCounters.CountersInfoAggregating.InstanceAggregatedInfo.SourceInstance">
            <summary>
            Исходный инстанс (null для singleInstanceCategory)
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.NetCounters.CountersInfoAggregating.InstanceAggregatedInfo.SourceCategory">
            <summary>
            Исходная категория (не null для singleInstanceCategory)
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.NetCounters.CountersInfoAggregating.InstanceAggregatedInfo.Counters">
            <summary>
            Счётчики
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.NetCounters.CountersValueDistribution.NetCountersValueDistributor">
            <summary>
            Рассыльщик значений сетевых счётчиков
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.CountersValueDistribution.NetCountersValueDistributor.PerformDistribution(System.Collections.Generic.List{Libs.PerformanceCounters.NetCounters.CountersInfoAggregating.CategoryAggregatedInfo},Libs.PerformanceCounters.NetCounters.CountersInfoAggregating.CountersInfoAggregatorChangeKind,System.Threading.CancellationToken)">
            <summary>
            Выполнить рассылку данных
            </summary>
            <param name="data">Агрегированные данные счётчиков</param>
            <param name="changes">Произошедшие изменения</param>
            <param name="token">Токен отмены</param>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.CountersValueDistribution.NetCountersValueDistributor.BuildCategoriesDescription(System.Collections.Generic.List{Libs.PerformanceCounters.NetCounters.CountersInfoAggregating.CategoryAggregatedInfo})">
            <summary>
            Сформировать массив описателей категории по агрегированным данным
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.CountersValueDistribution.NetCountersValueDistributor.BuildCategoryDescription(Libs.PerformanceCounters.NetCounters.CountersInfoAggregating.CategoryAggregatedInfo)">
            <summary>
            Сформировать описатель категории
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.CountersValueDistribution.NetCountersValueDistributor.BuildCategoriesValueData(System.Collections.Generic.List{Libs.PerformanceCounters.NetCounters.CountersInfoAggregating.CategoryAggregatedInfo})">
            <summary>
            Получить список значений счётчиков по агрегированной информации
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.CountersValueDistribution.NetCountersValueDistributor.BuildCategoryValueData(Libs.PerformanceCounters.NetCounters.CountersInfoAggregating.CategoryAggregatedInfo)">
            <summary>
            Получить значения по категории
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.CountersValueDistribution.NetCountersValueDistributor.BuildInstanceValueData(Libs.PerformanceCounters.NetCounters.CountersInfoAggregating.InstanceAggregatedInfo)">
            <summary>
            Получить значения по инстансу
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.CountersValueDistribution.NetCountersValueDistributor.BuildCounterValueData(Libs.PerformanceCounters.Counter)">
            <summary>
            Вычитать значение счётчика
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.NetCounters.NetAPI.ClientData">
            <summary>
            Данные о процессе клиента
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.NetAPI.ClientData.#ctor(System.String,System.String,System.String,System.Int32)">
            <summary>
            Конструктор ClientData
            </summary>
            <param name="machineName">Имя машины</param>
            <param name="machineAddress">Адрес машины</param>
            <param name="processName">Имя процесса</param>
            <param name="processId">ID процесса</param>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.NetAPI.ClientData.ToString">
            <summary>
            Преобразовать к строке
            </summary>
            <returns>Строка</returns>
        </member>
        <member name="P:Libs.PerformanceCounters.NetCounters.NetAPI.ClientData.MachineName">
            <summary>
            Имя машины
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.NetCounters.NetAPI.ClientData.MachineAddress">
            <summary>
            Адрес машины
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.NetCounters.NetAPI.ClientData.ProcessName">
            <summary>
            Имя процесса
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.NetCounters.NetAPI.ClientData.ProcessId">
            <summary>
            ID процесса
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.NetCounters.NetAPI.CategoryDescriptionData">
            <summary>
            Описатель категории
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.NetAPI.CategoryDescriptionData.#ctor(System.String[],System.String,Libs.PerformanceCounters.CategoryTypes,Libs.PerformanceCounters.NetCounters.NetAPI.CounterDescriptionData[])">
            <summary>
            Конструктор CategoryDescriptionData
            </summary>
            <param name="namePath">Имена родительских категорий и данной в конце</param>
            <param name="description">Описание категории</param>
            <param name="type">Тип категории</param>
            <param name="counters">Счётчики в данной категории</param>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.NetAPI.CategoryDescriptionData.ToString">
            <summary>
            Преобразовать к строке
            </summary>
            <returns>Строка</returns>
        </member>
        <member name="P:Libs.PerformanceCounters.NetCounters.NetAPI.CategoryDescriptionData.Name">
            <summary>
            Имя категории
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.NetCounters.NetAPI.CategoryDescriptionData.NamePath">
            <summary>
            Имена родительских категорий и данной
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.NetCounters.NetAPI.CategoryDescriptionData.Description">
            <summary>
            Описание категории
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.NetCounters.NetAPI.CategoryDescriptionData.Type">
            <summary>
            Тип категории
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.NetCounters.NetAPI.CategoryDescriptionData.Counters">
            <summary>
            Счётчики в данной категории
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.NetCounters.NetAPI.CounterDescriptionData">
            <summary>
            Описатель счётчика
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.NetAPI.CounterDescriptionData.#ctor(System.String,System.String,Libs.PerformanceCounters.CounterTypes)">
            <summary>
            Конструктор CounterDescriptionData
            </summary>
            <param name="name">Имя счётчика</param>
            <param name="description">Описание счётчика</param>
            <param name="type">Тип счётчика</param>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.NetAPI.CounterDescriptionData.ToString">
            <summary>
            Преобразовать к строке
            </summary>
            <returns>Строка</returns>
        </member>
        <member name="P:Libs.PerformanceCounters.NetCounters.NetAPI.CounterDescriptionData.Name">
            <summary>
            Имя счётчика
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.NetCounters.NetAPI.CounterDescriptionData.Description">
            <summary>
            Описание счётчика
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.NetCounters.NetAPI.CounterDescriptionData.Type">
            <summary>
            Тип счётчика
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.NetCounters.NetAPI.CategoryValueData">
            <summary>
            Данные категории
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.NetAPI.CategoryValueData.#ctor(System.String[],Libs.PerformanceCounters.CategoryTypes,Libs.PerformanceCounters.NetCounters.NetAPI.InstanceValueData[])">
            <summary>
            Конструктор CategoryValueData
            </summary>
            <param name="namePath">Имена родительских категорий и данной</param>
            <param name="type">Тип категории</param>
            <param name="instances">Инстансы в данной категории</param>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.NetAPI.CategoryValueData.ToString">
            <summary>
            Преобразовать к строке
            </summary>
            <returns>Строка</returns>
        </member>
        <member name="P:Libs.PerformanceCounters.NetCounters.NetAPI.CategoryValueData.Name">
            <summary>
            Имя категории
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.NetCounters.NetAPI.CategoryValueData.NamePath">
            <summary>
            Имена родительских категорий и данной
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.NetCounters.NetAPI.CategoryValueData.Type">
            <summary>
            Тип категории
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.NetCounters.NetAPI.CategoryValueData.Instances">
            <summary>
            Инстансы
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.NetCounters.NetAPI.InstanceValueData">
            <summary>
            Данные инстанса
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.NetAPI.InstanceValueData.#ctor(System.String,Libs.PerformanceCounters.NetCounters.NetAPI.CounterValueData[])">
            <summary>
            Конструктор InstanceValueData
            </summary>
            <param name="instanceName">Имя инстанса</param>
            <param name="counters">Счётчики</param>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.NetAPI.InstanceValueData.#ctor(Libs.PerformanceCounters.NetCounters.NetAPI.CounterValueData[])">
            <summary>
            Конструктор InstanceValueData для SingleInstanceCategory
            </summary>
            <param name="counters">Счётчики</param>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.NetAPI.InstanceValueData.ToString">
            <summary>
            Преобразовать к строке
            </summary>
            <returns>Строка</returns>
        </member>
        <member name="P:Libs.PerformanceCounters.NetCounters.NetAPI.InstanceValueData.InstanceName">
            <summary>
            Имя инстанса
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.NetCounters.NetAPI.InstanceValueData.Counters">
            <summary>
            Счётчики
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.NetCounters.NetAPI.CounterValueData">
            <summary>
            Хранение значений счётчика
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.NetAPI.CounterValueData.#ctor">
            <summary>
            Конструктор CounterValueData
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.NetAPI.CounterValueData.#ctor(System.String,Libs.PerformanceCounters.CounterTypes,System.Double)">
            <summary>
            Конструктор CounterValueData
            </summary>
            <param name="name">Имя счётчика</param>
            <param name="type">Тип счётчика</param>
            <param name="rawValue">Значение счётчика</param>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.NetAPI.CounterValueData.ToString">
            <summary>
            Преобразовать к строке
            </summary>
            <returns>Строка</returns>
        </member>
        <member name="P:Libs.PerformanceCounters.NetCounters.NetAPI.CounterValueData.Name">
            <summary>
            Имя счётчика
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.NetCounters.NetAPI.CounterValueData.Type">
            <summary>
            Тип счётчика
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.NetCounters.NetAPI.CounterValueData.RawValue">
            <summary>
            Значение счётчика
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.NetCounters.NetAPI.TimeCounterValueData">
            <summary>
            Тип для счётчиков времени
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.NetAPI.TimeCounterValueData.#ctor(System.String,Libs.PerformanceCounters.CounterTypes,System.TimeSpan)">
            <summary>
            Конструктор TimeCounterValueData
            </summary>
            <param name="name">Имя счётчика</param>
            <param name="type">Тип счётчика</param>
            <param name="value">Значение счётчика</param>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.NetAPI.TimeCounterValueData.ToString">
            <summary>
            Преобразовать к строке
            </summary>
            <returns>Строка</returns>
        </member>
        <member name="P:Libs.PerformanceCounters.NetCounters.NetAPI.TimeCounterValueData.Value">
            <summary>
            Значение счётчика
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.NetCounters.NetAPI.ItemCounterValueData">
            <summary>
            Тип для целочисленных счётчиков
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.NetAPI.ItemCounterValueData.#ctor(System.String,Libs.PerformanceCounters.CounterTypes,System.Int64)">
            <summary>
            Конструктор ItemCounterValueData
            </summary>
            <param name="name">Имя счётчика</param>
            <param name="type">Тип счётчика</param>
            <param name="value">Значение счётчика</param>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.NetAPI.ItemCounterValueData.ToString">
            <summary>
            Преобразовать к строке
            </summary>
            <returns>Строка</returns>
        </member>
        <member name="P:Libs.PerformanceCounters.NetCounters.NetAPI.ItemCounterValueData.Value">
            <summary>
            Значение счётчика
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.NetCounters.NetAPI.FractionCounterValueData">
            <summary>
            Ти для дробных счётчиков
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.NetAPI.FractionCounterValueData.#ctor(System.String,Libs.PerformanceCounters.CounterTypes,System.Double)">
            <summary>
            Конструктор FractionCounterValueData
            </summary>
            <param name="name">Имя счётчика</param>
            <param name="type">Тип счётчика</param>
            <param name="value">Значение счётчика</param>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.NetAPI.FractionCounterValueData.ToString">
            <summary>
            Преобразовать к строке
            </summary>
            <returns>Строка</returns>
        </member>
        <member name="P:Libs.PerformanceCounters.NetCounters.NetAPI.FractionCounterValueData.Value">
            <summary>
            Значение счётчика
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.NetCounters.NetAPI.INetworkCountersAPI">
            <summary>
            Интерфейс API сетевых счётчиков
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.NetAPI.INetworkCountersAPI.UpdateDescription(Libs.PerformanceCounters.NetCounters.NetAPI.ClientData,Libs.PerformanceCounters.NetCounters.NetAPI.CategoryDescriptionData[])">
            <summary>
            Обновить описание счётчиков
            </summary>
            <param name="clientData">Данные о клиенте</param>
            <param name="data">Данные</param>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.NetAPI.INetworkCountersAPI.UpdateValues(System.DateTimeOffset,Libs.PerformanceCounters.NetCounters.NetAPI.CategoryValueData[])">
            <summary>
            Обновить значения счётчиков
            </summary>
            <param name="time">Время получения данных счётчиков</param>
            <param name="values">Значения</param>
        </member>
        <member name="T:Libs.PerformanceCounters.NetCounters.NetCounterFactory">
            <summary>
            Фабрика сетевых счётчиков
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.NetCounterFactory.#ctor(System.Int32,System.String,System.Int32)">
            <summary>
            Конструктор NetCounterFactory
            </summary>
            <param name="distributionPeriodMs">Период рассылки данных счётчиков</param>
            <param name="serverAddress">ip-адрес сервера</param>
            <param name="serverPort">Порт сервера</param>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.NetCounterFactory.#ctor(Libs.PerformanceCounters.Configuration.NetCountersConfiguration)">
            <summary>
            Конструктор NetCounterFactory по конфигурации
            </summary>
            <param name="config">Объект конфига</param>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.NetCounterFactory.CreateEmptyCategory(System.String,System.String)">
            <summary>
            Создание пустой категории
            Для добавления элемента в названии категории - Name.SubName.SubSubName
            </summary>
            <param name="categoryName">Имя категории</param>
            <param name="categoryDescription">Описание категории</param>
            <returns>Категория</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.NetCounterFactory.CreateMultiInstanceCategory(System.String,System.String)">
            <summary>
            Создание категории c многими инстансами
            </summary>
            <param name="categoryName">Имя категории</param>
            <param name="categoryDescription">Описание категории</param>
            <returns>Категория</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.NetCounterFactory.CreateSingleInstanceCategory(System.String,System.String)">
            <summary>
            Создание категории
            </summary>
            <param name="categoryName">Имя категории</param>
            <param name="categoryDescription">Описание категории</param>
            <returns>Категория</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.NetCounterFactory.InitAll">
            <summary>
            Инициализация счетчиков во всех дочерних категориях (создание категорий, инстанцирование самих счетчиков)
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.NetCounterFactory.Dispose(System.Boolean)">
            <summary>
            Внутренний код освобождения ресурсов
            </summary>
            <param name="isUserCall">Вызвано ли пользователем</param>
        </member>
        <member name="P:Libs.PerformanceCounters.NetCounters.NetCounterFactory.Categories">
            <summary>
            Перечень дочерних категорий
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.NetCounters.Net.PerfCountersNetClient">
            <summary>
            Клиент сетевых счётчиков
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.Net.PerfCountersNetClient.#ctor(System.String)">
            <summary>
            Конструктор PerfCountersNetClient
            </summary>
            <param name="endpointConfigurationName">Имя конфигурации</param>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.Net.PerfCountersNetClient.#ctor(System.String,System.String)">
            <summary>
            Конструктор PerfCountersNetClient
            </summary>
            <param name="endpointConfigurationName">Имя конфигурации</param>
            <param name="remoteAddress">Удалённый адрес</param>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.Net.PerfCountersNetClient.#ctor(System.String,System.ServiceModel.EndpointAddress)">
            <summary>
            Конструктор PerfCountersNetClient
            </summary>
            <param name="endpointConfigurationName">Имя конфигурации</param>
            <param name="remoteAddress">Удалённый адрес</param>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.Net.PerfCountersNetClient.#ctor(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
            <summary>
            Конструктор PerfCountersNetClient
            </summary>
            <param name="binding">binding</param>
            <param name="remoteAddress">Удалённый адрес</param>
        </member>
        <member name="P:Libs.PerformanceCounters.NetCounters.Net.PerfCountersNetClient.RemoteSide">
            <summary>
            API удалённой стороны
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.NetCounters.Net.PerfCountersNetServer">
            <summary>
            Сервер сетевых счётчиков
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.Net.PerfCountersNetServer.Create(Libs.PerformanceCounters.NetCounters.NetAPI.INetworkCountersAPI)">
            <summary>
            Создать сервис на основе конифга в app.config
            </summary>
            <param name="singleton">Синглтон хэндлера</param>
            <returns>Созданный сервер</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.Net.PerfCountersNetServer.CreateOnTcp(Libs.PerformanceCounters.NetCounters.NetAPI.INetworkCountersAPI,System.Int32,System.String)">
            <summary>
            Создать сервис на TCP
            </summary>
            <param name="singleton">Синглтон хэндлера</param>
            <param name="port">Порт</param>
            <param name="serviceName">Имя сервиса WCF</param>
            <returns>Созданный сервер</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.Net.PerfCountersNetServer.CreateOnPipe(Libs.PerformanceCounters.NetCounters.NetAPI.INetworkCountersAPI,System.String)">
            <summary>
            Создать сервис на Pipe
            </summary>
            <param name="singleton">Синглтон хэндлера</param>
            <param name="pipeName">Имя пайпа</param>
            <returns>Созданный сервер</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.Net.PerfCountersNetServer.#ctor(System.ServiceModel.ServiceHost)">
            <summary>
            Конструктор PerfCountersNetServer
            </summary>
            <param name="host">WCF хост</param>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.Net.PerfCountersNetServer.Open">
            <summary>
            Открыть сервис
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.Net.PerfCountersNetServer.Dispose">
            <summary>
            Освободить ресурсы
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.NetCounters.Net.PerfCountersStableNetClient">
            <summary>
            Клиент сетевых счётчиков с автоматическим фоновым восстановлением соединения
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.Net.PerfCountersStableNetClient.CreateOnTcp(System.String,System.Int32,System.String)">
            <summary>
            Создать клиент сетевых счётчиков на TCP
            </summary>
            <param name="address">Адрес</param>
            <param name="port">Порт</param>
            <param name="serviceName">Имя сервиса WCF</param>
            <returns>Созданный клиент</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.Net.PerfCountersStableNetClient.CreateOnPipe(System.String,System.String)">
            <summary>
            Создать клиент сетевых счётчиков на Pipe
            </summary>
            <param name="address">Адрес</param>
            <param name="pipeName">Имя пайпа</param>
            <returns>Созданный клиент</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.Net.PerfCountersStableNetClient.#ctor(System.String,System.Int32)">
            <summary>
            Конструктор PerfCountersStableNetClient
            </summary>
            <param name="endpointConfigurationName">Имя конфигурации</param>
            <param name="connectionTestTimeMs">Время переподключения</param>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.Net.PerfCountersStableNetClient.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Конструктор PerfCountersStableNetClient
            </summary>
            <param name="endpointConfigurationName">Имя конфигурации</param>
            <param name="remoteAddress">Удалённый адрес</param>
            <param name="connectionTestTimeMs">Время переподключения</param>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.Net.PerfCountersStableNetClient.#ctor(System.String,System.ServiceModel.EndpointAddress,System.Int32)">
            <summary>
            Конструктор PerfCountersStableNetClient
            </summary>
            <param name="endpointConfigurationName">Имя конфигурации</param>
            <param name="remoteAddress">Удалённый адрес</param>
            <param name="connectionTestTimeMs">Время переподключения</param>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.Net.PerfCountersStableNetClient.#ctor(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress,System.Int32)">
            <summary>
            Конструктор PerfCountersStableNetClient
            </summary>
            <param name="binding">binding</param>
            <param name="remoteAddress">Удалённый адрес</param>
            <param name="connectionTestTimeMs">Время переподключения</param>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.Net.PerfCountersStableNetClient.MarkReconnectedWasProcessed">
            <summary>
            Пометить, что переподключение было обработано внешним кодом
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.Net.PerfCountersStableNetClient.LogError(System.Exception,System.String)">
            <summary>
            Залогировать ошибку
            </summary>
            <param name="ex">Исключение (если есть)</param>
            <param name="message">Сообщение</param>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.Net.PerfCountersStableNetClient.LogWarn(System.Exception,System.String)">
            <summary>
            Залогировать предупреждение
            </summary>
            <param name="ex">Исключение (если есть)</param>
            <param name="message">Сообщение</param>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.Net.PerfCountersStableNetClient.UpdateDescription(Libs.PerformanceCounters.NetCounters.NetAPI.ClientData,Libs.PerformanceCounters.NetCounters.NetAPI.CategoryDescriptionData[])">
            <summary>
            Обновить описание счётчиков
            </summary>
            <param name="clientData">Данные о процессе клиента</param>
            <param name="data">Данные</param>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.Net.PerfCountersStableNetClient.UpdateValues(System.DateTimeOffset,Libs.PerformanceCounters.NetCounters.NetAPI.CategoryValueData[])">
            <summary>
            Обновить значения счётчиков
            </summary>
            <param name="time">Время получения данных счётчиков</param>
            <param name="values">Значения</param>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.Net.PerfCountersStableNetClient.Start">
            <summary>
            Запустить
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.Net.PerfCountersStableNetClient.Stop">
            <summary>
            Остановить
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.NetCounters.Net.PerfCountersStableNetClient.Dispose">
            <summary>
            Освободить ресурсы
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.NetCounters.Net.PerfCountersStableNetClient.RemoteSideName">
            <summary>
            Имя удалённой стороны
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.NetCounters.Net.PerfCountersStableNetClient.HasConnection">
            <summary>
            Есть ли в данный момент соединение
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.NetCounters.Net.PerfCountersStableNetClient.IsStarted">
            <summary>
            Запущен ли клиент
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.NetCounters.Net.PerfCountersStableNetClient.WasReconnected">
            <summary>
            Было ли пересоздано подключение
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.PerfCountersContainer">
            <summary>
            Стандартный общий контейнер счётчиков.
            Для простейших ситуаций.
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.PerfCountersContainer.CreateNullCategoryWrapper``1">
            <summary>
            Создание обертки категории счетчиков вместе со всеми счетчиками при помощи NullCounters.
            </summary>
            <typeparam name="T">Тип обёртки</typeparam>
            <returns>Созданная обёртка</returns>
            <exception cref="T:Libs.PerformanceCounters.InvalidCounterDefinitionException">При неверном описании счётчика в обёртке</exception>
        </member>
        <member name="M:Libs.PerformanceCounters.PerfCountersContainer.InitializeCountersInAssembly(Libs.PerformanceCounters.Category,System.Reflection.Assembly)">
            <summary>
            Инициализировать счётчики в сборке.
            Ищет все типы, унаследованные от PerfCountersContainer или помеченные атрибутом PerformanceCounterContainerAttribute и 
            содержащие метод инициализации, помеченный атрибутом PerformanceCounterInitMethodAttribute
            </summary>
            <param name="category">Родительская категория</param>
            <param name="assembly">Сборка для сканирования</param>
        </member>
        <member name="M:Libs.PerformanceCounters.PerfCountersContainer.InitializeCountersInAssembly(Libs.PerformanceCounters.Category,System.Reflection.Assembly[])">
            <summary>
            Инициализировать счётчики в сборках.
            Ищет все типы, унаследованные от PerfCountersContainer или помеченные атрибутом PerformanceCounterContainerAttribute и 
            содержащие метод инициализации, помеченный атрибутом PerformanceCounterInitMethodAttribute
            </summary>
            <param name="category">Родительская категория</param>
            <param name="assembly">Перечень сборок</param>
        </member>
        <member name="M:Libs.PerformanceCounters.PerfCountersContainer.InitializeCountersInAssembly(Libs.PerformanceCounters.Category,System.Type)">
            <summary>
            Инициализировать счётчики в сборке.
            Ищет все типы, унаследованные от PerfCountersContainer или помеченные атрибутом PerformanceCounterContainerAttribute и 
            содержащие метод инициализации, помеченный атрибутом PerformanceCounterInitMethodAttribute
            </summary>
            <param name="category">Родительская категория</param>
            <param name="type">Тип внутри сборки со счётчиками</param>
        </member>
        <member name="M:Libs.PerformanceCounters.PerfCountersContainer.InitializeCountersInAssembly(Libs.PerformanceCounters.Category,System.Type[])">
            <summary>
            Инициализировать счётчики в сборках.
            Ищет все типы, унаследованные от PerfCountersContainer или помеченные атрибутом PerformanceCounterContainerAttribute и 
            содержащие метод инициализации, помеченный атрибутом PerformanceCounterInitMethodAttribute
            </summary>
            <param name="category">Родительская категория</param>
            <param name="types">Перечень типов внутри сборок со счётчиками</param>
        </member>
        <member name="M:Libs.PerformanceCounters.PerfCountersContainer.InitializeCountersInAssembly(Libs.PerformanceCounters.CategoryWrapper,System.Reflection.Assembly)">
            <summary>
            Инициализировать счётчики в сборке (для обёрток).
            Ищет все типы, унаследованные от PerfCountersContainer или помеченные атрибутом PerformanceCounterContainerAttribute и 
            содержащие метод инициализации, помеченный атрибутом PerformanceCounterInitMethodAttribute
            </summary>
            <param name="category">Родительская категория</param>
            <param name="assembly">Сборка для сканирования</param>
        </member>
        <member name="M:Libs.PerformanceCounters.PerfCountersContainer.InitializeCountersInAssembly(Libs.PerformanceCounters.CategoryWrapper,System.Reflection.Assembly[])">
            <summary>
            Инициализировать счётчики в сборках (для обёрток).
            Ищет все типы, унаследованные от PerfCountersContainer или помеченные атрибутом PerformanceCounterContainerAttribute и 
            содержащие метод инициализации, помеченный атрибутом PerformanceCounterInitMethodAttribute
            </summary>
            <param name="category">Родительская категория</param>
            <param name="assembly">Перечень сборок</param>
        </member>
        <member name="M:Libs.PerformanceCounters.PerfCountersContainer.InitializeCountersInAssembly(Libs.PerformanceCounters.CategoryWrapper,System.Type)">
            <summary>
            Инициализировать счётчики в сборке (для обёрток).
            Ищет все типы, унаследованные от PerfCountersContainer или помеченные атрибутом PerformanceCounterContainerAttribute и 
            содержащие метод инициализации, помеченный атрибутом PerformanceCounterInitMethodAttribute
            </summary>
            <param name="category">Родительская категория</param>
            <param name="type">Тип внутри сборки со счётчиками</param>
        </member>
        <member name="M:Libs.PerformanceCounters.PerfCountersContainer.InitializeCountersInAssembly(Libs.PerformanceCounters.CategoryWrapper,System.Type[])">
            <summary>
            Инициализировать счётчики в сборках (для обёрток).
            Ищет все типы, унаследованные от PerfCountersContainer или помеченные атрибутом PerformanceCounterContainerAttribute и 
            содержащие метод инициализации, помеченный атрибутом PerformanceCounterInitMethodAttribute
            </summary>
            <param name="category">Родительская категория</param>
            <param name="types">Перечень типов внутри сборок со счётчиками</param>
        </member>
        <member name="T:Libs.PerformanceCounters.CategoryCreationException">
            <summary>
            Исключение при создании категории
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.CategoryCreationException.#ctor">
            <summary>
            Конструктор CategoryCreationException
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.CategoryCreationException.#ctor(System.String)">
            <summary>
            Конструктор CategoryCreationException
            </summary>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Libs.PerformanceCounters.CategoryCreationException.#ctor(System.String,System.Exception)">
            <summary>
            Конструктор CategoryCreationException
            </summary>
            <param name="message">Сообщение об ошибке</param>
            <param name="ex">Внутреннее исключение</param>
        </member>
        <member name="M:Libs.PerformanceCounters.CategoryCreationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Конструктор CategoryCreationException для десериализации
            </summary>
            <param name="info">info</param>
            <param name="context">context</param>
        </member>
        <member name="T:Libs.PerformanceCounters.CounterNotExistException">
            <summary>
            Исключение для ситуации, когда указанный счётчик не существует
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.CounterNotExistException.#ctor">
            <summary>
            Конструктор CounterNotExistException
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.CounterNotExistException.#ctor(System.String)">
            <summary>
            Конструктор CounterNotExistException
            </summary>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Libs.PerformanceCounters.CounterNotExistException.#ctor(System.String,System.Exception)">
            <summary>
            Конструктор CounterNotExistException
            </summary>
            <param name="message">Сообщение об ошибке</param>
            <param name="ex">Внутреннее исключение</param>
        </member>
        <member name="M:Libs.PerformanceCounters.CounterNotExistException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Конструктор CounterNotExistException для десериализации
            </summary>
            <param name="info">info</param>
            <param name="context">context</param>
        </member>
        <member name="T:Libs.PerformanceCounters.DuplicateCategoryNameException">
            <summary>
            Повторяющееся имя категории
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.DuplicateCategoryNameException.#ctor">
            <summary>
            Конструктор DuplicateCategoryNameException
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.DuplicateCategoryNameException.#ctor(System.String)">
            <summary>
            Конструктор DuplicateCategoryNameException
            </summary>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Libs.PerformanceCounters.DuplicateCategoryNameException.#ctor(System.String,System.Exception)">
            <summary>
            Конструктор DuplicateCategoryNameException
            </summary>
            <param name="message">Сообщение об ошибке</param>
            <param name="ex">Внутреннее исключение</param>
        </member>
        <member name="M:Libs.PerformanceCounters.DuplicateCategoryNameException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Конструктор DuplicateCategoryNameException для десериализации
            </summary>
            <param name="info">info</param>
            <param name="context">context</param>
        </member>
        <member name="T:Libs.PerformanceCounters.InvalidCounterDefinitionException">
            <summary>
            Исключение при неверном задании описания счётчика в обёртке
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.InvalidCounterDefinitionException.#ctor">
            <summary>
            Конструктор InvalidCounterDefinitionException
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.InvalidCounterDefinitionException.#ctor(System.String)">
            <summary>
            Конструктор InvalidCounterDefinitionException
            </summary>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Libs.PerformanceCounters.InvalidCounterDefinitionException.#ctor(System.String,System.Exception)">
            <summary>
            Конструктор InvalidCounterDefinitionException
            </summary>
            <param name="message">Сообщение об ошибке</param>
            <param name="ex">Внутреннее исключение</param>
        </member>
        <member name="M:Libs.PerformanceCounters.InvalidCounterDefinitionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Конструктор InvalidCounterDefinitionException для десериализации
            </summary>
            <param name="info">info</param>
            <param name="context">context</param>
        </member>
        <member name="T:Libs.PerformanceCounters.InvalidCounterTypeException">
            <summary>
            Исключение, когда тип счётчика невалидный
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.InvalidCounterTypeException.#ctor">
            <summary>
            Конструктор InvalidCounterTypeException
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.InvalidCounterTypeException.#ctor(System.String)">
            <summary>
            Конструктор InvalidCounterTypeException
            </summary>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Libs.PerformanceCounters.InvalidCounterTypeException.#ctor(System.String,System.Exception)">
            <summary>
            Конструктор InvalidCounterTypeException
            </summary>
            <param name="message">Сообщение об ошибке</param>
            <param name="ex">Внутреннее исключение</param>
        </member>
        <member name="M:Libs.PerformanceCounters.InvalidCounterTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Конструктор InvalidCounterTypeException для десериализации
            </summary>
            <param name="info">info</param>
            <param name="context">context</param>
        </member>
        <member name="T:Libs.PerformanceCounters.UnknownCounterTypeException">
            <summary>
            Исключение, когда тип счётчика неизвестен
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.UnknownCounterTypeException.#ctor">
            <summary>
            Конструктор UnknownCounterTypeException
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.UnknownCounterTypeException.#ctor(System.String)">
            <summary>
            Конструктор UnknownCounterTypeException
            </summary>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Libs.PerformanceCounters.UnknownCounterTypeException.#ctor(System.String,System.Exception)">
            <summary>
            Конструктор UnknownCounterTypeException
            </summary>
            <param name="message">Сообщение об ошибке</param>
            <param name="ex">Внутреннее исключение</param>
        </member>
        <member name="M:Libs.PerformanceCounters.UnknownCounterTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Конструктор UnknownCounterTypeException для десериализации
            </summary>
            <param name="info">info</param>
            <param name="context">context</param>
        </member>
        <member name="T:Libs.PerformanceCounters.CounterTypeConverter">
            <summary>
            Конвертер типов счётчиков (Reflection Type в CounterTypes)
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.CounterTypeConverter.Convert(System.Type)">
            <summary>
            Получить перечисление CounterTypes по Reflection Type счётчика
            </summary>
            <param name="type">Тип счётчика</param>
            <returns>CounterTypes</returns>
        </member>
        <member name="T:Libs.PerformanceCounters.CounterAttribute">
            <summary>
            Атрибут для счетчика производительности.
            Содержит описание счетчика необходимое для его создания и использования.
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.CounterAttribute.#ctor">
            <summary>
            Конструктор CounterAttribute. 
            Имя счётчика и описание будут соответствовать имени свойства
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.CounterAttribute.#ctor(System.String)">
            <summary>
            Конструктор CounterAttribute.
            Имя счётчика будет соответствовать имени свойства
            </summary>
            <param name="description">Описание счётчика</param>
        </member>
        <member name="M:Libs.PerformanceCounters.CounterAttribute.#ctor(System.String,System.String)">
            <summary>
            Конструктор CounterAttribute
            </summary>
            <param name="name">Имя счётчика</param>
            <param name="description">Описание счётчика</param>
        </member>
        <member name="P:Libs.PerformanceCounters.CounterAttribute.Name">
            <summary>
            Имя счётчика
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.CounterAttribute.Description">
            <summary>
            Описание счетчика
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.DuplicateCounterNameException">
            <summary>
            Повторяющееся имя счётчика
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.DuplicateCounterNameException.#ctor">
            <summary>
            Конструктор DuplicateCounterNameException
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.DuplicateCounterNameException.#ctor(System.String)">
            <summary>
            Конструктор DuplicateCounterNameException
            </summary>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Libs.PerformanceCounters.DuplicateCounterNameException.#ctor(System.String,System.Exception)">
            <summary>
            Конструктор DuplicateCounterNameException
            </summary>
            <param name="message">Сообщение об ошибке</param>
            <param name="ex">Внутреннее исключение</param>
        </member>
        <member name="M:Libs.PerformanceCounters.DuplicateCounterNameException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Конструктор DuplicateCounterNameException для десериализации
            </summary>
            <param name="info">info</param>
            <param name="context">context</param>
        </member>
        <member name="T:Libs.PerformanceCounters.CategoryTypes">
            <summary>
            Типы категорий
            </summary>
        </member>
        <member name="F:Libs.PerformanceCounters.CategoryTypes.Empty">
            <summary>
            Категория без счётчиков
            </summary>
        </member>
        <member name="F:Libs.PerformanceCounters.CategoryTypes.SingleInstance">
            <summary>
            Простая категория
            </summary>
        </member>
        <member name="F:Libs.PerformanceCounters.CategoryTypes.MultiInstance">
            <summary>
            Категория с множественными инстансами
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.TimeCounterTimer">
            <summary>
            Таймер для счётчика среднего времени
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.TimeCounterTimer.StartNew(Libs.PerformanceCounters.ITimeCounter)">
            <summary>
            Создать и запустить таймер
            </summary>
            <param name="sourceCounter">Счётчик среднего времени</param>
            <returns>Запущенный таймер</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.TimeCounterTimer.#ctor(Libs.PerformanceCounters.ITimeCounter)">
            <summary>
            Конструктор AverageTimeCounterTimer
            </summary>
            <param name="sourceCounter">Счётчик среднего времени</param>
        </member>
        <member name="M:Libs.PerformanceCounters.TimeCounterTimer.Start">
            <summary>
            Запустить
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.TimeCounterTimer.Pause">
            <summary>
            Поставить на паузу
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.TimeCounterTimer.Restart">
            <summary>
            Перезапустить
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.TimeCounterTimer.Complete">
            <summary>
            Зафиксировать текущее измерение в счётчике
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.TimeCounterTimer.System#IDisposable#Dispose">
            <summary>
            Остановка таймера и фиксация измерения
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.TimeCounterTimer.ToString">
            <summary>
            Преобразование в строку с информацией
            </summary>
            <returns>Строка</returns>
        </member>
        <member name="P:Libs.PerformanceCounters.TimeCounterTimer.Elapsed">
            <summary>
            Текущее время
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.CategoryWrapper">
            <summary>
            Обёртка для категории
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.CategoryWrapper.InitializeCategoryWrapper(Libs.PerformanceCounters.CategoryWrapper,System.Reflection.Assembly)">
            <summary>
            Инициализировать обёртку в подчинённой сборке
            </summary>
            <param name="category">Текущая обёртка</param>
            <param name="assembly">Сборка, в которой проводится инициализация</param>
            <returns>Число проинициализированных контейнеров счётчиков</returns>
        </member>
        <member name="F:Libs.PerformanceCounters.CategoryWrapper._category">
            <summary>
            Категория
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.CategoryWrapper.#ctor(System.String,System.String,Libs.PerformanceCounters.CategoryTypes)">
            <summary>
            Конструктор CategoryWrapper
            </summary>
            <param name="name">Имя категории</param>
            <param name="description">Описание категории</param>
            <param name="type">Тип категории</param>
        </member>
        <member name="M:Libs.PerformanceCounters.CategoryWrapper.Init(Libs.PerformanceCounters.Category)">
            <summary>
            Внутренний метод инициализации
            </summary>
            <param name="category">Обёртываемая категория</param>
        </member>
        <member name="M:Libs.PerformanceCounters.CategoryWrapper.InitCategory(Libs.PerformanceCounters.Category)">
            <summary>
            Установить обёртываемую категорию (внутренний метод)
            </summary>
            <param name="category">Обёртываемая категория</param>
        </member>
        <member name="M:Libs.PerformanceCounters.CategoryWrapper.InitCounters">
            <summary>
            Инициализация счётчиков (внутренний метод)
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.CategoryWrapper.AfterInit">
            <summary>
            Функция вызывается после инициализации категории, когда все счётчики заполнены
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.CategoryWrapper.CreateSubCategory``1">
            <summary>
            Создание обертки вложенной категории счетчиков вместе со всеми счетчиками.
            Счетчики должны быть одного из типов счетчиков
            и должны быть помечены атрибутами CounterAttributes
            </summary>
            <typeparam name="T">Тип обёртки</typeparam>
            <returns>Созданная обёртка</returns>
            <exception cref="T:Libs.PerformanceCounters.InvalidCounterDefinitionException">При неверном описании счётчика в обёртке</exception>
        </member>
        <member name="M:Libs.PerformanceCounters.CategoryWrapper.CreateEmptySubCategory(System.String,System.String)">
            <summary>
            Создание обёртки для пустой вложенной категории
            </summary>
            <param name="name">Имя категории</param>
            <param name="description">Описание категории</param>
            <returns>Созданная обёртка</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.CategoryWrapper.Dispose(System.Boolean)">
            <summary>
            Освободить ресурсы
            </summary>
            <param name="isUserCall">Вызвано ли явно</param>
        </member>
        <member name="M:Libs.PerformanceCounters.CategoryWrapper.Dispose">
            <summary>
            Освободить ресурсы
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.CategoryWrapper.Name">
            <summary>
            Имя категории
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.CategoryWrapper.Description">
            <summary>
            Информация о категории
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.CategoryWrapper.Type">
            <summary>
            Тип категории
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.CounterAutoInitialization.CounterPropertyInfo">
            <summary>
            Описатель свойства счётчика в обёртке
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.CounterAutoInitialization.CounterPropertyInfo.#ctor(System.Type,System.Reflection.PropertyInfo,Libs.PerformanceCounters.CounterAttribute,Libs.PerformanceCounters.CounterTypes,Libs.PerformanceCounters.CounterAutoInitialization.GenericSetter)">
            <summary>
            Конструктор CounterPropertyInfo
            </summary>
            <param name="containerType">Тип контейнера</param>
            <param name="counterProp">Свойство</param>
            <param name="counterAttrib">Атрибут</param>
            <param name="counterType">Тип счётчика</param>
            <param name="counterSetter">Делегат установки значения счётчика</param>
        </member>
        <member name="M:Libs.PerformanceCounters.CounterAutoInitialization.CounterPropertyInfo.GetCounterName">
            <summary>
            Получить имя счётчика (из атрибута или имени свойства)
            </summary>
            <returns>Имя счётчика</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.CounterAutoInitialization.CounterPropertyInfo.GetCounterDescription">
            <summary>
            Получить описание счётчика (из атрибута или имени свойства)
            </summary>
            <returns>Описание счётчика</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.CounterAutoInitialization.CounterPropertyInfo.SetCounterValue(System.Object,System.Object)">
            <summary>
            Задать значение счётчика в обёртке
            </summary>
            <param name="instance">Обёртка</param>
            <param name="counter">Объект счётчика</param>
        </member>
        <member name="P:Libs.PerformanceCounters.CounterAutoInitialization.CounterPropertyInfo.CounterContainerType">
            <summary>
            Тип контейнера
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.CounterAutoInitialization.CounterPropertyInfo.Property">
            <summary>
            Свойство
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.CounterAutoInitialization.CounterPropertyInfo.Attribute">
            <summary>
            Атрибут счётчика на свойстве
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.CounterAutoInitialization.CounterPropertyInfo.CounterType">
            <summary>
            Тип счётчика
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.EmptyCategoryWrapper">
            <summary>
            Обёртка для пустой категории
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.EmptyCategoryWrapper.#ctor(System.String,System.String)">
            <summary>
            Конструктор EmptyCategoryWrapper
            </summary>
            <param name="name">Имя категории</param>
            <param name="description">Описание категории</param>
        </member>
        <member name="M:Libs.PerformanceCounters.EmptyCategoryWrapper.InitCategory(Libs.PerformanceCounters.Category)">
            <summary>
            Установить обёртываемую категорию (внутренний метод)
            </summary>
            <param name="category">Обёртываемая категория</param>
        </member>
        <member name="M:Libs.PerformanceCounters.EmptyCategoryWrapper.InitCounters">
            <summary>
            Инициализация счётчиков (внутренний метод)
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.MultiInstanceCategoryWrapper">
            <summary>
            Базовый враппер для MultiInstanceCategory
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.MultiInstanceCategoryWrapper.#ctor(System.String,System.String)">
            <summary>
            Конструктор MultiInstanceCategoryWrapper
            </summary>
            <param name="name">Имя категории</param>
            <param name="description">Описание категории</param>
        </member>
        <member name="M:Libs.PerformanceCounters.MultiInstanceCategoryWrapper.HasInstance(System.String)">
            <summary>
            Проверить существование инстанса
            </summary>
            <param name="instanceName">Имя инстанса</param>
            <returns>Существует ли</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.MultiInstanceCategoryWrapper.RemoveInstance(System.String)">
            <summary>
            Удалить инстанс по имени
            </summary>
            <param name="instanceName">Имя инстанса</param>
            <returns>Существовал ли</returns>
        </member>
        <member name="T:Libs.PerformanceCounters.MultiInstanceCategoryWrapper`1">
            <summary>
            Обертка для многоинставой категории. Не содержит счетчики.
            Наследник должен уточнить тип кагории, которая будет содержать счетчики в инстансах.
            </summary>
            <typeparam name="T">Тип обёртки конкретного инстанса</typeparam>
        </member>
        <member name="M:Libs.PerformanceCounters.MultiInstanceCategoryWrapper`1.#ctor(System.String,System.String)">
            <summary>
            Конструктор MultiInstanceCategoryWrapper
            </summary>
            <param name="name">Имя категории</param>
            <param name="description">Описание категории</param>
        </member>
        <member name="M:Libs.PerformanceCounters.MultiInstanceCategoryWrapper`1.InitCategory(Libs.PerformanceCounters.Category)">
            <summary>
            Установить обёртываемую категорию (внутренний метод)
            </summary>
            <param name="category">Обёртываемая категория</param>
        </member>
        <member name="M:Libs.PerformanceCounters.MultiInstanceCategoryWrapper`1.InitCounters">
            <summary>
            Инициализация счётчиков (внутренний метод)
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.MultiInstanceCategoryWrapper`1.HasInstance(System.String)">
            <summary>
            Проверить существование инстанса
            </summary>
            <param name="instanceName">Имя инстанса</param>
            <returns>Существует ли</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.MultiInstanceCategoryWrapper`1.RemoveInstance(System.String)">
            <summary>
            Удалить инстанс по имени
            </summary>
            <param name="instanceName">Имя инстанса</param>
            <returns>Существовал ли</returns>
        </member>
        <member name="P:Libs.PerformanceCounters.MultiInstanceCategoryWrapper`1.Item(System.String)">
            <summary>
            Получение или создание инстанса
            </summary>
            <param name="instanceName">Имя инстанса</param>
            <returns>Инстанс</returns>
        </member>
        <member name="T:Libs.PerformanceCounters.InstanceInMultiInstanceCategoryWrapper">
            <summary>
            Обёртка для инстанса в многоинстансовой категории
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.InstanceInMultiInstanceCategoryWrapper.#ctor">
            <summary>
            Конструктор InstanceInMultiInstanceCategoryWrapper
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.InstanceInMultiInstanceCategoryWrapper.InitInstance(Libs.PerformanceCounters.MultiInstanceCategoryWrapper,Libs.PerformanceCounters.InstanceInMultiInstanceCategory,System.Collections.Generic.List{Libs.PerformanceCounters.CounterAutoInitialization.CounterPropertyInfo})">
            <summary>
            Инициализация инстанса
            </summary>
            <param name="parent">Родительская многоинстансовая категория</param>
            <param name="category">Обёртываемый инстанс</param>
            <param name="counters">Список счётчиков</param>
        </member>
        <member name="M:Libs.PerformanceCounters.InstanceInMultiInstanceCategoryWrapper.AfterInit">
            <summary>
            Функция вызывается после инициализации категории, когда все счётчики заполнены
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.InstanceInMultiInstanceCategoryWrapper.OnRemoveThisInstanceInternal">
            <summary>
            Служебный метод, вызываемый из родительской MultiInstanceCategoryWrapper при удалении инстанса
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.InstanceInMultiInstanceCategoryWrapper.Remove">
            <summary>
            Удалить данный инстанс
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.InstanceInMultiInstanceCategoryWrapper.Dispose(System.Boolean)">
            <summary>
            Освобождение ресурсов
            </summary>
            <param name="isUserCall">Вызвано ли явно пользователем</param>
        </member>
        <member name="M:Libs.PerformanceCounters.InstanceInMultiInstanceCategoryWrapper.System#IDisposable#Dispose">
            <summary>
            Освобождение ресурсов
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.InstanceInMultiInstanceCategoryWrapper.InstanceName">
            <summary>
            Имя инстанса
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.InstanceInMultiInstanceCategoryWrapper.IsAlive">
            <summary>
            Жив ли инстанс (не был ли удалён)
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.SingleInstanceCategoryWrapper">
            <summary>
            Обёртка для простой категории (с одним инстансом)
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.SingleInstanceCategoryWrapper.#ctor(System.String,System.String)">
            <summary>
            Конструктор SingleInstanceCategoryWrapper
            </summary>
            <param name="name">Имя категории</param>
            <param name="description">Описание категории</param>
        </member>
        <member name="M:Libs.PerformanceCounters.SingleInstanceCategoryWrapper.InitCategory(Libs.PerformanceCounters.Category)">
            <summary>
            Установить обёртываемую категорию (внутренний метод)
            </summary>
            <param name="category">Обёртываемая категория</param>
        </member>
        <member name="M:Libs.PerformanceCounters.SingleInstanceCategoryWrapper.InitCounters">
            <summary>
            Инициализация счётчиков (внутренний метод)
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.Initialization.Initializer">
            <summary>
            Каскадный инициализатор
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.Initialization.Initializer.FindAllPerfCountersInAsmForBase(System.Reflection.Assembly)">
            <summary>
            Находит в сборке все классы, помеченные атрибутом PerfCountersContainerAttribute или наследники PerfCountersContainer или наследники категории
            </summary>
            <param name="asm">Сборка для поиска</param>
            <returns>Список найденных классов</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.Initialization.Initializer.FindAllPerfCountersInAsmForWrapper(System.Reflection.Assembly)">
            <summary>
            Находит в сборке все классы, помеченные атрибутом PerfCountersContainerAttribute или наследники PerfCountersContainer или наследники категории
            </summary>
            <param name="asm">Сборка для поиска</param>
            <returns>Список найденных классов</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.Initialization.Initializer.IsMethodMarkedWithInitAttribute(System.Reflection.MethodInfo)">
            <summary>
            Помечен ли указанный метод атрибутом, указывающим на возможность его использования при инициализации
            </summary>
            <param name="method">Метод</param>
            <returns>Помечен ли атрибутом</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.Initialization.Initializer.IsAppropriateInitMethodForBase(System.Reflection.MethodInfo)">
            <summary>
            Подходит ли указанный метод для инициализации счётчиков в базовом варианте (через типы Category)
            </summary>
            <param name="method">Метод</param>
            <returns>Подходит ли</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.Initialization.Initializer.IsAppropriateInitMethodForWrapper(System.Reflection.MethodInfo)">
            <summary>
            Подходит ли указанный метод для инициализации счётчиков в виде обёрток (через типы CategoryWrapper)
            </summary>
            <param name="method">Метод</param>
            <returns>Подходит ли</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.Initialization.Initializer.ExtractInitializationMethodForBase(System.Type)">
            <summary>
            Извлечение из типа метода инициализации счётчиков (метод должен быть помечен атрибутом PerformanceCounterInitMethodAttribute)
            </summary>
            <param name="tp">Тип</param>
            <returns>Метод, если найден. Иначе null.</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.Initialization.Initializer.ExtractInitializationMethodForWrapper(System.Type)">
            <summary>
            Извлечение из типа метода инициализации счётчиков (метод должен быть помечен атрибутом PerformanceCounterInitMethodAttribute)
            </summary>
            <param name="tp">Тип</param>
            <returns>Метод, если найден. Иначе null.</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.Initialization.Initializer.InitPerfCountersBase(System.Reflection.MethodInfo,Libs.PerformanceCounters.Category)">
            <summary>
            Выполнить инициализацию счётчиков путём вызова метода и передачи category
            </summary>
            <param name="method">Метод инициализации</param>
            <param name="category">Категория</param>
        </member>
        <member name="M:Libs.PerformanceCounters.Initialization.Initializer.InitPerfCountersWrapper(System.Reflection.MethodInfo,Libs.PerformanceCounters.CategoryWrapper)">
            <summary>
            Выполнить инициализацию счётчиков путём вызова метода и передачи category
            </summary>
            <param name="method">Метод инициализации</param>
            <param name="category">Категория</param>
        </member>
        <member name="M:Libs.PerformanceCounters.Initialization.Initializer.InitializeCategory(Libs.PerformanceCounters.Category,System.Reflection.Assembly)">
            <summary>
            Инициализировать счётчики в сборке.
            Ищет все типы, унаследованные от PerfCountersContainer или от Category или помеченные атрибутом PerfCountersContainerAttribute и 
            содержащие метод инициализации, помеченный атрибутом PerfCountersInitializationMethodAttribute
            </summary>
            <param name="category">Родительская категория</param>
            <param name="assembly">Сборка для сканирования</param>
            <returns>Число классов, которые были проинициализированы</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.Initialization.Initializer.InitializeCategory(Libs.PerformanceCounters.Category,System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Инициализировать счётчики в сборках.
            Ищет все типы, унаследованные от PerfCountersContainer или от Category или помеченные атрибутом PerfCountersContainerAttribute и 
            содержащие метод инициализации, помеченный атрибутом PerfCountersInitializationMethodAttribute
            </summary>
            <param name="category">Родительская категория</param>
            <param name="assembly">Перечень сборок</param>
            <returns>Число классов, которые были проинициализированы</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.Initialization.Initializer.InitializeCategoryWrapper(Libs.PerformanceCounters.CategoryWrapper,System.Reflection.Assembly)">
            <summary>
            Инициализировать счётчики в сборке (для обёрток).
            Ищет все типы, унаследованные от PerfCountersContainer или от CategoryWrapper или помеченные атрибутом PerfCountersContainerAttribute и 
            содержащие метод инициализации, помеченный атрибутом PerfCountersInitializationMethodAttribute
            </summary>
            <param name="category">Родительская категория</param>
            <param name="assembly">Сборка для сканирования</param>
            <returns>Число классов, которые были проинициализированы</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.Initialization.Initializer.InitializeCategoryWrapper(Libs.PerformanceCounters.CategoryWrapper,System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Инициализировать счётчики в сборках (для обёрток).
            Ищет все типы, унаследованные от PerfCountersContainer или от CategoryWrapper или помеченные атрибутом PerfCountersContainerAttribute и 
            содержащие метод инициализации, помеченный атрибутом PerfCountersInitializationMethodAttribute
            </summary>
            <param name="category">Родительская категория</param>
            <param name="assembly">Перечень сборок</param>
            <returns>Число классов, которые были проинициализированы</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.Initialization.Initializer.PassForInitializationToAssembly(Libs.PerformanceCounters.Category,System.Reflection.Assembly)">
            <summary>
            Инициализировать счётчики в других сборках как дочерние
            </summary>
            <param name="category">Родительская категория</param>
            <param name="assembly">Сборка для сканирования</param>
            <returns>Число классов, которые были проинициализированы</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.Initialization.Initializer.PassForInitializationToAssembly(Libs.PerformanceCounters.Category,System.Reflection.Assembly[])">
            <summary>
            Инициализировать счётчики в других сборках как дочерние
            </summary>
            <param name="category">Родительская категория</param>
            <param name="assembly">Сборки для сканирования</param>
            <returns>Число классов, которые были проинициализированы</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.Initialization.Initializer.PassForInitializationToAssembly(Libs.PerformanceCounters.Category,System.Type)">
            <summary>
            Инициализировать счётчики в других сборках как дочерние
            </summary>
            <param name="category">Родительская категория</param>
            <param name="type">Тип из сборки для сканирования</param>
            <returns>Число классов, которые были проинициализированы</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.Initialization.Initializer.PassForInitializationToAssembly(Libs.PerformanceCounters.Category,System.Type[])">
            <summary>
            Инициализировать счётчики в других сборках как дочерние
            </summary>
            <param name="category">Родительская категория</param>
            <param name="types">Типы из сборок для сканирования</param>
            <returns>Число классов, которые были проинициализированы</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.Initialization.Initializer.PassForInitializationToAssembly(Libs.PerformanceCounters.CategoryWrapper,System.Reflection.Assembly)">
            <summary>
            Инициализировать счётчики в других сборках как дочерние
            </summary>
            <param name="category">Родительская категория</param>
            <param name="assembly">Сборка для сканирования</param>
            <returns>Число классов, которые были проинициализированы</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.Initialization.Initializer.PassForInitializationToAssembly(Libs.PerformanceCounters.CategoryWrapper,System.Reflection.Assembly[])">
            <summary>
            Инициализировать счётчики в других сборках как дочерние
            </summary>
            <param name="category">Родительская категория</param>
            <param name="assembly">Сборки для сканирования</param>
            <returns>Число классов, которые были проинициализированы</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.Initialization.Initializer.PassForInitializationToAssembly(Libs.PerformanceCounters.CategoryWrapper,System.Type)">
            <summary>
            Инициализировать счётчики в других сборках как дочерние
            </summary>
            <param name="category">Родительская категория</param>
            <param name="type">Тип из сборки для сканирования</param>
            <returns>Число классов, которые были проинициализированы</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.Initialization.Initializer.PassForInitializationToAssembly(Libs.PerformanceCounters.CategoryWrapper,System.Type[])">
            <summary>
            Инициализировать счётчики в других сборках как дочерние
            </summary>
            <param name="category">Родительская категория</param>
            <param name="types">Типы из сборок для сканирования</param>
            <returns>Число классов, которые были проинициализированы</returns>
        </member>
        <member name="T:Libs.PerformanceCounters.PerfCountersContainerAttribute">
            <summary>
            Атрибут для пометки класса-контейнера счётчиков, 
            который должен содержать статический метод инициаилзации, помеченный атрибутом PerformanceCounterInitMethodAttribute
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.PerfCountersInitializationMethodAttribute">
            <summary>
            Атрибут для указания метода инициализации счётчиков.
            Метод должен быть статическим и иметь 1 параметр для приёма родительской категории
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.InternalCounters.Categories.InternalEmptyCategory">
            <summary>
            Пустая категория для InternalCounters
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.InternalCounters.Categories.InternalEmptyCategory.#ctor(System.String,System.String,Libs.PerformanceCounters.Category)">
            <summary>
            Конструктор для создания пустой подкатегории InternalEmptyCategory.
            </summary>
            <param name="name">Название категории</param>
            <param name="description">Описание категории</param>
            <param name="parentCategory">Родительская категория</param>
        </member>
        <member name="M:Libs.PerformanceCounters.InternalCounters.Categories.InternalEmptyCategory.CreateEmptySubCategory(System.String,System.String)">
            <summary>
            Создание пустой подкатегории
            Для добавления элемента в названии категории - Name.SubName.SubSubName
            </summary>
            <param name="categoryName">Имя подкатегории</param>
            <param name="categoryDescription">Описание подкатегории</param>
            <returns>Созданная подкатегория</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.InternalCounters.Categories.InternalEmptyCategory.CreateMultiInstanceSubCategory(System.String,System.String)">
            <summary>
            Создание подкатегории c многими инстансами
            </summary>
            <param name="categoryName">Имя категории</param>
            <param name="categoryDescription">Описание категории</param>
            <returns>Созданная подкатегория</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.InternalCounters.Categories.InternalEmptyCategory.CreateSingleInstanceSubCategory(System.String,System.String)">
            <summary>
            Создание простой подкатегории
            </summary>
            <param name="categoryName">Имя категории</param>
            <param name="categoryDescription">Описание категории</param>
            <returns>Созданная подкатегория</returns>
        </member>
        <member name="P:Libs.PerformanceCounters.InternalCounters.Categories.InternalEmptyCategory.ParentCategory">
            <summary>
            Родительская категория
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.InternalCounters.Categories.InternalEmptyCategory.ChildCategories">
            <summary>
            Перечень дочерних категорий
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.InternalCounters.Categories.InternalInstanceInMultiInstanceCategory">
            <summary>
            Инстанс в многоинстансовой категории для InternalCounters
            </summary> 
        </member>
        <member name="M:Libs.PerformanceCounters.InternalCounters.Categories.InternalInstanceInMultiInstanceCategory.#ctor(Libs.PerformanceCounters.InternalCounters.Categories.InternalMultiInstanceCategory,System.String)">
            <summary>
            Конструктор для создания инстанса InternalInstanceInMultiInstanceCategory
            </summary>
            <param name="parent">Родительская многоинстовая категория</param>
            <param name="instanceName">Имя инстанса</param>
        </member>
        <member name="M:Libs.PerformanceCounters.InternalCounters.Categories.InternalInstanceInMultiInstanceCategory.OnRemoveFromMultiInstanceCategory">
            <summary>
            Вызывается из родительской MultiInstanceCategory при удалении данного инстанса
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.InternalCounters.Categories.InternalInstanceInMultiInstanceCategory.HasCounter(System.String)">
            <summary>
            Есть ли счётчик с указанным именем
            </summary>
            <param name="counterName">Имя счётчика</param>
            <returns>Есть ли он</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.InternalCounters.Categories.InternalInstanceInMultiInstanceCategory.GetCounter(System.String)">
            <summary>
            Получение счетчика по имени
            </summary>
            <param name="counterName">Имя счетчика</param>
            <returns>Счётчик</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.InternalCounters.Categories.InternalInstanceInMultiInstanceCategory.GetCounter(System.String,Libs.PerformanceCounters.CounterTypes)">
            <summary>
            Получение счетчика определенного типа
            </summary>
            <param name="counterName">Имя счетчика</param>
            <param name="expectedCounterType">Тип счётчика</param>
            <returns>Счётчик</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.InternalCounters.Categories.InternalInstanceInMultiInstanceCategory.Remove">
            <summary>
            Удаление инстанса
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.InternalCounters.Categories.InternalInstanceInMultiInstanceCategory.Counters">
            <summary>
            Перечень счётчиков
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.InternalCounters.Categories.InternalInstanceInMultiInstanceCategory.IsAlive">
            <summary>
            Живой ли инстанс (не был ли удалён)
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.InternalCounters.Categories.InternalMultiInstanceCategory">
            <summary>
            Создание категории поддерживающей многочисленные инстансы для InternalCounters
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.InternalCounters.Categories.InternalMultiInstanceCategory.#ctor(System.String,System.String,Libs.PerformanceCounters.Category)">
            <summary>
            Конструктор категории InternalMultiInstanceCategory
            </summary>
            <param name="name">Имя категории</param>
            <param name="description">Описание категории</param>
            <param name="parentCategory">Родительская категория</param>
        </member>
        <member name="M:Libs.PerformanceCounters.InternalCounters.Categories.InternalMultiInstanceCategory.HasInstance(System.String)">
            <summary>
            Существует ли инстанс счётчиков
            </summary>
            <param name="instanceName">Имя инстанса</param>
            <returns>Существует ли</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.InternalCounters.Categories.InternalMultiInstanceCategory.RemoveInstance(System.String)">
            <summary>
            Удалить инстанс
            </summary>
            <param name="instanceName">Имя инстанса</param>
            <returns>Существал ли</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.InternalCounters.Categories.InternalMultiInstanceCategory.CreateCounter(Libs.PerformanceCounters.CounterTypes,System.String,System.String)">
            <summary>
            Создать счётчик определённого типа
            </summary>
            <param name="type">Тип счётчика</param>
            <param name="counterName">Имя счетчика</param>
            <param name="counterDescription">Описание счетчика</param>
        </member>
        <member name="M:Libs.PerformanceCounters.InternalCounters.Categories.InternalMultiInstanceCategory.CreateEmptySubCategory(System.String,System.String)">
            <summary>
            Создание пустой подкатегории
            Для добавления элемента в названии категории - Name.SubName.SubSubName
            </summary>
            <param name="categoryName">Имя подкатегории</param>
            <param name="categoryDescription">Описание категории</param>
            <returns>Созданная подкатегория</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.InternalCounters.Categories.InternalMultiInstanceCategory.CreateMultiInstanceSubCategory(System.String,System.String)">
            <summary>
            Создание подкатегории c многими инстансами
            </summary>
            <param name="categoryName">Имя категории</param>
            <param name="categoryDescription">Описание категории</param>
            <returns>Созданная подкатегория</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.InternalCounters.Categories.InternalMultiInstanceCategory.CreateSingleInstanceSubCategory(System.String,System.String)">
            <summary>
            Создание простой подкатегории
            </summary>
            <param name="categoryName">Имя категории</param>
            <param name="categoryDescription">Описание категории</param>
            <returns>Созданная подкатегория</returns>
        </member>
        <member name="P:Libs.PerformanceCounters.InternalCounters.Categories.InternalMultiInstanceCategory.ParentCategory">
            <summary>
            Родительская категория
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.InternalCounters.Categories.InternalMultiInstanceCategory.ChildCategories">
            <summary>
            Перечень дочерних категорий
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.InternalCounters.Categories.InternalMultiInstanceCategory.Instances">
            <summary>
            Перечень инстансов
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.InternalCounters.Categories.InternalMultiInstanceCategory.Counters">
            <summary>
            Словарь дескрипторов счётчиков (для внутреннего использования)
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.InternalCounters.Categories.InternalMultiInstanceCategory.Item(System.String)">
            <summary>
            Получение или создание инстанса
            </summary>
            <param name="instanceName">Имя инстанса</param>
            <returns>Инстанс</returns>
        </member>
        <member name="T:Libs.PerformanceCounters.InternalCounters.Categories.InternalSingleInstanceCategory">
            <summary>
            Создание категории с одним инстансом для InternalCounters
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.InternalCounters.Categories.InternalSingleInstanceCategory.#ctor(System.String,System.String,Libs.PerformanceCounters.Category)">
            <summary>
            Конструктор InternalSingleInstanceCategory
            </summary>
            <param name="name">Имя категории</param>
            <param name="description">Описание категории</param>
            <param name="parentCategory">Родительская категория</param>
        </member>
        <member name="M:Libs.PerformanceCounters.InternalCounters.Categories.InternalSingleInstanceCategory.CreateCounter(Libs.PerformanceCounters.CounterTypes,System.String,System.String)">
            <summary>
            Создать счётчик определённого типа
            </summary>
            <param name="type">Тип счётчика</param>
            <param name="counterName">Имя счётчика</param>
            <param name="counterDescription">Описание счётчика</param>
            <returns>Счётчик</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.InternalCounters.Categories.InternalSingleInstanceCategory.HasCounter(System.String)">
            <summary>
            Есть ли счётчик с указанным именем
            </summary>
            <param name="counterName">Имя счётчика</param>
            <returns>Есть ли он</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.InternalCounters.Categories.InternalSingleInstanceCategory.GetCounter(System.String)">
            <summary>
            Получение счетчика определенного типа
            </summary>
            <param name="counterName">Имя счетчика</param>
            <returns>Счётчик</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.InternalCounters.Categories.InternalSingleInstanceCategory.GetCounter(System.String,Libs.PerformanceCounters.CounterTypes)">
            <summary>
            Получение счетчика определенного типа
            </summary>
            <param name="counterName">Имя счетчика</param>
            <param name="expectedCounterType">Тип счётчика</param>
            <returns>Счётчик</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.InternalCounters.Categories.InternalSingleInstanceCategory.CreateEmptySubCategory(System.String,System.String)">
            <summary>
            Создание пустой подкатегории
            Для добавления элемента в названии категории - Name.SubName.SubSubName
            </summary>
            <param name="categoryName">Имя подкатегории</param>
            <param name="categoryDescription">Описание категории</param>
            <returns>Созданная подкатегория</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.InternalCounters.Categories.InternalSingleInstanceCategory.CreateMultiInstanceSubCategory(System.String,System.String)">
            <summary>
            Создание подкатегории c многими инстансами
            </summary>
            <param name="categoryName">Имя категории</param>
            <param name="categoryDescription">Описание категории</param>
            <returns>Созданная подкатегория</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.InternalCounters.Categories.InternalSingleInstanceCategory.CreateSingleInstanceSubCategory(System.String,System.String)">
            <summary>
            Создание простой подкатегории
            </summary>
            <param name="categoryName">Имя категории</param>
            <param name="categoryDescription">Описание категории</param>
            <returns>Созданная подкатегория</returns>
        </member>
        <member name="P:Libs.PerformanceCounters.InternalCounters.Categories.InternalSingleInstanceCategory.ParentCategory">
            <summary>
            Родительская категория
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.InternalCounters.Categories.InternalSingleInstanceCategory.ChildCategories">
            <summary>
            Перечень дочерних категорий
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.InternalCounters.Categories.InternalSingleInstanceCategory.Counters">
            <summary>
            Перечень счётчиков
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.InternalCounters.Counters.InternalAverageCountCounter">
            <summary>
            Счётчик замера среднего числа значений для InternalCounters
            </summary>
        </member>
        <member name="F:Libs.PerformanceCounters.InternalCounters.Counters.InternalAverageCountCounter.MonitoringPeriodMs">
            <summary>
            Время с последнего обновления, после истечения которого счётчик сбрасывается
            </summary>
        </member>
        <member name="F:Libs.PerformanceCounters.InternalCounters.Counters.InternalAverageCountCounter.AccumulatingSize">
            <summary>
            Число аккумулируемых значений для определения среднего
            </summary>
        </member>
        <member name="F:Libs.PerformanceCounters.InternalCounters.Counters.InternalAverageCountCounter.ReductionFactor">
            <summary>
            Степень сокращения при достижении AccumulatingSize.
            Аккумулированное значение и число элементов делятся на это значение.
            Обеспечивает постепенное затухание старых измерений
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.InternalCounters.Counters.InternalAverageCountCounter.CreateDescriptor(System.String,System.String)">
            <summary>
            Метод создания дескриптора для InternalAverageCountCounter
            </summary>
            <param name="name">Имя счётчика</param>
            <param name="description">Описание счётчика</param>
            <returns>Дескриптор</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.InternalCounters.Counters.InternalAverageCountCounter.#ctor(System.String,System.String)">
            <summary>
            Конструктор InternalAverageCountCounter
            </summary>
            <param name="name">Имя счётчика</param>
            <param name="description">Описание счётчика</param>
        </member>
        <member name="M:Libs.PerformanceCounters.InternalCounters.Counters.InternalAverageCountCounter.TryGetValues(System.Int64@,System.Int32@)">
            <summary>
            Попробовать атомарно считать аккумулированное значение и число срабатываний
            </summary>
            <param name="curVal">Аккумулированное значение</param>
            <param name="curCnt">Число срабатываний</param>
            <returns>Удалось ли их считать атомарно</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.InternalCounters.Counters.InternalAverageCountCounter.GetValuesAtomic(System.Int64@,System.Int32@)">
            <summary>
            Атомарно считать аккумулированное значение и число срабатываний
            </summary>
            <param name="curVal">Аккумулированное значение</param>
            <param name="curCnt">Число срабатываний</param>
        </member>
        <member name="M:Libs.PerformanceCounters.InternalCounters.Counters.InternalAverageCountCounter.RegisterValue(System.Int64)">
            <summary>
            Зарегистрировать измерение
            </summary>
            <param name="value">Новое значение</param>
        </member>
        <member name="M:Libs.PerformanceCounters.InternalCounters.Counters.InternalAverageCountCounter.Reset">
            <summary>
            Сброс значения счётчика
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.InternalCounters.Counters.InternalAverageCountCounter.CurrentValue">
            <summary>
            Текущее значение
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.InternalCounters.Counters.InternalAverageCountCounter.Descriptor">
            <summary>
            Дескриптор для счётчика InternalAverageCountCounter
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.InternalCounters.Counters.InternalCounterDescriptor">
            <summary>
            Дескриптор счётчика для его создания
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.InternalCounters.Counters.InternalCounterDescriptor.#ctor(System.String,System.String,Libs.PerformanceCounters.CounterTypes)">
            <summary>
            Конструктор InternalCounterDescriptor
            </summary>
            <param name="name">Имя счётчика</param>
            <param name="description">Описание счётчика</param>
            <param name="type">Тип счётчика</param>
        </member>
        <member name="M:Libs.PerformanceCounters.InternalCounters.Counters.InternalCounterDescriptor.CreateCounter">
            <summary>
            Метод создания счётчика из дескриптора
            </summary>
            <returns>Созданный счётчик</returns>
        </member>
        <member name="P:Libs.PerformanceCounters.InternalCounters.Counters.InternalCounterDescriptor.Name">
            <summary>
            Имя счётчика
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.InternalCounters.Counters.InternalCounterDescriptor.Description">
            <summary>
            Описание счётчика
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.InternalCounters.Counters.InternalCounterDescriptor.Type">
            <summary>
            Тип счётчика
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.InternalCounters.Counters.InternalAverageCountCounter.Descriptor.#ctor(System.String,System.String)">
            <summary>
            Конструктор Descriptor
            </summary>
            <param name="name">Имя счётчика</param>
            <param name="description">Описание счётчика</param>
        </member>
        <member name="M:Libs.PerformanceCounters.InternalCounters.Counters.InternalAverageCountCounter.Descriptor.CreateCounter">
            <summary>
            Метод создания счётчика из дескриптора
            </summary>
            <returns>Созданный счётчик</returns>
        </member>
        <member name="T:Libs.PerformanceCounters.InternalCounters.Counters.InternalAverageTimeCounter">
            <summary>
            Счётчик среднего времени для InternalCounters
            </summary> 
        </member>
        <member name="F:Libs.PerformanceCounters.InternalCounters.Counters.InternalAverageTimeCounter.MonitoringPeriodMs">
            <summary>
            Время с последнего обновления, после истечения которого счётчик сбрасывается
            </summary>
        </member>
        <member name="F:Libs.PerformanceCounters.InternalCounters.Counters.InternalAverageTimeCounter.AccumulatingSize">
            <summary>
            Число аккумулируемых значений для определения среднего
            </summary>
        </member>
        <member name="F:Libs.PerformanceCounters.InternalCounters.Counters.InternalAverageTimeCounter.ReductionFactor">
            <summary>
            Степень сокращения при достижении AccumulatingSize.
            Аккумулированное значение и число элементов делятся на это значение.
            Обеспечивает постепенное затухание старых измерений
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.InternalCounters.Counters.InternalAverageTimeCounter.CreateDescriptor(System.String,System.String)">
            <summary>
            Метод создания дескриптора для InternalAverageTimeCounter
            </summary>
            <param name="name">Имя счётчика</param>
            <param name="description">Описание счётчика</param>
            <returns>Дескриптор</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.InternalCounters.Counters.InternalAverageTimeCounter.#ctor(System.String,System.String)">
            <summary>
            Конструктор InternalAverageTimeCounter
            </summary>
            <param name="name">Имя счётчика</param>
            <param name="description">Описание счётчика</param>
        </member>
        <member name="M:Libs.PerformanceCounters.InternalCounters.Counters.InternalAverageTimeCounter.TryGetValues(System.Int64@,System.Int32@)">
            <summary>
            Попробовать атомарно считать аккумулированное значение и число срабатываний
            </summary>
            <param name="curVal">Аккумулированное значение</param>
            <param name="curCnt">Число срабатываний</param>
            <returns>Удалось ли их считать атомарно</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.InternalCounters.Counters.InternalAverageTimeCounter.GetValuesAtomic(System.Int64@,System.Int32@)">
            <summary>
            Атомарно считать аккумулированное значение и число срабатываний
            </summary>
            <param name="curVal">Аккумулированное значение</param>
            <param name="curCnt">Число срабатываний</param>
        </member>
        <member name="M:Libs.PerformanceCounters.InternalCounters.Counters.InternalAverageTimeCounter.RegisterMeasurement(System.TimeSpan)">
            <summary>
            Зарегистрировать измерение
            </summary>
            <param name="period">Период</param>
        </member>
        <member name="M:Libs.PerformanceCounters.InternalCounters.Counters.InternalAverageTimeCounter.Reset">
            <summary>
            Сброс значения счётчика
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.InternalCounters.Counters.InternalAverageTimeCounter.CurrentValue">
            <summary>
            Текущее значение
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.InternalCounters.Counters.InternalAverageTimeCounter.Descriptor">
            <summary>
            Дескриптор для счётчика InternalAverageTimeCounter
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.InternalCounters.Counters.InternalAverageTimeCounter.Descriptor.#ctor(System.String,System.String)">
            <summary>
            Конструктор Descriptor
            </summary>
            <param name="name">Имя счётчика</param>
            <param name="description">Описание счётчика</param>
        </member>
        <member name="M:Libs.PerformanceCounters.InternalCounters.Counters.InternalAverageTimeCounter.Descriptor.CreateCounter">
            <summary>
            Метод создания счётчика из дескриптора
            </summary>
            <returns>Созданный счётчик</returns>
        </member>
        <member name="T:Libs.PerformanceCounters.InternalCounters.Counters.InternalElapsedTimeCounter">
            <summary>
            Счётчик, который показывает полное время от начала работы компонента или процесса, для InternalCounters
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.InternalCounters.Counters.InternalElapsedTimeCounter.CreateDescriptor(System.String,System.String)">
            <summary>
            Метод создания дескриптора для InternalElapsedTimeCounter
            </summary>
            <param name="name">Имя счётчика</param>
            <param name="description">Описание счётчика</param>
            <returns>Дескриптор</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.InternalCounters.Counters.InternalElapsedTimeCounter.#ctor(System.String,System.String)">
            <summary>
            Конструктор InternalElapsedTimeCounter
            </summary>
            <param name="name">Имя счётчика</param>
            <param name="description">Описание счётчика</param>
        </member>
        <member name="M:Libs.PerformanceCounters.InternalCounters.Counters.InternalElapsedTimeCounter.Reset">
            <summary>
            Сбросить прошедшее время
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.InternalCounters.Counters.InternalElapsedTimeCounter.CurrentValue">
            <summary>
            Текущее время, которое прошло с момента запуска
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.InternalCounters.Counters.InternalElapsedTimeCounter.Descriptor">
            <summary>
            Дескриптор для счётчика InternalElapsedTimeCounter
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.InternalCounters.Counters.InternalElapsedTimeCounter.Descriptor.#ctor(System.String,System.String)">
            <summary>
            Конструктор Descriptor
            </summary>
            <param name="name">Имя счётчика</param>
            <param name="description">Описание счётчика</param>
        </member>
        <member name="M:Libs.PerformanceCounters.InternalCounters.Counters.InternalElapsedTimeCounter.Descriptor.CreateCounter">
            <summary>
            Метод создания счётчика из дескриптора
            </summary>
            <returns>Созданный счётчик</returns>
        </member>
        <member name="T:Libs.PerformanceCounters.InternalCounters.Counters.InternalMomentTimeCounter">
            <summary>
            Счётчик моментального времени для InternalCounters
            </summary> 
        </member>
        <member name="M:Libs.PerformanceCounters.InternalCounters.Counters.InternalMomentTimeCounter.CreateDescriptor(System.String,System.String)">
            <summary>
            Метод создания дескриптора для InternalMomentTimeCounter
            </summary>
            <param name="name">Имя счётчика</param>
            <param name="description">Описание счётчика</param>
            <returns>Дескриптор</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.InternalCounters.Counters.InternalMomentTimeCounter.#ctor(System.String,System.String)">
            <summary>
            Конструктор InternalMomentTimeCounter
            </summary>
            <param name="name">Имя счётчика</param>
            <param name="description">Описание счётчика</param>
        </member>
        <member name="M:Libs.PerformanceCounters.InternalCounters.Counters.InternalMomentTimeCounter.RegisterMeasurement(System.TimeSpan)">
            <summary>
            Зарегистрировать измерение
            </summary>
            <param name="period">Период</param>
        </member>
        <member name="M:Libs.PerformanceCounters.InternalCounters.Counters.InternalMomentTimeCounter.Reset">
            <summary>
            Сброс значения счётчика
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.InternalCounters.Counters.InternalMomentTimeCounter.CurrentValue">
            <summary>
            Текущее значение
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.InternalCounters.Counters.InternalMomentTimeCounter.Descriptor">
            <summary>
            Дескриптор для счётчика InternalMomentTimeCounter
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.InternalCounters.Counters.InternalMomentTimeCounter.Descriptor.#ctor(System.String,System.String)">
            <summary>
            Конструктор Descriptor
            </summary>
            <param name="name">Имя счётчика</param>
            <param name="description">Описание счётчика</param>
        </member>
        <member name="M:Libs.PerformanceCounters.InternalCounters.Counters.InternalMomentTimeCounter.Descriptor.CreateCounter">
            <summary>
            Метод создания счётчика из дескриптора
            </summary>
            <returns>Созданный счётчик</returns>
        </member>
        <member name="T:Libs.PerformanceCounters.InternalCounters.Counters.InternalNumberOfItemsCounter">
            <summary>
            Счетчик мгновенного значения, показывающий последнее наблюдавшееся значение для InternalCounters
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.InternalCounters.Counters.InternalNumberOfItemsCounter.CreateDescriptor(System.String,System.String)">
            <summary>
            Метод создания дескриптора для InternalNumberOfItemsCounter
            </summary>
            <param name="name">Имя счётчика</param>
            <param name="description">Описание счётчика</param>
            <returns>Дескриптор</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.InternalCounters.Counters.InternalNumberOfItemsCounter.#ctor(System.String,System.String)">
            <summary>
            Конструктор InternalNumberOfItemsCounter
            </summary>
            <param name="name">Имя счётчика</param>
            <param name="description">Описание счётчика</param>
        </member>
        <member name="M:Libs.PerformanceCounters.InternalCounters.Counters.InternalNumberOfItemsCounter.Decrement">
            <summary>
            Уменьшить значение на 1
            </summary>
            <returns>Текущее значение или Counter.FailureNum</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.InternalCounters.Counters.InternalNumberOfItemsCounter.DecrementBy(System.Int64)">
            <summary>
            Уменьшить значение на "value"
            </summary>
            <param name="value">Значение, на которое уменьшаем</param>
            <returns>Текущее значение или Counter.FailureNum</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.InternalCounters.Counters.InternalNumberOfItemsCounter.Increment">
            <summary>
            Увеличить значение на 1
            </summary>
            <returns>Текущее значение или Counter.FailureNum</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.InternalCounters.Counters.InternalNumberOfItemsCounter.IncrementBy(System.Int64)">
            <summary>
            Увеличить значение на "value"
            </summary>
            <param name="value">Значение, на которое увеличиваем</param>
            <returns>Текущее значение или Counter.FailureNum</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.InternalCounters.Counters.InternalNumberOfItemsCounter.SetValue(System.Int64)">
            <summary>
            Задать значение
            </summary>
            <param name="value">Новое значение</param>
        </member>
        <member name="P:Libs.PerformanceCounters.InternalCounters.Counters.InternalNumberOfItemsCounter.CurrentValue">
            <summary>
            Получает текущее значение счетчика производительности
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.InternalCounters.Counters.InternalNumberOfItemsCounter.Descriptor">
            <summary>
            Дескриптор для счётчика InternalNumberOfItemsCounter
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.InternalCounters.Counters.InternalNumberOfItemsCounter.Descriptor.#ctor(System.String,System.String)">
            <summary>
            Конструктор Descriptor
            </summary>
            <param name="name">Имя счётчика</param>
            <param name="description">Описание счётчика</param>
        </member>
        <member name="M:Libs.PerformanceCounters.InternalCounters.Counters.InternalNumberOfItemsCounter.Descriptor.CreateCounter">
            <summary>
            Метод создания счётчика из дескриптора
            </summary>
            <returns>Созданный счётчик</returns>
        </member>
        <member name="T:Libs.PerformanceCounters.InternalCounters.Counters.InternalOperationsPerSecondCounter">
            <summary>
            Счётчик числа операций в секунду для InternalCounters
            </summary>
        </member>
        <member name="F:Libs.PerformanceCounters.InternalCounters.Counters.InternalOperationsPerSecondCounter.MeasurePeriodMs">
            <summary>
            Период аккумулирования для определения среднего числа операций в секунду
            </summary>
        </member>
        <member name="F:Libs.PerformanceCounters.InternalCounters.Counters.InternalOperationsPerSecondCounter.ReductionFactor">
            <summary>
            Степень сокращения измерений при достижении MeasurePeriodMs.
            Аккумулированное значение делятся на это значение, время отсчёта также сдвигается пропорционально.
            Обеспечивает постепенное затухание старых измерений
            </summary>
        </member>
        <member name="F:Libs.PerformanceCounters.InternalCounters.Counters.InternalOperationsPerSecondCounter.OperationCountMultiplier">
            <summary>
            Множитель числа операций в секунду для уменьшения ошибок округления.
            Должен быть кратен 2 и >= 2
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.InternalCounters.Counters.InternalOperationsPerSecondCounter.CreateDescriptor(System.String,System.String)">
            <summary>
            Метод создания дескриптора для InternalOperationsPerSecondCounter
            </summary>
            <param name="name">Имя счётчика</param>
            <param name="description">Описание счётчика</param>
            <returns>Дескриптор</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.InternalCounters.Counters.InternalOperationsPerSecondCounter.#ctor(System.String,System.String)">
            <summary>
            Конструктор InternalOperationsPerSecondCounter
            </summary>
            <param name="name">Имя счётчика</param>
            <param name="description">Описание счётчика</param>
        </member>
        <member name="M:Libs.PerformanceCounters.InternalCounters.Counters.InternalOperationsPerSecondCounter.TryGetValues(System.Int64@,System.Int64@)">
            <summary>
            Получить текущие значения числа операций и времени
            </summary>
            <param name="curVal">Число операций</param>
            <param name="timeStamp">Срез времени</param>
            <returns>Удалось ли прочитать атомарно</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.InternalCounters.Counters.InternalOperationsPerSecondCounter.GetValuesAtomic(System.Int64@,System.Int64@)">
            <summary>
            Получить атомарно значения числа операций и времени
            </summary>
            <param name="curVal">Число операций</param>
            <param name="timeStamp">Срез времени</param>
        </member>
        <member name="M:Libs.PerformanceCounters.InternalCounters.Counters.InternalOperationsPerSecondCounter.OpertionFinishedInternal(System.Int32)">
            <summary>
            Внутренний метод учёта операций
            </summary>
            <param name="opCnt">Число завершённых операций</param>
        </member>
        <member name="M:Libs.PerformanceCounters.InternalCounters.Counters.InternalOperationsPerSecondCounter.OperationFinished">
            <summary>
            Закончилась 1 операция
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.InternalCounters.Counters.InternalOperationsPerSecondCounter.OperationFinished(System.Int32)">
            <summary>
            Закончилось несколько операций
            </summary>
            <param name="operationCount">Число операций</param>
        </member>
        <member name="M:Libs.PerformanceCounters.InternalCounters.Counters.InternalOperationsPerSecondCounter.Reset">
            <summary>
            Сброс значения счётчика
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.InternalCounters.Counters.InternalOperationsPerSecondCounter.CurrentValue">
            <summary>
            Текущее значение
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.InternalCounters.Counters.InternalOperationsPerSecondCounter.Descriptor">
            <summary>
            Дескриптор для счётчика InternalOperationsPerSecondCounter
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.InternalCounters.Counters.InternalOperationsPerSecondCounter.Descriptor.#ctor(System.String,System.String)">
            <summary>
            Конструктор Descriptor
            </summary>
            <param name="name">Имя счётчика</param>
            <param name="description">Описание счётчика</param>
        </member>
        <member name="M:Libs.PerformanceCounters.InternalCounters.Counters.InternalOperationsPerSecondCounter.Descriptor.CreateCounter">
            <summary>
            Метод создания счётчика из дескриптора
            </summary>
            <returns>Созданный счётчик</returns>
        </member>
        <member name="T:Libs.PerformanceCounters.InternalCounters.InternalCounterFactory">
            <summary>
            Фабрика для внутренних счётчиков.
            Счётчики полностью функциональны, но доступны лишь в рамках приложения.
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.InternalCounters.InternalCounterFactory.#ctor">
            <summary>
            Конструктор InternalCounterFactory
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.InternalCounters.InternalCounterFactory.#ctor(Libs.PerformanceCounters.Configuration.InternalCountersConfiguration)">
            <summary>
            Конструктор InternalCounterFactory из конфигурации
            </summary>
            <param name="config">Конфигурация</param>
        </member>
        <member name="M:Libs.PerformanceCounters.InternalCounters.InternalCounterFactory.CreateEmptyCategory(System.String,System.String)">
            <summary>
            Создание пустой категории
            Для добавления элемента в названии категории - Name.SubName.SubSubName
            </summary>
            <param name="categoryName">Имя категории</param>
            <param name="categoryDescription">Описание категории</param>
            <returns>Категория</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.InternalCounters.InternalCounterFactory.CreateMultiInstanceCategory(System.String,System.String)">
            <summary>
            Создание категории c многими инстансами
            </summary>
            <param name="categoryName">Имя категории</param>
            <param name="categoryDescription">Описание категории</param>
            <returns>Категория</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.InternalCounters.InternalCounterFactory.CreateSingleInstanceCategory(System.String,System.String)">
            <summary>
            Создание категории
            </summary>
            <param name="categoryName">Имя категории</param>
            <param name="categoryDescription">Описание категории</param>
            <returns>Категория</returns>
        </member>
        <member name="P:Libs.PerformanceCounters.InternalCounters.InternalCounterFactory.Categories">
            <summary>
            Перечень дочерних категорий
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.NullCounters.Categories.NullEmptyCategory">
            <summary>
            Пустая категория для NullCounters
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.NullCounters.Categories.NullEmptyCategory.#ctor(System.String,System.String)">
            <summary>
            Конструктор для создания пустой подкатегории NullEmptyCategory.
            </summary>
            <param name="name">Название категории</param>
            <param name="description">Описание категории</param>
        </member>
        <member name="M:Libs.PerformanceCounters.NullCounters.Categories.NullEmptyCategory.CreateEmptySubCategory(System.String,System.String)">
            <summary>
            Создание пустой подкатегории
            Для добавления элемента в названии категории - Name.SubName.SubSubName
            </summary>
            <param name="categoryName">Имя подкатегории</param>
            <param name="categoryDescription">Описание категории</param>
            <returns>Созданная подкатегория</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.NullCounters.Categories.NullEmptyCategory.CreateMultiInstanceSubCategory(System.String,System.String)">
            <summary>
            Создание подкатегории c многими инстансами
            </summary>
            <param name="categoryName">Имя категории</param>
            <param name="categoryDescription">Описание категории</param>
            <returns>Созданная подкатегория</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.NullCounters.Categories.NullEmptyCategory.CreateSingleInstanceSubCategory(System.String,System.String)">
            <summary>
            Создание простой подкатегории
            </summary>
            <param name="categoryName">Имя категории</param>
            <param name="categoryDescription">Описание категории</param>
            <returns>Созданная подкатегория</returns>
        </member>
        <member name="T:Libs.PerformanceCounters.NullCounters.Categories.NullInstanceInMultiInstanceCategory">
            <summary>
            Инстанс в многоинстансовой категории для NullCounters
            </summary> 
        </member>
        <member name="M:Libs.PerformanceCounters.NullCounters.Categories.NullInstanceInMultiInstanceCategory.#ctor(Libs.PerformanceCounters.NullCounters.Categories.NullMultiInstanceCategory,System.String)">
            <summary>
            Конструктор для создания инстанса NullInstanceInMultiInstanceCategory
            </summary>
            <param name="parent">Родительская многоинстовая категория</param>
            <param name="instanceName">Имя инстанса</param>
        </member>
        <member name="M:Libs.PerformanceCounters.NullCounters.Categories.NullInstanceInMultiInstanceCategory.HasCounter(System.String)">
            <summary>
            Есть ли счётчик с указанным именем (перманентно true)
            </summary>
            <param name="counterName">Имя счётчика</param>
            <returns>Есть ли он</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.NullCounters.Categories.NullInstanceInMultiInstanceCategory.GetCounter(System.String)">
            <summary>
            Получение счетчика по имени. Не поддерживается. Бросает исключение.
            </summary>
            <param name="counterName">Имя счетчика</param>
            <returns>Счётчик</returns>
            <exception cref="T:System.NotSupportedException">Всегда</exception>
        </member>
        <member name="M:Libs.PerformanceCounters.NullCounters.Categories.NullInstanceInMultiInstanceCategory.GetCounter(System.String,Libs.PerformanceCounters.CounterTypes)">
            <summary>
            Получение счетчика определенного типа. Всегда создаёт новый.
            </summary>
            <param name="counterName">Имя счетчика</param>
            <param name="expectedCounterType">Тип счётчика</param>
            <returns>Счётчик</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.NullCounters.Categories.NullInstanceInMultiInstanceCategory.Remove">
            <summary>
            Удаление инстанса
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.NullCounters.Categories.NullInstanceInMultiInstanceCategory.IsAlive">
            <summary>
            Живой ли инстанс (не был ли удалён)
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.NullCounters.Categories.NullMultiInstanceCategory">
            <summary>
            Создание категории поддерживающей многочисленные инстансы для NullCounters
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.NullCounters.Categories.NullMultiInstanceCategory.#ctor(System.String,System.String)">
            <summary>
            Конструктор категории NullMultiInstanceCategory
            </summary>
            <param name="name">Имя категории</param>
            <param name="description">Описание категории</param>
        </member>
        <member name="M:Libs.PerformanceCounters.NullCounters.Categories.NullMultiInstanceCategory.HasInstance(System.String)">
            <summary>
            Существует ли инстанс счётчиков. Перманентно true.
            </summary>
            <param name="instanceName">Имя инстанса</param>
            <returns>Существует ли</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.NullCounters.Categories.NullMultiInstanceCategory.RemoveInstance(System.String)">
            <summary>
            Удалить инстанс. Ничего не делает.
            </summary>
            <param name="instanceName">Имя инстанса</param>
            <returns>Существал ли</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.NullCounters.Categories.NullMultiInstanceCategory.CreateCounter(Libs.PerformanceCounters.CounterTypes,System.String,System.String)">
            <summary>
            Создать счётчик определённого типа
            </summary>
            <param name="type">Тип счётчика</param>
            <param name="counterName">Имя счетчика</param>
            <param name="counterDescription">Описание счетчика</param>
        </member>
        <member name="M:Libs.PerformanceCounters.NullCounters.Categories.NullMultiInstanceCategory.CreateEmptySubCategory(System.String,System.String)">
            <summary>
            Создание пустой подкатегории
            Для добавления элемента в названии категории - Name.SubName.SubSubName
            </summary>
            <param name="categoryName">Имя подкатегории</param>
            <param name="categoryDescription">Описание категории</param>
            <returns>Созданная подкатегория</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.NullCounters.Categories.NullMultiInstanceCategory.CreateMultiInstanceSubCategory(System.String,System.String)">
            <summary>
            Создание подкатегории c многими инстансами
            </summary>
            <param name="categoryName">Имя категории</param>
            <param name="categoryDescription">Описание категории</param>
            <returns>Созданная подкатегория</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.NullCounters.Categories.NullMultiInstanceCategory.CreateSingleInstanceSubCategory(System.String,System.String)">
            <summary>
            Создание простой подкатегории
            </summary>
            <param name="categoryName">Имя категории</param>
            <param name="categoryDescription">Описание категории</param>
            <returns>Созданная подкатегория</returns>
        </member>
        <member name="P:Libs.PerformanceCounters.NullCounters.Categories.NullMultiInstanceCategory.Item(System.String)">
            <summary>
            Создание инстанса
            </summary>
            <param name="instanceName">Имя инстанса</param>
            <returns>Инстанс</returns>
        </member>
        <member name="T:Libs.PerformanceCounters.NullCounters.Categories.NullSingleInstanceCategory">
            <summary>
            Создание категории с одним инстансом для NullCounters
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.NullCounters.Categories.NullSingleInstanceCategory.#ctor(System.String,System.String)">
            <summary>
            Конструктор NullSingleInstanceCategory
            </summary>
            <param name="name">Имя категории</param>
            <param name="description">Описание категории</param>
        </member>
        <member name="M:Libs.PerformanceCounters.NullCounters.Categories.NullSingleInstanceCategory.CreateCounter(Libs.PerformanceCounters.CounterTypes,System.String,System.String)">
            <summary>
            Создать счётчик определённого типа
            </summary>
            <param name="type">Тип счётчика</param>
            <param name="counterName">Имя счётчика</param>
            <param name="counterDescription">Описание счётчика</param>
            <returns>Счётчик</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.NullCounters.Categories.NullSingleInstanceCategory.HasCounter(System.String)">
            <summary>
            Есть ли счётчик с указанным именем. Перманентно true.
            </summary>
            <param name="counterName">Имя счётчика</param>
            <returns>Есть ли он</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.NullCounters.Categories.NullSingleInstanceCategory.GetCounter(System.String)">
            <summary>
            Получение счетчика по имени. Не поддерживается. Бросает исключение.
            </summary>
            <param name="counterName">Имя счетчика</param>
            <returns>Счётчик</returns>
            <exception cref="T:System.NotSupportedException">Всегда</exception>
        </member>
        <member name="M:Libs.PerformanceCounters.NullCounters.Categories.NullSingleInstanceCategory.GetCounter(System.String,Libs.PerformanceCounters.CounterTypes)">
            <summary>
            Получение счетчика определенного типа. Всегда создаёт новый.
            </summary>
            <param name="counterName">Имя счетчика</param>
            <param name="expectedCounterType">Тип счётчика</param>
            <returns>Счётчик</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.NullCounters.Categories.NullSingleInstanceCategory.CreateEmptySubCategory(System.String,System.String)">
            <summary>
            Создание пустой подкатегории
            Для добавления элемента в названии категории - Name.SubName.SubSubName
            </summary>
            <param name="categoryName">Имя подкатегории</param>
            <param name="categoryDescription">Описание категории</param>
            <returns>Созданная подкатегория</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.NullCounters.Categories.NullSingleInstanceCategory.CreateMultiInstanceSubCategory(System.String,System.String)">
            <summary>
            Создание подкатегории c многими инстансами
            </summary>
            <param name="categoryName">Имя категории</param>
            <param name="categoryDescription">Описание категории</param>
            <returns>Созданная подкатегория</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.NullCounters.Categories.NullSingleInstanceCategory.CreateSingleInstanceSubCategory(System.String,System.String)">
            <summary>
            Создание простой подкатегории
            </summary>
            <param name="categoryName">Имя категории</param>
            <param name="categoryDescription">Описание категории</param>
            <returns>Созданная подкатегория</returns>
        </member>
        <member name="T:Libs.PerformanceCounters.NullCounters.Counters.NullAverageCountCounter">
            <summary>
            Счётчик замера среднего числа значений для NullCounters
            </summary> 
        </member>
        <member name="M:Libs.PerformanceCounters.NullCounters.Counters.NullAverageCountCounter.#ctor(System.String,System.String)">
            <summary>
            Конструктор NullAverageCountCounter
            </summary>
            <param name="name">Имя</param>
            <param name="description">Описание</param>
        </member>
        <member name="M:Libs.PerformanceCounters.NullCounters.Counters.NullAverageCountCounter.RegisterValue(System.Int64)">
            <summary>
            Зарегистрировать измерение
            </summary>
            <param name="value">Новое значение</param>
        </member>
        <member name="P:Libs.PerformanceCounters.NullCounters.Counters.NullAverageCountCounter.CurrentValue">
            <summary>
            Текущее значение
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.NullCounters.Counters.NullAverageTimeCounter">
            <summary>
            Счётчик среднего времени для NullCounters
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.NullCounters.Counters.NullAverageTimeCounter.#ctor(System.String,System.String)">
            <summary>
            Конструктор NullAverageTimeCounter
            </summary>
            <param name="name">Имя</param>
            <param name="description">Описание</param>
        </member>
        <member name="M:Libs.PerformanceCounters.NullCounters.Counters.NullAverageTimeCounter.RegisterMeasurement(System.TimeSpan)">
            <summary>
            Зарегистрировать измерение
            </summary>
            <param name="period">Период</param>
        </member>
        <member name="P:Libs.PerformanceCounters.NullCounters.Counters.NullAverageTimeCounter.CurrentValue">
            <summary>
            Текущее значение
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.NullCounters.Counters.NullElapsedTimeCounter">
            <summary>
            Счётчик, который показывает полное время от начала работы компонента или процесса, для NullCounters
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.NullCounters.Counters.NullElapsedTimeCounter.#ctor(System.String,System.String)">
            <summary>
            Конструктор NullElapsedTimeCounter
            </summary>
            <param name="name">Имя</param>
            <param name="description">Описание</param>
        </member>
        <member name="M:Libs.PerformanceCounters.NullCounters.Counters.NullElapsedTimeCounter.Reset">
            <summary>
            Сбросить прошедшее время
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.NullCounters.Counters.NullElapsedTimeCounter.CurrentValue">
            <summary>
            Текущее время, которое прошло с момента запуска
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.NullCounters.Counters.NullMomentTimeCounter">
            <summary>
            Счётчик мгновенного времени для NullCounters
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.NullCounters.Counters.NullMomentTimeCounter.#ctor(System.String,System.String)">
            <summary>
            Конструктор NullMomentTimeCounter
            </summary>
            <param name="name">Имя</param>
            <param name="description">Описание</param>
        </member>
        <member name="M:Libs.PerformanceCounters.NullCounters.Counters.NullMomentTimeCounter.RegisterMeasurement(System.TimeSpan)">
            <summary>
            Зарегистрировать измерение
            </summary>
            <param name="period">Период</param>
        </member>
        <member name="P:Libs.PerformanceCounters.NullCounters.Counters.NullMomentTimeCounter.CurrentValue">
            <summary>
            Текущее значение
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.NullCounters.Counters.NullNumberOfItemsCounter">
            <summary>
            Счетчик мгновенного значения, показывающий последнее наблюдавшееся значение, для NullCounters
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.NullCounters.Counters.NullNumberOfItemsCounter.#ctor(System.String,System.String)">
            <summary>
            Конструктор NullNumberOfItemsCounter
            </summary>
            <param name="name">Имя счётчика</param>
            <param name="description">Описание счётчика</param>
        </member>
        <member name="M:Libs.PerformanceCounters.NullCounters.Counters.NullNumberOfItemsCounter.Decrement">
            <summary>
            Уменьшить значение на 1
            </summary>
            <returns>Текущее значение или Counter.FailureNum</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.NullCounters.Counters.NullNumberOfItemsCounter.DecrementBy(System.Int64)">
            <summary>
            Уменьшить значение на "value"
            </summary>
            <param name="value">Значение, на которое уменьшаем</param>
            <returns>Текущее значение или Counter.FailureNum</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.NullCounters.Counters.NullNumberOfItemsCounter.Increment">
            <summary>
            Увеличить значение на 1
            </summary>
            <returns>Текущее значение или Counter.FailureNum</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.NullCounters.Counters.NullNumberOfItemsCounter.IncrementBy(System.Int64)">
            <summary>
            Увеличить значение на "value"
            </summary>
            <param name="value">Значение, на которое увеличиваем</param>
            <returns>Текущее значение или Counter.FailureNum</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.NullCounters.Counters.NullNumberOfItemsCounter.SetValue(System.Int64)">
            <summary>
            Задать значение
            </summary>
            <param name="value">Новое значение</param>
        </member>
        <member name="P:Libs.PerformanceCounters.NullCounters.Counters.NullNumberOfItemsCounter.CurrentValue">
            <summary>
            Получает текущее значение счетчика производительности
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.NullCounters.Counters.NullOperationPerSecondCounter">
            <summary>
            Счётчик числа операций в секунду для NullCounters
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.NullCounters.Counters.NullOperationPerSecondCounter.#ctor(System.String,System.String)">
            <summary>
            Конструктор NullOperationPerSecondCounter
            </summary>
            <param name="name">Имя счётчика</param>
            <param name="description">Описание счётчика</param>
        </member>
        <member name="M:Libs.PerformanceCounters.NullCounters.Counters.NullOperationPerSecondCounter.OperationFinished">
            <summary>
            Закончилась 1 операция
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.NullCounters.Counters.NullOperationPerSecondCounter.OperationFinished(System.Int32)">
            <summary>
            Закончилось несколько операций
            </summary>
            <param name="operationCount">Число операций</param>
        </member>
        <member name="P:Libs.PerformanceCounters.NullCounters.Counters.NullOperationPerSecondCounter.CurrentValue">
            <summary>
            Текущее значение
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.NullCounters.NullCounterFactory">
            <summary>
            Фабрика для счётчиков, которые не считают.
            Можно использовать для создания счётчиков, когда они не нужны, но нужно избежать NullReferenceException
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.NullCounters.NullCounterFactory.#ctor">
            <summary>
            Конструктор NullCounterFactory
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.NullCounters.NullCounterFactory.CreateEmptyCategory(System.String,System.String)">
            <summary>
            Создание пустой категории
            Для добавления элемента в названии категории - Name.SubName.SubSubName
            </summary>
            <param name="categoryName">Имя категории</param>
            <param name="categoryDescription">Описание категории</param>
            <returns>Категория</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.NullCounters.NullCounterFactory.CreateMultiInstanceCategory(System.String,System.String)">
            <summary>
            Создание категории c многими инстансами
            </summary>
            <param name="categoryName">Имя категории</param>
            <param name="categoryDescription">Описание категории</param>
            <returns>Категория</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.NullCounters.NullCounterFactory.CreateSingleInstanceCategory(System.String,System.String)">
            <summary>
            Создание категории
            </summary>
            <param name="categoryName">Имя категории</param>
            <param name="categoryDescription">Описание категории</param>
            <returns>Категория</returns>
        </member>
        <member name="P:Libs.PerformanceCounters.NullCounters.NullCounterFactory.Instance">
            <summary>
            Инстанс фабрики
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.PerfCountersDefault">
            <summary>
            Контейнер стандартных счётчиков
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.PerfCountersDefault.SetDefaultFactory(Libs.PerformanceCounters.CounterFactory)">
            <summary>
            Задать новое значение инстанса фабрики счётчиков
            </summary>
            <param name="factory">Фабрика счётчиков</param>
        </member>
        <member name="M:Libs.PerformanceCounters.PerfCountersDefault.ResetDefaultFactory">
            <summary>
            Сбросить значение фабрики счётчиков.
            Возвращает InternalCounterFactory.
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.PerfCountersDefault.LoadDefaultFactoryFromAppConfig(System.String)">
            <summary>
            Загрузить фабрику счётчиков из файла конфигурации
            </summary>
            <param name="sectionName">Имя секции в файле конфигурации</param>
        </member>
        <member name="P:Libs.PerformanceCounters.PerfCountersDefault.NullCounterFactory">
            <summary>
            Фабрика для NullCounters
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.PerfCountersDefault.DefaultFactory">
            <summary>
            Инстанс фабрики счётчиков.
            По умолчанию тут InternalCounterFactory
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.PerfCountersInstantiationFactory">
            <summary>
            Фабрика для инстанцирования фабрик счётчиков
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.PerfCountersInstantiationFactory.CreateCounterFactoryFromAppConfig(System.String)">
            <summary>
            Загрузить из конфига и создать фабрику счётчиков
            </summary>
            <param name="sectionName">Имя секции</param>
            <returns>Созданная фабрика счётчиков</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.PerfCountersInstantiationFactory.CreateCounterFactoryFromAppConfig(System.String,System.String)">
            <summary>
            Загрузить из конфига и создать фабрику счётчиков
            </summary>
            <param name="sectionGroupName">Имя группы секций</param>
            <param name="sectionName">Имя секции</param>
            <returns>Созданная фабрика счётчиков</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.PerfCountersInstantiationFactory.CreateCounterFactory(Libs.PerformanceCounters.Configuration.PerfCountersConfiguration)">
            <summary>
            Создать фабрику счётчиков на основе конфигурации
            </summary>
            <param name="config">Конфигурация</param>
            <returns>Созданная фабрика счётчиков</returns>
        </member>
        <member name="T:Libs.PerformanceCounters.WinCounters.Categories.IWinCategoryInitialization">
            <summary>
            Интерфейс для категорий Windows в помощь при инициализации.
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.IWinCategoryInitialization.Init">
            <summary>
            Инициализировать данную категорию
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.IWinCategoryInitialization.InitCascade">
            <summary>
            Инициализировать данную и все дочерние категории
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.IWinCategoryInitialization.Dispose">
            <summary>
            Освободить данную категорию
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.IWinCategoryInitialization.DisposeCascade">
            <summary>
            Освободить данную и все дочерние категории
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.IWinCategoryInitialization.RemoveCategory">
            <summary>
            Удалить данную категорию из Windows
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.IWinCategoryInitialization.RemoveCategoryCascade">
            <summary>
            Удалить данную и все дочерние категории из Windows
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.IWinCategoryInitialization.RemoveInstances">
            <summary>
            Удалить все инстансы в многоинстансовой категории
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.IWinCategoryInitialization.RemoveInstancesCascade">
            <summary>
            Удалить все инстансы в многоинстансовой категории каскадом
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.WinCounters.Categories.RecreateModeCategories.RecreateWinMultiInstanceCategory">
            <summary>
            Категория, поддерживающая многочисленные инстансы для WinCounters.
            Работает в режиме, когда счётчики и категории можно удалять/добавлять
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.WinCounters.Categories.WinMultiInstanceCategory">
            <summary>
            Категория, поддерживающая многочисленные инстансы для WinCounters (Базовый класс)
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.WinMultiInstanceCategory.#ctor(System.String,System.String,System.String,Libs.PerformanceCounters.WinCounters.Helpers.WinCountersWorkingInfo)">
            <summary>
            Конструктор WinMultiInstanceCategory
            </summary>
            <param name="name">Имя категории</param>
            <param name="description">Описание категории</param>
            <param name="rootName">Корневое имя</param>
            <param name="info">Информация о функционировании</param>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.WinMultiInstanceCategory.CreateEmptySubCategoryInner(System.String,System.String)">
            <summary>
            Внутренний метод создания дочерней пустой категории
            </summary>
            <param name="categoryName">Имя подкатегории</param>
            <param name="categoryDescription">Описание подкатегории</param>
            <returns>Созданная подкатегория</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.WinMultiInstanceCategory.CreateMultiInstanceSubCategoryInner(System.String,System.String)">
            <summary>
            Внутренний метод создания дочерней категории c многими инстансами
            </summary>
            <param name="categoryName">Имя подкатегории</param>
            <param name="categoryDescription">Описание подкатегории</param>
            <returns>Созданная подкатегория</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.WinMultiInstanceCategory.CreateSingleInstanceSubCategoryInner(System.String,System.String)">
            <summary>
            Внутренний метод создания дочерней категории
            </summary>
            <param name="categoryName">Имя подкатегории</param>
            <param name="categoryDescription">Описание подкатегории</param>
            <returns>Созданная подкатегория</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.WinMultiInstanceCategory.CreateEmptySubCategory(System.String,System.String)">
            <summary>
            Создание пустой подкатегории
            Для добавления элемента в названии категории - Name.SubName.SubSubName
            </summary>
            <param name="categoryName">Имя подкатегории</param>
            <param name="categoryDescription">Описание подкатегории</param>
            <returns>Созданная подкатегория</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.WinMultiInstanceCategory.CreateMultiInstanceSubCategory(System.String,System.String)">
            <summary>
            Создание подкатегории c многими инстансами
            </summary>
            <param name="categoryName">Имя категории</param>
            <param name="categoryDescription">Описание категории</param>
            <returns>Созданная подкатегория</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.WinMultiInstanceCategory.CreateSingleInstanceSubCategory(System.String,System.String)">
            <summary>
            Создание простой подкатегории
            </summary>
            <param name="categoryName">Имя категории</param>
            <param name="categoryDescription">Описание категории</param>
            <returns>Созданная подкатегория</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.WinMultiInstanceCategory.InitCategory">
            <summary>
            Инициализация категории
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.WinMultiInstanceCategory.Init">
            <summary>
            Инициализация счетчиков (создание категорий, инстанцирование самих счетчиков)
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.WinMultiInstanceCategory.RemoveCategory">
            <summary>
            Удаление категории из Windows
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.WinMultiInstanceCategory.RemoveInstances">
            <summary>
            Удалить все инстансы в многоинстансовой категории (в том числе и из Windows)
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.WinMultiInstanceCategory.HasWindowsInstance(System.String)">
            <summary>
            Есть ли в Windows инстанс с указанным именем
            </summary>
            <param name="instanceName">Имя инстанса</param>
            <returns>Есть ли</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.WinMultiInstanceCategory.Libs#PerformanceCounters#WinCounters#Categories#IWinCategoryInitialization#Init">
            <summary>
            Инициализировать данную категорию
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.WinMultiInstanceCategory.Libs#PerformanceCounters#WinCounters#Categories#IWinCategoryInitialization#RemoveInstances">
            <summary>
            Удалить все инстансы в многоинстансовой категории
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.WinMultiInstanceCategory.Libs#PerformanceCounters#WinCounters#Categories#IWinCategoryInitialization#RemoveCategory">
            <summary>
            Удалить данную категорию из Windows
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.WinMultiInstanceCategory.Libs#PerformanceCounters#WinCounters#Categories#IWinCategoryInitialization#InitCascade">
            <summary>
            Инициализировать данную и все дочерние категории
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.WinMultiInstanceCategory.Libs#PerformanceCounters#WinCounters#Categories#IWinCategoryInitialization#RemoveInstancesCascade">
            <summary>
            Удалить все инстансы в многоинстансовой категории каскадом
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.WinMultiInstanceCategory.Libs#PerformanceCounters#WinCounters#Categories#IWinCategoryInitialization#RemoveCategoryCascade">
            <summary>
            Удалить данную и все дочерние категории из Windows
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.WinMultiInstanceCategory.Libs#PerformanceCounters#WinCounters#Categories#IWinCategoryInitialization#DisposeCascade">
            <summary>
            Освободить данную и все дочерние категории
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.WinMultiInstanceCategory.Dispose(System.Boolean)">
            <summary>
            Освобождение ресурсов
            </summary>
            <param name="isUserCall">Было ли инициировано пользователем</param>
        </member>
        <member name="P:Libs.PerformanceCounters.WinCounters.Categories.WinMultiInstanceCategory.Info">
            <summary>
            Информация о функционировании
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.WinCounters.Categories.WinMultiInstanceCategory.State">
            <summary>
            Состояние
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.WinCounters.Categories.WinMultiInstanceCategory.FullName">
            <summary>
            Полное имя (включая корневое), которое будет видно в Windows
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.WinCounters.Categories.WinMultiInstanceCategory.ChildCategories">
            <summary>
            Перечень дочерних категорий
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.WinCounters.Categories.WinMultiInstanceCategory.Instances">
            <summary>
            Перечень инстансов
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.WinCounters.Categories.WinMultiInstanceCategory.Counters">
            <summary>
            Перечень описателей счётчиков для внутреннего использования
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.RecreateModeCategories.RecreateWinMultiInstanceCategory.#ctor(System.String,System.String,System.String,Libs.PerformanceCounters.WinCounters.Helpers.WinCountersWorkingInfo)">
            <summary>
            Конструктор RecreateWinMultiInstanceCategory
            </summary>
            <param name="name">Имя категории</param>
            <param name="description">Описание категории</param>
            <param name="rootName">Корневое имя</param>
            <param name="info">Информация о функционировании</param>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.RecreateModeCategories.RecreateWinMultiInstanceCategory.TryAddInstance(System.String)">
            <summary>
            Добавление нового инстанса, если его нет
            </summary>
            <param name="instanceName">Имя инстанса</param>
            <returns>Был ли добавлен (false, если уже существовал)</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.RecreateModeCategories.RecreateWinMultiInstanceCategory.HasInstance(System.String)">
            <summary>
            Существует ли инстанс счётчиков
            </summary>
            <param name="instanceName">Имя инстанса</param>
            <returns>Существует ли</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.RecreateModeCategories.RecreateWinMultiInstanceCategory.RemoveInstance(System.String)">
            <summary>
            Удалить инстанс
            </summary>
            <param name="instanceName">Имя инстанса</param>
            <returns>Существал ли</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.RecreateModeCategories.RecreateWinMultiInstanceCategory.CreateCounter(Libs.PerformanceCounters.CounterTypes,System.String,System.String)">
            <summary>
            Создать счётчик определённого типа
            </summary>
            <param name="type">Тип счётчика</param>
            <param name="counterName">Имя счетчика</param>
            <param name="counterDescription">Описание счетчика</param>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.RecreateModeCategories.RecreateWinMultiInstanceCategory.HasWinCategory">
            <summary>
            Существует ли категория с тем же именем в Windows
            </summary>
            <returns>Существует ли</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.RecreateModeCategories.RecreateWinMultiInstanceCategory.DeleteWinCategory">
            <summary>
            Удалить категорию с моим именем из Windows
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.RecreateModeCategories.RecreateWinMultiInstanceCategory.CreateWinCategory(System.Diagnostics.CounterCreationDataCollection)">
            <summary>
            Создание в Windows новой многоинстансовой категории
            </summary>
            <param name="counterData">Перечень счётчиков в категории</param>
            <returns>Созданная категория</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.RecreateModeCategories.RecreateWinMultiInstanceCategory.GetExistedWinCategory">
            <summary>
            Получить существующую категорию из Windows с таким же именем
            </summary>
            <returns>Категория</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.RecreateModeCategories.RecreateWinMultiInstanceCategory.InitCategory">
            <summary>
            Инициализация категории
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.RecreateModeCategories.RecreateWinMultiInstanceCategory.RemoveCategory">
            <summary>
            Удаление категории из Windows
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.RecreateModeCategories.RecreateWinMultiInstanceCategory.RemoveInstances">
            <summary>
            Удалить все инстансы в многоинстансовой категории (в том числе и из Windows)
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.RecreateModeCategories.RecreateWinMultiInstanceCategory.Dispose(System.Boolean)">
            <summary>
            Освобождение ресурсов
            </summary>
            <param name="isUserCall">Было ли инициировано пользователем</param>
        </member>
        <member name="P:Libs.PerformanceCounters.WinCounters.Categories.RecreateModeCategories.RecreateWinMultiInstanceCategory.Instances">
            <summary>
            Перечень инстансов
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.WinCounters.Categories.RecreateModeCategories.RecreateWinMultiInstanceCategory.Counters">
            <summary>
            Перечень описателей счётчиков для внутреннего использования
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.WinCounters.Categories.RecreateModeCategories.RecreateWinMultiInstanceCategory.Item(System.String)">
            <summary>
            Получение или создание инстанса
            </summary>
            <param name="instanceName">Имя инстанса</param>
            <returns>Инстанс</returns>
        </member>
        <member name="T:Libs.PerformanceCounters.WinCounters.Categories.RecreateModeCategories.RecreateWinSingleInstanceCategory">
            <summary>
            Категория с одним инстансом для WinCounters.
            Работает в режиме, когда счётчики и категории можно удалять/добавлять
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.WinCounters.Categories.WinSingleInstanceCategory">
            <summary>
            Категория с одним инстансом для WinCounters. (Базовый класс)
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.WinSingleInstanceCategory.#ctor(System.String,System.String,System.String,Libs.PerformanceCounters.WinCounters.Helpers.WinCountersWorkingInfo)">
            <summary>
            Конструктор WinSingleInstanceCategory
            </summary>
            <param name="name">Имя категории</param>
            <param name="description">Описание категории</param>
            <param name="rootName">Корневое имя</param>
            <param name="info">Информация о функционировании</param>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.WinSingleInstanceCategory.CreateEmptySubCategoryInner(System.String,System.String)">
            <summary>
            Внутренний метод создания дочерней пустой категории
            </summary>
            <param name="categoryName">Имя подкатегории</param>
            <param name="categoryDescription">Описание подкатегории</param>
            <returns>Созданная подкатегория</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.WinSingleInstanceCategory.CreateMultiInstanceSubCategoryInner(System.String,System.String)">
            <summary>
            Внутренний метод создания дочерней категории c многими инстансами
            </summary>
            <param name="categoryName">Имя подкатегории</param>
            <param name="categoryDescription">Описание подкатегории</param>
            <returns>Созданная подкатегория</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.WinSingleInstanceCategory.CreateSingleInstanceSubCategoryInner(System.String,System.String)">
            <summary>
            Внутренний метод создания дочерней категории
            </summary>
            <param name="categoryName">Имя подкатегории</param>
            <param name="categoryDescription">Описание подкатегории</param>
            <returns>Созданная подкатегория</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.WinSingleInstanceCategory.CreateEmptySubCategory(System.String,System.String)">
            <summary>
            Создание пустой подкатегории
            Для добавления элемента в названии категории - Name.SubName.SubSubName
            </summary>
            <param name="categoryName">Имя подкатегории</param>
            <param name="categoryDescription">Описание подкатегории</param>
            <returns>Созданная подкатегория</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.WinSingleInstanceCategory.CreateMultiInstanceSubCategory(System.String,System.String)">
            <summary>
            Создание подкатегории c многими инстансами
            </summary>
            <param name="categoryName">Имя категории</param>
            <param name="categoryDescription">Описание категории</param>
            <returns>Созданная подкатегория</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.WinSingleInstanceCategory.CreateSingleInstanceSubCategory(System.String,System.String)">
            <summary>
            Создание простой подкатегории
            </summary>
            <param name="categoryName">Имя категории</param>
            <param name="categoryDescription">Описание категории</param>
            <returns>Созданная подкатегория</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.WinSingleInstanceCategory.InitCategory">
            <summary>
            Инициализация категории
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.WinSingleInstanceCategory.Init">
            <summary>
            Инициализация счетчиков (создание категорий, инстанцирование самих счетчиков)
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.WinSingleInstanceCategory.RemoveCategory">
            <summary>
            Удаление категории из Windows
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.WinSingleInstanceCategory.Libs#PerformanceCounters#WinCounters#Categories#IWinCategoryInitialization#Init">
            <summary>
            Инициализировать данную категорию
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.WinSingleInstanceCategory.Libs#PerformanceCounters#WinCounters#Categories#IWinCategoryInitialization#RemoveInstances">
            <summary>
            Удалить все инстансы в многоинстансовой категории
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.WinSingleInstanceCategory.Libs#PerformanceCounters#WinCounters#Categories#IWinCategoryInitialization#RemoveCategory">
            <summary>
            Удалить данную категорию из Windows
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.WinSingleInstanceCategory.Libs#PerformanceCounters#WinCounters#Categories#IWinCategoryInitialization#InitCascade">
            <summary>
            Инициализировать данную и все дочерние категории
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.WinSingleInstanceCategory.Libs#PerformanceCounters#WinCounters#Categories#IWinCategoryInitialization#RemoveInstancesCascade">
            <summary>
            Удалить все инстансы в многоинстансовой категории каскадом
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.WinSingleInstanceCategory.Libs#PerformanceCounters#WinCounters#Categories#IWinCategoryInitialization#RemoveCategoryCascade">
            <summary>
            Удалить данную и все дочерние категории из Windows
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.WinSingleInstanceCategory.Libs#PerformanceCounters#WinCounters#Categories#IWinCategoryInitialization#DisposeCascade">
            <summary>
            Освободить данную и все дочерние категории
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.WinSingleInstanceCategory.Dispose(System.Boolean)">
            <summary>
            Освобождение ресурсов
            </summary>
            <param name="isUserCall">Было ли инициировано пользователем</param>
        </member>
        <member name="P:Libs.PerformanceCounters.WinCounters.Categories.WinSingleInstanceCategory.Info">
            <summary>
            Информация о функционировании
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.WinCounters.Categories.WinSingleInstanceCategory.State">
            <summary>
            Состояние
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.WinCounters.Categories.WinSingleInstanceCategory.FullName">
            <summary>
            Полное имя (включая корневое), которое будет видно в Windows
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.WinCounters.Categories.WinSingleInstanceCategory.ChildCategories">
            <summary>
            Перечень дочерних категорий
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.WinCounters.Categories.WinSingleInstanceCategory.Counters">
            <summary>
            Перечень счётчиков
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.RecreateModeCategories.RecreateWinSingleInstanceCategory.#ctor(System.String,System.String,System.String,Libs.PerformanceCounters.WinCounters.Helpers.WinCountersWorkingInfo)">
            <summary>
            Конструктор RecreateWinSingleInstanceCategory
            </summary>
            <param name="name">Имя категории</param>
            <param name="description">Описание категории</param>
            <param name="rootName">Корневое имя</param>
            <param name="info">Информация о функционировании</param>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.RecreateModeCategories.RecreateWinSingleInstanceCategory.CreateCounter(Libs.PerformanceCounters.CounterTypes,System.String,System.String)">
            <summary>
            Создать счётчик определённого типа
            </summary>
            <param name="type">Тип счётчика</param>
            <param name="counterName">Имя счётчика</param>
            <param name="counterDescription">Описание счётчика</param>
            <returns>Счётчик</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.RecreateModeCategories.RecreateWinSingleInstanceCategory.HasCounter(System.String)">
            <summary>
            Есть ли счётчик с указанным именем
            </summary>
            <param name="counterName">Имя счётчика</param>
            <returns>Есть ли он</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.RecreateModeCategories.RecreateWinSingleInstanceCategory.GetCounter(System.String)">
            <summary>
            Получение счетчика определенного типа
            </summary>
            <param name="counterName">Имя счетчика</param>
            <returns>Счётчик</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.RecreateModeCategories.RecreateWinSingleInstanceCategory.GetCounter(System.String,Libs.PerformanceCounters.CounterTypes)">
            <summary>
            Получение счетчика определенного типа
            </summary>
            <param name="counterName">Имя счетчика</param>
            <param name="expectedCounterType">Тип счётчика</param>
            <returns>Счётчик</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.RecreateModeCategories.RecreateWinSingleInstanceCategory.HasWinCategory">
            <summary>
            Существует ли категория с тем же именем в Windows
            </summary>
            <returns>Существует ли</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.RecreateModeCategories.RecreateWinSingleInstanceCategory.DeleteWinCategory">
            <summary>
            Удалить категорию с моим именем из Windows
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.RecreateModeCategories.RecreateWinSingleInstanceCategory.CreateWinCategory(System.Diagnostics.CounterCreationDataCollection)">
            <summary>
            Создание в Windows новой многоинстансовой категории
            </summary>
            <param name="counterData">Перечень счётчиков в категории</param>
            <returns>Созданная категория</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.RecreateModeCategories.RecreateWinSingleInstanceCategory.GetExistedWinCategory">
            <summary>
            Получить существующую категорию из Windows с таким же именем
            </summary>
            <returns>Категория</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.RecreateModeCategories.RecreateWinSingleInstanceCategory.InitCategory">
            <summary>
            Инициализация категории
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.RecreateModeCategories.RecreateWinSingleInstanceCategory.RemoveCategory">
            <summary>
            Удаление категории из Windows
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.RecreateModeCategories.RecreateWinSingleInstanceCategory.Dispose(System.Boolean)">
            <summary>
            Освобождение ресурсов
            </summary>
            <param name="isUserCall">Было ли инициировано пользователем</param>
        </member>
        <member name="P:Libs.PerformanceCounters.WinCounters.Categories.RecreateModeCategories.RecreateWinSingleInstanceCategory.Counters">
            <summary>
            Перечень счётчиков
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.WinCounters.Categories.UseOnlyExistedModeCategrories.UseOnlyExistedWinMultiInstanceCategory">
            <summary>
            Категория, поддерживающая многочисленные инстансы для WinCounters.
            Работает в режиме, когда требуется использование только существующих счётчиков.
            Работает прозрачно Windows
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.UseOnlyExistedModeCategrories.UseOnlyExistedWinMultiInstanceCategory.#ctor(System.String,System.String,System.String,Libs.PerformanceCounters.WinCounters.Helpers.WinCountersWorkingInfo)">
            <summary>
            Конструктор UseOnlyExistedWinMultiInstanceCategory
            </summary>
            <param name="name">Имя категории</param>
            <param name="description">Описание категории</param>
            <param name="rootName">Корневое имя</param>
            <param name="info">Информация о функционировании</param>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.UseOnlyExistedModeCategrories.UseOnlyExistedWinMultiInstanceCategory.HasWinCategory">
            <summary>
            Существует ли категория с тем же именем в Windows
            </summary>
            <returns>Существует ли</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.UseOnlyExistedModeCategrories.UseOnlyExistedWinMultiInstanceCategory.GetExistedWinCategory">
            <summary>
            Получить существующую категорию из Windows с таким же именем
            </summary>
            <returns>Категория</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.UseOnlyExistedModeCategrories.UseOnlyExistedWinMultiInstanceCategory.HasWinInstance(System.String)">
            <summary>
            Есть ли в Windows инстанс с указанным именем
            </summary>
            <param name="instanceName">Имя инстанса</param>
            <returns>Есть ли</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.UseOnlyExistedModeCategrories.UseOnlyExistedWinMultiInstanceCategory.HasInstance(System.String)">
            <summary>
            Существует ли инстанс счётчиков
            </summary>
            <param name="instanceName">Имя инстанса</param>
            <returns>Существует ли</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.UseOnlyExistedModeCategrories.UseOnlyExistedWinMultiInstanceCategory.RemoveInstance(System.String)">
            <summary>
            Удалить инстанс. Удаляется только из внутреннего списка. В Windows всё остаётся.
            </summary>
            <param name="instanceName">Имя инстанса</param>
            <returns>Существал ли</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.UseOnlyExistedModeCategrories.UseOnlyExistedWinMultiInstanceCategory.CreateCounter(Libs.PerformanceCounters.CounterTypes,System.String,System.String)">
            <summary>
            Создать счётчик определённого типа. 
            Создаётся только если есть такой в Windows и был найден при создании.
            </summary>
            <param name="type">Тип счётчика</param>
            <param name="counterName">Имя счетчика</param>
            <param name="counterDescription">Описание счетчика</param>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.UseOnlyExistedModeCategrories.UseOnlyExistedWinMultiInstanceCategory.RemoveCategory">
            <summary>
            Удаление категории из Windows. Не поддерживается.
            </summary>
            <exception cref="T:System.InvalidOperationException">Всегда</exception>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.UseOnlyExistedModeCategrories.UseOnlyExistedWinMultiInstanceCategory.RemoveInstances">
            <summary>
            Удалить все инстансы в многоинстансовой категории (в том числе и из Windows).  Не поддерживается.
            </summary>
            <exception cref="T:System.InvalidOperationException">Всегда</exception>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.UseOnlyExistedModeCategrories.UseOnlyExistedWinMultiInstanceCategory.InitCategory">
            <summary>
            Инициализация категории
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.UseOnlyExistedModeCategrories.UseOnlyExistedWinMultiInstanceCategory.Dispose(System.Boolean)">
            <summary>
            Освобождение ресурсов
            </summary>
            <param name="isUserCall">Было ли инициировано пользователем</param>
        </member>
        <member name="P:Libs.PerformanceCounters.WinCounters.Categories.UseOnlyExistedModeCategrories.UseOnlyExistedWinMultiInstanceCategory.Instances">
            <summary>
            Перечень инстансов
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.WinCounters.Categories.UseOnlyExistedModeCategrories.UseOnlyExistedWinMultiInstanceCategory.Counters">
            <summary>
            Перечень описателей счётчиков для внутреннего использования
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.WinCounters.Categories.UseOnlyExistedModeCategrories.UseOnlyExistedWinMultiInstanceCategory.Item(System.String)">
            <summary>
            Получение инстанса
            </summary>
            <param name="instanceName">Имя инстанса</param>
            <returns>Инстанс</returns>
        </member>
        <member name="T:Libs.PerformanceCounters.WinCounters.Categories.UseOnlyExistedModeCategrories.UseOnlyExistedWinSingleInstanceCategory">
            <summary>
            Категория с одним инстансом для WinCounters.
            Работает в режиме, когда требуется использование только существующих счётчиков.
            Работает прозрачно Windows
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.UseOnlyExistedModeCategrories.UseOnlyExistedWinSingleInstanceCategory.#ctor(System.String,System.String,System.String,Libs.PerformanceCounters.WinCounters.Helpers.WinCountersWorkingInfo)">
            <summary>
            Конструктор UseOnlyExistedWinSingleInstanceCategory
            </summary>
            <param name="name">Имя категории</param>
            <param name="description">Описание категории</param>
            <param name="rootName">Корневое имя</param>
            <param name="info">Информация о функционировании</param>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.UseOnlyExistedModeCategrories.UseOnlyExistedWinSingleInstanceCategory.HasWinCategory">
            <summary>
            Существует ли категория с тем же именем в Windows
            </summary>
            <returns>Существует ли</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.UseOnlyExistedModeCategrories.UseOnlyExistedWinSingleInstanceCategory.GetExistedWinCategory">
            <summary>
            Получить существующую категорию из Windows с таким же именем
            </summary>
            <returns>Категория</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.UseOnlyExistedModeCategrories.UseOnlyExistedWinSingleInstanceCategory.CreateCounter(Libs.PerformanceCounters.CounterTypes,System.String,System.String)">
            <summary>
            Создать счётчик определённого типа, если он уже есть в Windows
            </summary>
            <param name="type">Тип счётчика</param>
            <param name="counterName">Имя счётчика</param>
            <param name="counterDescription">Описание счётчика</param>
            <returns>Счётчик</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.UseOnlyExistedModeCategrories.UseOnlyExistedWinSingleInstanceCategory.HasCounter(System.String)">
            <summary>
            Есть ли счётчик с указанным именем
            </summary>
            <param name="counterName">Имя счётчика</param>
            <returns>Есть ли он</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.UseOnlyExistedModeCategrories.UseOnlyExistedWinSingleInstanceCategory.GetCounter(System.String)">
            <summary>
            Получение счетчика определенного типа
            </summary>
            <param name="counterName">Имя счетчика</param>
            <returns>Счётчик</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.UseOnlyExistedModeCategrories.UseOnlyExistedWinSingleInstanceCategory.GetCounter(System.String,Libs.PerformanceCounters.CounterTypes)">
            <summary>
            Получение счетчика определенного типа
            </summary>
            <param name="counterName">Имя счетчика</param>
            <param name="expectedCounterType">Тип счётчика</param>
            <returns>Счётчик</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.UseOnlyExistedModeCategrories.UseOnlyExistedWinSingleInstanceCategory.RemoveCategory">
            <summary>
            Удаление категории из Windows. Не поддерживается.
            </summary>
            <exception cref="T:System.InvalidOperationException">Всегда</exception>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.UseOnlyExistedModeCategrories.UseOnlyExistedWinSingleInstanceCategory.InitCategory">
            <summary>
            Инициализация категории
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.UseOnlyExistedModeCategrories.UseOnlyExistedWinSingleInstanceCategory.Dispose(System.Boolean)">
            <summary>
            Освобождение ресурсов
            </summary>
            <param name="isUserCall">Было ли инициировано пользователем</param>
        </member>
        <member name="P:Libs.PerformanceCounters.WinCounters.Categories.UseOnlyExistedModeCategrories.UseOnlyExistedWinSingleInstanceCategory.Counters">
            <summary>
            Перечень счётчиков
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.WinCounters.Categories.WinInstanceInMultiInstanceCategory">
            <summary>
            Инстанс в многоинстансовой категории для WinCounters
            </summary> 
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.WinInstanceInMultiInstanceCategory.#ctor(Libs.PerformanceCounters.WinCounters.Categories.WinMultiInstanceCategory,System.String)">
            <summary>
            Конструктор для создания инстанса WinInstanceInMultiInstanceCategory
            </summary>
            <param name="parent">Родительская многоинстовая категория</param>
            <param name="instanceName">Имя инстанса</param>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.WinInstanceInMultiInstanceCategory.Init">
            <summary>
            Внутренний метод для инициализации
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.WinInstanceInMultiInstanceCategory.OnRemoveFromMultiInstanceCategory(System.Boolean)">
            <summary>
            Вызывается из родительской MultiInstanceCategory при удалении данного инстанса
            </summary>
            <param name="removeInstance">Удалять ли данный инстанс в Windows</param>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.WinInstanceInMultiInstanceCategory.HasCounter(System.String)">
            <summary>
            Есть ли счётчик с указанным именем
            </summary>
            <param name="counterName">Имя счётчика</param>
            <returns>Есть ли он</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.WinInstanceInMultiInstanceCategory.GetCounter(System.String)">
            <summary>
            Получение счетчика по имени
            </summary>
            <param name="counterName">Имя счетчика</param>
            <returns>Счётчик</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.WinInstanceInMultiInstanceCategory.GetCounter(System.String,Libs.PerformanceCounters.CounterTypes)">
            <summary>
            Получение счетчика определенного типа
            </summary>
            <param name="counterName">Имя счетчика</param>
            <param name="expectedCounterType">Тип счётчика</param>
            <returns>Счётчик</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.WinInstanceInMultiInstanceCategory.Remove">
            <summary>
            Удаление инстанса
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.WinCounters.Categories.WinInstanceInMultiInstanceCategory.State">
            <summary>
            Состояние
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.WinCounters.Categories.WinInstanceInMultiInstanceCategory.Counters">
            <summary>
            Перечень счётчиков
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.WinCounters.Categories.WinInstanceInMultiInstanceCategory.IsAlive">
            <summary>
            Живой ли инстанс (не был ли удалён)
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.WinCounters.Counters.IWinCounterInitialization">
            <summary>
            Интерфейс для инициализации счётчиков WinCounters
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Counters.IWinCounterInitialization.CounterFillCreationData(System.Diagnostics.CounterCreationDataCollection)">
            <summary>
            Занести данные о необходимых счётчиках Windows в коллекцию
            </summary>
            <param name="col">Коллекция</param>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Counters.IWinCounterInitialization.CounterInit(System.String,System.String)">
            <summary>
            Проинициализировать счётчик Windows
            </summary>
            <param name="categoryName">Имя категории</param>
            <param name="instanceName">Имя инстанса (null, если одноинстансовая категория)</param>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Counters.IWinCounterInitialization.CounterDispose(System.Boolean)">
            <summary>
            Освободить счётчик
            </summary>
            <param name="removeInstance">Удалить ли его инстанс из Windows</param>
        </member>
        <member name="T:Libs.PerformanceCounters.WinCounters.Counters.WinAverageCountCounter">
            <summary>
            Счётчик замера среднего значений для WinCounters
            </summary>
        </member>
        <member name="F:Libs.PerformanceCounters.WinCounters.Counters.WinAverageCountCounter.BaseCounterType">
            <summary>
            Тип базового счётчика Windows
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Counters.WinAverageCountCounter.CreateDescriptor(System.String,System.String,Libs.PerformanceCounters.WinCounters.Helpers.WinCountersWorkingInfo)">
            <summary>
            Создание дескриптора для счётчика WinAverageCountCounter
            </summary>
            <param name="name">Имя счётчика</param>
            <param name="description">Описание счётчика</param>
            <param name="info">Информация о функционировании</param>
            <returns>Созданный дескриптор</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Counters.WinAverageCountCounter.#ctor(System.String,System.String,Libs.PerformanceCounters.WinCounters.Helpers.WinCountersWorkingInfo)">
            <summary>
            Конструктор WinAverageCountCounter
            </summary>
            <param name="name">Имя счётчика</param>
            <param name="description">Описание счётчика</param>
            <param name="info">Информация о функционировании</param>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Counters.WinAverageCountCounter.RegisterValue(System.Int64)">
            <summary>
            Зарегистрировать измерение
            </summary>
            <param name="value">Новое значение</param>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Counters.WinAverageCountCounter.Reset">
            <summary>
            Сброс значения счётчика
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Counters.WinAverageCountCounter.Libs#PerformanceCounters#WinCounters#Counters#IWinCounterInitialization#CounterFillCreationData(System.Diagnostics.CounterCreationDataCollection)">
            <summary>
            Занести данные о необходимых счётчиках Windows в коллекцию
            </summary>
            <param name="col">Коллекция</param>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Counters.WinAverageCountCounter.Libs#PerformanceCounters#WinCounters#Counters#IWinCounterInitialization#CounterInit(System.String,System.String)">
            <summary>
            Проинициализировать счётчик Windows
            </summary>
            <param name="categoryName">Имя категории</param>
            <param name="instanceName">Имя инстанса (null, если одноинстансовая категория)</param>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Counters.WinAverageCountCounter.Libs#PerformanceCounters#WinCounters#Counters#IWinCounterInitialization#CounterDispose(System.Boolean)">
            <summary>
            Освободить счётчик
            </summary>
            <param name="removeInstance">Удалить ли его инстанс из Windows</param>
        </member>
        <member name="P:Libs.PerformanceCounters.WinCounters.Counters.WinAverageCountCounter.CurrentValue">
            <summary>
            Текущее значение
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.WinCounters.Counters.WinAverageCountCounter.Descriptor">
            <summary>
            Дескриптор для счётчика WinAverageCountCounter
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.WinCounters.Counters.WinCounterDescriptor">
            <summary>
            Дескриптор счётчика Windows.
            Позволяет создать впоследствии сам счётчик.
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Counters.WinCounterDescriptor.#ctor(System.String,System.String,Libs.PerformanceCounters.CounterTypes,Libs.PerformanceCounters.WinCounters.Helpers.WinCountersWorkingInfo)">
            <summary>
            Конструктор WinCounterDescriptor
            </summary>
            <param name="name">Имя счётчика</param>
            <param name="description">Описание счётчика</param>
            <param name="type">Тип счётчика</param>
            <param name="info">Информация о функционировании</param>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Counters.WinCounterDescriptor.CreateCounter">
            <summary>
            Создание счётчика
            </summary>
            <returns>Созданный счётчик</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Counters.WinCounterDescriptor.FillCounterCreationData(System.Diagnostics.CounterCreationDataCollection)">
            <summary>
            Занести данные о необходимых счётчиках Windows в коллекцию
            </summary>
            <param name="col">Коллекция</param>
        </member>
        <member name="P:Libs.PerformanceCounters.WinCounters.Counters.WinCounterDescriptor.Name">
            <summary>
            Имя счётчика
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.WinCounters.Counters.WinCounterDescriptor.Description">
            <summary>
            Описание счётчика
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.WinCounters.Counters.WinCounterDescriptor.Type">
            <summary>
            Тип счётчика
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.WinCounters.Counters.WinCounterDescriptor.Info">
            <summary>
            Информация о функционировании
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Counters.WinAverageCountCounter.Descriptor.#ctor(System.String,System.String,Libs.PerformanceCounters.WinCounters.Helpers.WinCountersWorkingInfo)">
            <summary>
            Конструктор Descriptor
            </summary>
            <param name="name">Имя счётчика</param>
            <param name="description">Описание счётчика</param>
            <param name="info">Информация о функционировании</param>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Counters.WinAverageCountCounter.Descriptor.CreateCounter">
            <summary>
            Создание счётчика
            </summary>
            <returns>Созданный счётчик</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Counters.WinAverageCountCounter.Descriptor.FillCounterCreationData(System.Diagnostics.CounterCreationDataCollection)">
            <summary>
            Занести данные о необходимых счётчиках Windows в коллекцию
            </summary>
            <param name="col">Коллекция</param>
        </member>
        <member name="T:Libs.PerformanceCounters.WinCounters.Counters.WinAverageTimeCounter">
            <summary>
            Счётчик среднего времени для WinCounters
            </summary> 
        </member>
        <member name="F:Libs.PerformanceCounters.WinCounters.Counters.WinAverageTimeCounter.BaseCounterType">
            <summary>
            Тип базового счётчика Windows
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Counters.WinAverageTimeCounter.CreateDescriptor(System.String,System.String,Libs.PerformanceCounters.WinCounters.Helpers.WinCountersWorkingInfo)">
            <summary>
            Создание дескриптора для счётчика WinAverageTimeCounter
            </summary>
            <param name="name">Имя счётчика</param>
            <param name="description">Описание счётчика</param>
            <param name="info">Информация о функционировании</param>
            <returns>Созданный дескриптор</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Counters.WinAverageTimeCounter.#ctor(System.String,System.String,Libs.PerformanceCounters.WinCounters.Helpers.WinCountersWorkingInfo)">
            <summary>
            Конструктор WinAverageTimeCounter
            </summary>
            <param name="name">Имя счётчика</param>
            <param name="description">Описание счётчика</param>
            <param name="info">Информация о функционировании</param>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Counters.WinAverageTimeCounter.ConvertToTicks(System.TimeSpan)">
            <summary>
            Сконвертировать TimeSpan в тики счётчика Windows
            </summary>
            <param name="period">Период времени</param>
            <returns>Тики</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Counters.WinAverageTimeCounter.ConvertFromTicks(System.Int64)">
            <summary>
            Скорнвертировать тики счётчика Windows в TimeSpan
            </summary>
            <param name="ticks">Тики</param>
            <returns>Сконвертированный период времени</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Counters.WinAverageTimeCounter.RegisterMeasurement(System.TimeSpan)">
            <summary>
            Зарегистрировать измерение
            </summary>
            <param name="period">Период</param>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Counters.WinAverageTimeCounter.Reset">
            <summary>
            Сброс значения счётчика
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Counters.WinAverageTimeCounter.Libs#PerformanceCounters#WinCounters#Counters#IWinCounterInitialization#CounterFillCreationData(System.Diagnostics.CounterCreationDataCollection)">
            <summary>
            Занести данные о необходимых счётчиках Windows в коллекцию
            </summary>
            <param name="col">Коллекция</param>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Counters.WinAverageTimeCounter.Libs#PerformanceCounters#WinCounters#Counters#IWinCounterInitialization#CounterInit(System.String,System.String)">
            <summary>
            Проинициализировать счётчик Windows
            </summary>
            <param name="categoryName">Имя категории</param>
            <param name="instanceName">Имя инстанса (null, если одноинстансовая категория)</param>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Counters.WinAverageTimeCounter.Libs#PerformanceCounters#WinCounters#Counters#IWinCounterInitialization#CounterDispose(System.Boolean)">
            <summary>
            Освободить счётчик
            </summary>
            <param name="removeInstance">Удалить ли его инстанс из Windows</param>
        </member>
        <member name="P:Libs.PerformanceCounters.WinCounters.Counters.WinAverageTimeCounter.CurrentValue">
            <summary>
            Текущее значение
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.WinCounters.Counters.WinAverageTimeCounter.Descriptor">
            <summary>
            Дескриптор для счётчика WinAverageTimeCounter
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Counters.WinAverageTimeCounter.Descriptor.#ctor(System.String,System.String,Libs.PerformanceCounters.WinCounters.Helpers.WinCountersWorkingInfo)">
            <summary>
            Конструктор Descriptor
            </summary>
            <param name="name">Имя счётчика</param>
            <param name="description">Описание счётчика</param>
            <param name="info">Информация о функционировании</param>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Counters.WinAverageTimeCounter.Descriptor.CreateCounter">
            <summary>
            Создание счётчика
            </summary>
            <returns>Созданный счётчик</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Counters.WinAverageTimeCounter.Descriptor.FillCounterCreationData(System.Diagnostics.CounterCreationDataCollection)">
            <summary>
            Занести данные о необходимых счётчиках Windows в коллекцию
            </summary>
            <param name="col">Коллекция</param>
        </member>
        <member name="T:Libs.PerformanceCounters.WinCounters.Counters.WinElapsedTimeCounter">
            <summary>
            Счётчик, который показывает полное время от начала работы компонента или процесса, для WinCounters
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Counters.WinElapsedTimeCounter.CreateDescriptor(System.String,System.String,Libs.PerformanceCounters.WinCounters.Helpers.WinCountersWorkingInfo)">
            <summary>
            Создание дескриптора для счётчика WinElapsedTimeCounter
            </summary>
            <param name="name">Имя счётчика</param>
            <param name="description">Описание счётчика</param>
            <param name="info">Информация о функционировании</param>
            <returns>Созданный дескриптор</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Counters.WinElapsedTimeCounter.#ctor(System.String,System.String,Libs.PerformanceCounters.WinCounters.Helpers.WinCountersWorkingInfo)">
            <summary>
            Конструктор WinElapsedTimeCounter
            </summary>
            <param name="name">Имя счётчика</param>
            <param name="description">Описание счётчика</param>
            <param name="info">Информация о функционировании</param>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Counters.WinElapsedTimeCounter.ConvertToTicks(System.TimeSpan)">
            <summary>
            Сконвертировать TimeSpan в тики счётчика Windows
            </summary>
            <param name="period">Период времени</param>
            <returns>Тики</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Counters.WinElapsedTimeCounter.ConvertFromTicks(System.Int64)">
            <summary>
            Скорнвертировать тики счётчика Windows в TimeSpan
            </summary>
            <param name="ticks">Тики</param>
            <returns>Сконвертированный период времени</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Counters.WinElapsedTimeCounter.Reset">
            <summary>
            Сбросить прошедшее время
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Counters.WinElapsedTimeCounter.Libs#PerformanceCounters#WinCounters#Counters#IWinCounterInitialization#CounterFillCreationData(System.Diagnostics.CounterCreationDataCollection)">
            <summary>
            Занести данные о необходимых счётчиках Windows в коллекцию
            </summary>
            <param name="col">Коллекция</param>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Counters.WinElapsedTimeCounter.Libs#PerformanceCounters#WinCounters#Counters#IWinCounterInitialization#CounterInit(System.String,System.String)">
            <summary>
            Проинициализировать счётчик Windows
            </summary>
            <param name="categoryName">Имя категории</param>
            <param name="instanceName">Имя инстанса (null, если одноинстансовая категория)</param>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Counters.WinElapsedTimeCounter.Libs#PerformanceCounters#WinCounters#Counters#IWinCounterInitialization#CounterDispose(System.Boolean)">
            <summary>
            Освободить счётчик
            </summary>
            <param name="removeInstance">Удалить ли его инстанс из Windows</param>
        </member>
        <member name="P:Libs.PerformanceCounters.WinCounters.Counters.WinElapsedTimeCounter.CurrentValue">
            <summary>
            Текущее время, которое прошло с момента запуска
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.WinCounters.Counters.WinElapsedTimeCounter.Descriptor">
            <summary>
            Дескриптор для счётчика WinElapsedTimeCounter
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Counters.WinElapsedTimeCounter.Descriptor.#ctor(System.String,System.String,Libs.PerformanceCounters.WinCounters.Helpers.WinCountersWorkingInfo)">
            <summary>
            Конструктор Descriptor
            </summary>
            <param name="name">Имя счётчика</param>
            <param name="description">Описание счётчика</param>
            <param name="info">Информация о функционировании</param>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Counters.WinElapsedTimeCounter.Descriptor.CreateCounter">
            <summary>
            Создание счётчика
            </summary>
            <returns>Созданный счётчик</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Counters.WinElapsedTimeCounter.Descriptor.FillCounterCreationData(System.Diagnostics.CounterCreationDataCollection)">
            <summary>
            Занести данные о необходимых счётчиках Windows в коллекцию
            </summary>
            <param name="col">Коллекция</param>
        </member>
        <member name="T:Libs.PerformanceCounters.WinCounters.Counters.WinMomentTimeCounter">
            <summary>
            Счётчик моментального времени для WinCounters
            </summary> 
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Counters.WinMomentTimeCounter.CreateDescriptor(System.String,System.String,Libs.PerformanceCounters.WinCounters.Helpers.WinCountersWorkingInfo)">
            <summary>
            Создание дескриптора для счётчика WinMomentTimeCounter
            </summary>
            <param name="name">Имя счётчика</param>
            <param name="description">Описание счётчика</param>
            <param name="info">Информация о функционировании</param>
            <returns>Созданный дескриптор</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Counters.WinMomentTimeCounter.#ctor(System.String,System.String,Libs.PerformanceCounters.WinCounters.Helpers.WinCountersWorkingInfo)">
            <summary>
            Конструктор WinMomentTimeCounter
            </summary>
            <param name="name">Имя счётчика</param>
            <param name="description">Описание счётчика</param>
            <param name="info">Информация о функционировании</param>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Counters.WinMomentTimeCounter.ConvertToTicks(System.TimeSpan)">
            <summary>
            Сконвертировать TimeSpan в тики счётчика Windows
            </summary>
            <param name="period">Период времени</param>
            <returns>Тики</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Counters.WinMomentTimeCounter.ConvertFromTicks(System.Int64)">
            <summary>
            Скорнвертировать тики счётчика Windows в TimeSpan
            </summary>
            <param name="ticks">Тики</param>
            <returns>Сконвертированный период времени</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Counters.WinMomentTimeCounter.RegisterMeasurement(System.TimeSpan)">
            <summary>
            Зарегистрировать измерение
            </summary>
            <param name="period">Период</param>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Counters.WinMomentTimeCounter.Libs#PerformanceCounters#WinCounters#Counters#IWinCounterInitialization#CounterFillCreationData(System.Diagnostics.CounterCreationDataCollection)">
            <summary>
            Занести данные о необходимых счётчиках Windows в коллекцию
            </summary>
            <param name="col">Коллекция</param>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Counters.WinMomentTimeCounter.Libs#PerformanceCounters#WinCounters#Counters#IWinCounterInitialization#CounterInit(System.String,System.String)">
            <summary>
            Проинициализировать счётчик Windows
            </summary>
            <param name="categoryName">Имя категории</param>
            <param name="instanceName">Имя инстанса (null, если одноинстансовая категория)</param>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Counters.WinMomentTimeCounter.Libs#PerformanceCounters#WinCounters#Counters#IWinCounterInitialization#CounterDispose(System.Boolean)">
            <summary>
            Освободить счётчик
            </summary>
            <param name="removeInstance">Удалить ли его инстанс из Windows</param>
        </member>
        <member name="P:Libs.PerformanceCounters.WinCounters.Counters.WinMomentTimeCounter.CurrentValue">
            <summary>
            Текущее значение
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.WinCounters.Counters.WinMomentTimeCounter.Descriptor">
            <summary>
            Дескриптор для счётчика WinMomentTimeCounter
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Counters.WinMomentTimeCounter.Descriptor.#ctor(System.String,System.String,Libs.PerformanceCounters.WinCounters.Helpers.WinCountersWorkingInfo)">
            <summary>
            Конструктор Descriptor
            </summary>
            <param name="name">Имя счётчика</param>
            <param name="description">Описание счётчика</param>
            <param name="info">Информация о функционировании</param>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Counters.WinMomentTimeCounter.Descriptor.CreateCounter">
            <summary>
            Создание счётчика
            </summary>
            <returns>Созданный счётчик</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Counters.WinMomentTimeCounter.Descriptor.FillCounterCreationData(System.Diagnostics.CounterCreationDataCollection)">
            <summary>
            Занести данные о необходимых счётчиках Windows в коллекцию
            </summary>
            <param name="col">Коллекция</param>
        </member>
        <member name="T:Libs.PerformanceCounters.WinCounters.Counters.WinNumberOfItemsCounter">
            <summary>
            Счетчик мгновенного значения, показывающий последнее наблюдавшееся значение, для WinCounters
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Counters.WinNumberOfItemsCounter.CreateDescriptor(System.String,System.String,Libs.PerformanceCounters.WinCounters.Helpers.WinCountersWorkingInfo)">
            <summary>
            Создание дескриптора для счётчика WinNumberOfItemsCounter
            </summary>
            <param name="name">Имя счётчика</param>
            <param name="description">Описание счётчика</param>
            <param name="info">Информация о функционировании</param>
            <returns>Созданный дескриптор</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Counters.WinNumberOfItemsCounter.#ctor(System.String,System.String,Libs.PerformanceCounters.WinCounters.Helpers.WinCountersWorkingInfo)">
            <summary>
            Конструктор WinNumberOfItemsCounter
            </summary>
            <param name="name">Имя счётчика</param>
            <param name="description">Описание счётчика</param>
            <param name="info">Информация о функционировании</param>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Counters.WinNumberOfItemsCounter.Decrement">
            <summary>
            Уменьшить значение на 1
            </summary>
            <returns>Текущее значение или Counter.FailureNum</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Counters.WinNumberOfItemsCounter.DecrementBy(System.Int64)">
            <summary>
            Уменьшить значение на "value"
            </summary>
            <param name="value">Значение, на которое уменьшаем</param>
            <returns>Текущее значение или Counter.FailureNum</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Counters.WinNumberOfItemsCounter.Increment">
            <summary>
            Увеличить значение на 1
            </summary>
            <returns>Текущее значение или Counter.FailureNum</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Counters.WinNumberOfItemsCounter.IncrementBy(System.Int64)">
            <summary>
            Увеличить значение на "value"
            </summary>
            <param name="value">Значение, на которое увеличиваем</param>
            <returns>Текущее значение или Counter.FailureNum</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Counters.WinNumberOfItemsCounter.SetValue(System.Int64)">
            <summary>
            Задать значение
            </summary>
            <param name="value">Новое значение</param>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Counters.WinNumberOfItemsCounter.Libs#PerformanceCounters#WinCounters#Counters#IWinCounterInitialization#CounterFillCreationData(System.Diagnostics.CounterCreationDataCollection)">
            <summary>
            Занести данные о необходимых счётчиках Windows в коллекцию
            </summary>
            <param name="col">Коллекция</param>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Counters.WinNumberOfItemsCounter.Libs#PerformanceCounters#WinCounters#Counters#IWinCounterInitialization#CounterInit(System.String,System.String)">
            <summary>
            Проинициализировать счётчик Windows
            </summary>
            <param name="categoryName">Имя категории</param>
            <param name="instanceName">Имя инстанса (null, если одноинстансовая категория)</param>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Counters.WinNumberOfItemsCounter.Libs#PerformanceCounters#WinCounters#Counters#IWinCounterInitialization#CounterDispose(System.Boolean)">
            <summary>
            Освободить счётчик
            </summary>
            <param name="removeInstance">Удалить ли его инстанс из Windows</param>
        </member>
        <member name="P:Libs.PerformanceCounters.WinCounters.Counters.WinNumberOfItemsCounter.CurrentValue">
            <summary>
            Получает текущее значение счетчика производительности
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.WinCounters.Counters.WinNumberOfItemsCounter.Descriptor">
            <summary>
            Дескриптор для счётчика WinNumberOfItemsCounter
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Counters.WinNumberOfItemsCounter.Descriptor.#ctor(System.String,System.String,Libs.PerformanceCounters.WinCounters.Helpers.WinCountersWorkingInfo)">
            <summary>
            Конструктор Descriptor
            </summary>
            <param name="name">Имя счётчика</param>
            <param name="description">Описание счётчика</param>
            <param name="info">Информация о функционировании</param>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Counters.WinNumberOfItemsCounter.Descriptor.CreateCounter">
            <summary>
            Создание счётчика
            </summary>
            <returns>Созданный счётчик</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Counters.WinNumberOfItemsCounter.Descriptor.FillCounterCreationData(System.Diagnostics.CounterCreationDataCollection)">
            <summary>
            Занести данные о необходимых счётчиках Windows в коллекцию
            </summary>
            <param name="col">Коллекция</param>
        </member>
        <member name="T:Libs.PerformanceCounters.WinCounters.Counters.WinOperationsPerSecondCounter">
            <summary>
            Счётчик числа операций в секунду для WinCounters
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Counters.WinOperationsPerSecondCounter.CreateDescriptor(System.String,System.String,Libs.PerformanceCounters.WinCounters.Helpers.WinCountersWorkingInfo)">
            <summary>
            Создание дескриптора для счётчика WinOperationsPerSecondCounter
            </summary>
            <param name="name">Имя счётчика</param>
            <param name="description">Описание счётчика</param>
            <param name="info">Информация о функционировании</param>
            <returns>Созданный дескриптор</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Counters.WinOperationsPerSecondCounter.#ctor(System.String,System.String,Libs.PerformanceCounters.WinCounters.Helpers.WinCountersWorkingInfo)">
            <summary>
            Конструктор WinOperationsPerSecondCounter
            </summary>
            <param name="name">Имя счётчика</param>
            <param name="description">Описание счётчика</param>
            <param name="info">Информация о функционировании</param>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Counters.WinOperationsPerSecondCounter.OperationFinished">
            <summary>
            Закончилась 1 операция
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Counters.WinOperationsPerSecondCounter.OperationFinished(System.Int32)">
            <summary>
            Закончилось несколько операций
            </summary>
            <param name="operationCount">Число операций</param>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Counters.WinOperationsPerSecondCounter.Reset">
            <summary>
            Сброс значения счётчика
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Counters.WinOperationsPerSecondCounter.Libs#PerformanceCounters#WinCounters#Counters#IWinCounterInitialization#CounterFillCreationData(System.Diagnostics.CounterCreationDataCollection)">
            <summary>
            Занести данные о необходимых счётчиках Windows в коллекцию
            </summary>
            <param name="col">Коллекция</param>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Counters.WinOperationsPerSecondCounter.Libs#PerformanceCounters#WinCounters#Counters#IWinCounterInitialization#CounterInit(System.String,System.String)">
            <summary>
            Проинициализировать счётчик Windows
            </summary>
            <param name="categoryName">Имя категории</param>
            <param name="instanceName">Имя инстанса (null, если одноинстансовая категория)</param>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Counters.WinOperationsPerSecondCounter.Libs#PerformanceCounters#WinCounters#Counters#IWinCounterInitialization#CounterDispose(System.Boolean)">
            <summary>
            Освободить счётчик
            </summary>
            <param name="removeInstance">Удалить ли его инстанс из Windows</param>
        </member>
        <member name="P:Libs.PerformanceCounters.WinCounters.Counters.WinOperationsPerSecondCounter.CurrentValue">
            <summary>
            Текущее значение
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.WinCounters.Counters.WinOperationsPerSecondCounter.Descriptor">
            <summary>
            Дескриптор для счётчика WinOperationsPerSecondCounter
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Counters.WinOperationsPerSecondCounter.Descriptor.#ctor(System.String,System.String,Libs.PerformanceCounters.WinCounters.Helpers.WinCountersWorkingInfo)">
            <summary>
            Конструктор Descriptor
            </summary>
            <param name="name">Имя счётчика</param>
            <param name="description">Описание счётчика</param>
            <param name="info">Информация о функционировании</param>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Counters.WinOperationsPerSecondCounter.Descriptor.CreateCounter">
            <summary>
            Создание счётчика
            </summary>
            <returns>Созданный счётчик</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Counters.WinOperationsPerSecondCounter.Descriptor.FillCounterCreationData(System.Diagnostics.CounterCreationDataCollection)">
            <summary>
            Занести данные о необходимых счётчиках Windows в коллекцию
            </summary>
            <param name="col">Коллекция</param>
        </member>
        <member name="T:Libs.PerformanceCounters.WinCounters.Helpers.CategoryHelper">
            <summary>
            Помошник для работы с категориями
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Helpers.CategoryHelper.IsAllRequestedCountersExist(System.Diagnostics.PerformanceCounter[],System.Diagnostics.CounterCreationDataCollection)">
            <summary>
            Проверка, все ли необходимые счётчики есть в категории Windows
            </summary>
            <param name="existed">Массив существующих счётчиков, полученный из категории Windows</param>
            <param name="requested">Перечень необходимых счётчиков</param>
            <returns>Все ли необходимые счётчики присутствуют</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Helpers.CategoryHelper.CreateEmptyCategory(System.String,System.String,System.String,Libs.PerformanceCounters.WinCounters.Helpers.WinCountersWorkingInfo)">
            <summary>
            Создать пустую категорию
            </summary>
            <param name="categoryName">Имя категории</param>
            <param name="categoryDescription">Описание категории</param>
            <param name="rootName">Корневое имя</param>
            <param name="wrkInfo">Информация по функционированию</param>
            <returns>Созданная категория</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Helpers.CategoryHelper.CreateSingleInstanceCategory(System.String,System.String,System.String,Libs.PerformanceCounters.WinCounters.Helpers.WinCountersWorkingInfo)">
            <summary>
            Создать простую категорию (с 1 инстансом).
            Конкретный тип определяется на основе wrkInfo.
            </summary>
            <param name="categoryName">Имя категории</param>
            <param name="categoryDescription">Описание категории</param>
            <param name="rootName">Корневое имя</param>
            <param name="wrkInfo">Информация по функционированию</param>
            <returns>Созданная категория</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Helpers.CategoryHelper.CreateMultiInstanceCategory(System.String,System.String,System.String,Libs.PerformanceCounters.WinCounters.Helpers.WinCountersWorkingInfo)">
            <summary>
            Создать категорию с множеством инстансов.
            Конкретный тип определяется на основе wrkInfo.
            </summary>
            <param name="categoryName">Имя категории</param>
            <param name="categoryDescription">Описание категории</param>
            <param name="rootName">Корневое имя</param>
            <param name="wrkInfo">Информация по функционированию</param>
            <returns>Созданная категория</returns>
        </member>
        <member name="T:Libs.PerformanceCounters.WinCounters.Helpers.CounterHelper">
            <summary>
            Помошник для работы со счётчиками
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Helpers.CounterHelper.ConvertCounterType(Libs.PerformanceCounters.CounterTypes,System.Boolean)">
            <summary>
            Преобразовать тип счётчика из внутреннего в Windows
            </summary>
            <param name="srcType">Исходный тип счётчика</param>
            <param name="prefer64BitCounter">Предпочитать ли 64-ёх битные счётчики</param>
            <returns>Преобразованный тип счётчика</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Helpers.CounterHelper.TryConvertCounterType(System.Diagnostics.PerformanceCounterType,Libs.PerformanceCounters.CounterTypes@)">
            <summary>
            Попробовать сконвертировать тип счётчика Windows во внутренний тип счётчика
            </summary>
            <param name="srcWinType">Тип счётчика Windows</param>
            <param name="resLocType">Сконвертированный тип счётчика</param>
            <returns>Найдено ли соответствие</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Helpers.CounterHelper.IsWinCompatible(Libs.PerformanceCounters.CounterTypes,Libs.PerformanceCounters.CounterTypes)">
            <summary>
            Совместимы ли представления счётчиков в Windows
            </summary>
            <param name="a">Тип первого счётчика</param>
            <param name="b">Тип второго счётчика</param>
            <returns>Совместимы ли</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Helpers.CounterHelper.ConvertCounterType(System.Diagnostics.PerformanceCounterType)">
            <summary>
            Выполнить преобразование типа счётчика Windows во внутренний тип счётчика
            </summary>
            <param name="srcWinType">Исходный тип счётчика Windows</param>
            <returns>Внутренний тип счётичка после преобразования</returns>
            <exception cref="T:System.ArgumentException">Неподдерживаемый тип счётчика</exception>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Helpers.CounterHelper.CreateByExistedCounter(System.Diagnostics.PerformanceCounter,Libs.PerformanceCounters.WinCounters.Helpers.WinCountersWorkingInfo)">
            <summary>
            Создать внутренний счётчик на основе существующего счётчика Windows
            </summary>
            <param name="src">Счётчик Windows</param>
            <param name="info">Информацию по функционированию</param>
            <returns>Созданный внутренний счётчик</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Helpers.CounterHelper.CreateByExistedCounterAndInit(System.Diagnostics.PerformanceCounter,Libs.PerformanceCounters.WinCounters.Helpers.WinCountersWorkingInfo)">
            <summary>
            Создать внутренний счётчик на основе существующего счётчика Windows и инициализировать его
            </summary>
            <param name="src">Счётчик Windows</param>
            <param name="info">Информацию по функционированию</param>
            <returns>Созданный и инициализированный внутренний счётчик</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Helpers.CounterHelper.CreateDescriptorByExistedCounter(System.Diagnostics.PerformanceCounter,Libs.PerformanceCounters.WinCounters.Helpers.WinCountersWorkingInfo)">
            <summary>
            Создать дескриптор счётчика на основе существующего счётчика Windows
            </summary>
            <param name="src">Счётчик Windows</param>
            <param name="info">Информацию по функционированию</param>
            <returns>Созданный дескриптор счётчика</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Helpers.CounterHelper.CreateCounter(Libs.PerformanceCounters.CounterTypes,System.String,System.String,Libs.PerformanceCounters.WinCounters.Helpers.WinCountersWorkingInfo)">
            <summary>
            Создать внутренний счётчик
            </summary>
            <param name="type">Тип счётчика</param>
            <param name="counterName">Имя счётчика</param>
            <param name="counterDescription">Описание счётчика</param>
            <param name="info">Информацию по функционированию</param>
            <returns>Созданный счётчик</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Helpers.CounterHelper.CreateCounterDescriptor(Libs.PerformanceCounters.CounterTypes,System.String,System.String,Libs.PerformanceCounters.WinCounters.Helpers.WinCountersWorkingInfo)">
            <summary>
            Создать дескриптор счётчика
            </summary>
            <param name="type">Тип счётчика</param>
            <param name="counterName">Имя счётчика</param>
            <param name="counterDescription">Описание счётчика</param>
            <param name="info">Информацию по функционированию</param>
            <returns>Созданный дескриптор</returns>
        </member>
        <member name="T:Libs.PerformanceCounters.WinCounters.Helpers.WinCountersWorkingInfo">
            <summary>
            Информация по режиму работы WinCounters
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Helpers.WinCountersWorkingInfo.#ctor(Libs.PerformanceCounters.WinCounters.WinCountersInstantiationMode,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Конструктор WinCountersWorkingInfo
            </summary>
            <param name="instMode">Режим работы</param>
            <param name="machineName">Имя машины</param>
            <param name="readOnlyCounters">Счётчики только для чтения</param>
            <param name="prefer64bitCounters">Предпочтение 64-ёх битным счётчикам</param>
            <param name="loadAllExistedInst">Загружать при старте все существующие инстансы</param>
        </member>
        <member name="P:Libs.PerformanceCounters.WinCounters.Helpers.WinCountersWorkingInfo.InstantiationMode">
            <summary>
            Режим работы
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.WinCounters.Helpers.WinCountersWorkingInfo.MachineName">
            <summary>
            Имя машины
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.WinCounters.Helpers.WinCountersWorkingInfo.ReadOnlyCounters">
            <summary>
            Счётчики только для чтения
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.WinCounters.Helpers.WinCountersWorkingInfo.Prefer64BitCounters">
            <summary>
            Предпочтение 64-ёх битным счётчикам
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.WinCounters.Helpers.WinCountersWorkingInfo.LoadAllExistedInstancesForMultiInstCategory">
            <summary>
            Загружать ли из Windows все существующие инстансы
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.WinCounters.Helpers.WinCountersWorkingInfo.IsLocalMachine">
            <summary>
            Локальная ли машина
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.WinCounters.WinCategoryState">
            <summary>
            Состояние категории в WinCounters
            </summary>
        </member>
        <member name="F:Libs.PerformanceCounters.WinCounters.WinCategoryState.Created">
            <summary>
            Категория создана
            </summary>
        </member>
        <member name="F:Libs.PerformanceCounters.WinCounters.WinCategoryState.Initialized">
            <summary>
            Категория проинициализирована и готова к использованию
            </summary>
        </member>
        <member name="F:Libs.PerformanceCounters.WinCounters.WinCategoryState.Disposed">
            <summary>
            Категория освобождена
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.WinCounters.Categories.WinEmptyCategory">
            <summary>
            Пустая категория для WinCounters
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.WinEmptyCategory.#ctor(System.String,System.String,System.String,Libs.PerformanceCounters.WinCounters.Helpers.WinCountersWorkingInfo)">
            <summary>
            Конструктор для создания пустой подкатегории WinEmptyCategory.
            </summary>
            <param name="name">Название категории</param>
            <param name="description">Описание категории</param>
            <param name="rootName">Корневое имя</param>
            <param name="info">Информация по функционированию</param>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.WinEmptyCategory.CreateEmptySubCategoryInner(System.String,System.String)">
            <summary>
            Внутренний метод создания дочерней пустой категории
            </summary>
            <param name="categoryName">Имя подкатегории</param>
            <param name="categoryDescription">Описание подкатегории</param>
            <returns>Созданная подкатегория</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.WinEmptyCategory.CreateMultiInstanceSubCategoryInner(System.String,System.String)">
            <summary>
            Внутренний метод создания дочерней категории c многими инстансами
            </summary>
            <param name="categoryName">Имя подкатегории</param>
            <param name="categoryDescription">Описание подкатегории</param>
            <returns>Созданная подкатегория</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.WinEmptyCategory.CreateSingleInstanceSubCategoryInner(System.String,System.String)">
            <summary>
            Внутренний метод создания дочерней категории
            </summary>
            <param name="categoryName">Имя подкатегории</param>
            <param name="categoryDescription">Описание подкатегории</param>
            <returns>Созданная подкатегория</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.WinEmptyCategory.CreateEmptySubCategory(System.String,System.String)">
            <summary>
            Создание пустой подкатегории
            Для добавления элемента в названии категории - Name.SubName.SubSubName
            </summary>
            <param name="categoryName">Имя подкатегории</param>
            <param name="categoryDescription">Описание подкатегории</param>
            <returns>Созданная подкатегория</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.WinEmptyCategory.CreateMultiInstanceSubCategory(System.String,System.String)">
            <summary>
            Создание подкатегории c многими инстансами
            </summary>
            <param name="categoryName">Имя категории</param>
            <param name="categoryDescription">Описание категории</param>
            <returns>Созданная подкатегория</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.WinEmptyCategory.CreateSingleInstanceSubCategory(System.String,System.String)">
            <summary>
            Создание простой подкатегории
            </summary>
            <param name="categoryName">Имя категории</param>
            <param name="categoryDescription">Описание категории</param>
            <returns>Созданная подкатегория</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.WinEmptyCategory.Init">
            <summary>
            Инициализация счетчиков (создание категорий, инстанцирование самих счетчиков)
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.WinEmptyCategory.Libs#PerformanceCounters#WinCounters#Categories#IWinCategoryInitialization#Init">
            <summary>
            Инициализировать данную категорию
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.WinEmptyCategory.Libs#PerformanceCounters#WinCounters#Categories#IWinCategoryInitialization#RemoveInstances">
            <summary>
            Удалить все инстансы в многоинстансовой категории
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.WinEmptyCategory.Libs#PerformanceCounters#WinCounters#Categories#IWinCategoryInitialization#RemoveCategory">
            <summary>
            Удалить данную категорию из Windows
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.WinEmptyCategory.Libs#PerformanceCounters#WinCounters#Categories#IWinCategoryInitialization#InitCascade">
            <summary>
            Инициализировать данную и все дочерние категории
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.WinEmptyCategory.Libs#PerformanceCounters#WinCounters#Categories#IWinCategoryInitialization#RemoveInstancesCascade">
            <summary>
            Удалить все инстансы в многоинстансовой категории каскадом
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.WinEmptyCategory.Libs#PerformanceCounters#WinCounters#Categories#IWinCategoryInitialization#RemoveCategoryCascade">
            <summary>
            Удалить данную и все дочерние категории из Windows
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.WinEmptyCategory.Libs#PerformanceCounters#WinCounters#Categories#IWinCategoryInitialization#DisposeCascade">
            <summary>
            Освободить данную и все дочерние категории
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.Categories.WinEmptyCategory.Dispose(System.Boolean)">
            <summary>
            Освобождение ресурсов
            </summary>
            <param name="isUserCall">Было ли инициировано пользователем</param>
        </member>
        <member name="P:Libs.PerformanceCounters.WinCounters.Categories.WinEmptyCategory.State">
            <summary>
            Состояние
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.WinCounters.Categories.WinEmptyCategory.FullName">
            <summary>
            Полное имя (включая корневое)
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.WinCounters.Categories.WinEmptyCategory.ChildCategories">
            <summary>
            Перечень дочерних категорий
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.WinCounters.WinCountersInstantiationMode">
            <summary>
            Режим создания категорий и счётчиков в WinCounters
            </summary>
        </member>
        <member name="F:Libs.PerformanceCounters.WinCounters.WinCountersInstantiationMode.AlwaysCreateNew">
            <summary>
            Всегда удалять старые и создавать новые
            </summary>
        </member>
        <member name="F:Libs.PerformanceCounters.WinCounters.WinCountersInstantiationMode.UseExistedIfPossible">
            <summary>
            Если все необходимые счётчики есть, то не пересоздавать
            </summary>
        </member>
        <member name="F:Libs.PerformanceCounters.WinCounters.WinCountersInstantiationMode.UseOnlyExisted">
            <summary>
            Всегда использовать только существующие счётчики (прозрачная работа)
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.WinCounters.WinCountersPreferedBitness">
            <summary>
            Битность счётчиков, используемых внутри
            </summary>
        </member>
        <member name="F:Libs.PerformanceCounters.WinCounters.WinCountersPreferedBitness.SameAsOperatingSystemBitness">
            <summary>
            Битность ОС
            </summary>
        </member>
        <member name="F:Libs.PerformanceCounters.WinCounters.WinCountersPreferedBitness.Prefer32BitCounters">
            <summary>
            Использовать 32-ух битные
            </summary>
        </member>
        <member name="F:Libs.PerformanceCounters.WinCounters.WinCountersPreferedBitness.Prefer64BitCounters">
            <summary>
            Использовать 64-ёх битные
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.WinCounters.WinCounterFactory">
            <summary>
            Фабрика для счётчиков Windows
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.WinCounterFactory.#ctor(Libs.PerformanceCounters.WinCounters.WinCountersInstantiationMode,System.String,System.String,System.Boolean,Libs.PerformanceCounters.WinCounters.WinCountersPreferedBitness,System.Boolean)">
            <summary>
            Конструктор WinCounterFactory
            </summary>
            <param name="instMode">Режим работы</param>
            <param name="namePrefix">Префикс имени категории</param>
            <param name="machineName">Имя машины (null или '.' для локальной)</param>
            <param name="readOnlyCounters">Счётчики только для чтения</param>
            <param name="preferedBitness">Предпочитать ли 64 битные счётчики</param>
            <param name="loadExistedInstancesForMultiInstCat">Загрузить из Windows все инстансы многоинстансовых категорий</param>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.WinCounterFactory.#ctor(Libs.PerformanceCounters.WinCounters.WinCountersInstantiationMode,System.String,System.String,System.Boolean)">
            <summary>
            Конструктор WinCounterFactory
            </summary>
            <param name="instMode">Режим работы</param>
            <param name="namePrefix">Префикс имени категории</param>
            <param name="machineName">Имя машины (null или '.' для локальной)</param>
            <param name="readOnlyCounters">Счётчики только для чтения</param>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.WinCounterFactory.#ctor(Libs.PerformanceCounters.WinCounters.WinCountersInstantiationMode,System.String)">
            <summary>
            Конструктор WinCounterFactory
            </summary>
            <param name="instMode">Режим работы</param>
            <param name="namePrefix">Префикс имени категории</param>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.WinCounterFactory.#ctor(Libs.PerformanceCounters.WinCounters.WinCountersInstantiationMode)">
            <summary>
            Конструктор WinCounterFactory
            </summary>
            <param name="instMode">Режим работы</param>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.WinCounterFactory.#ctor">
            <summary>
            Конструктор WinCounterFactory
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.WinCounterFactory.#ctor(Libs.PerformanceCounters.Configuration.WinCountersConfiguration)">
            <summary>
            Конструктор WinCounterFactory по конфигу
            </summary>
            <param name="config">Конфигурация</param>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.WinCounterFactory.CreateEmptyCategory(System.String,System.String)">
            <summary>
            Создание пустой категории
            Для добавления элемента в названии категории - Name.SubName.SubSubName
            </summary>
            <param name="categoryName">Имя категории</param>
            <param name="categoryDescription">Описание категории</param>
            <returns>Категория</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.WinCounterFactory.CreateMultiInstanceCategory(System.String,System.String)">
            <summary>
            Создание категории c многими инстансами
            </summary>
            <param name="categoryName">Имя категории</param>
            <param name="categoryDescription">Описание категории</param>
            <returns>Категория</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.WinCounterFactory.CreateSingleInstanceCategory(System.String,System.String)">
            <summary>
            Создание категории
            </summary>
            <param name="categoryName">Имя категории</param>
            <param name="categoryDescription">Описание категории</param>
            <returns>Категория</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.WinCounterFactory.InitAll">
            <summary>
            Выполнить инициализацию всех дочерних категорий.
            Без инициализации они не будут работать.
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.WinCounterFactory.RemoveAllInstances">
            <summary>
            Удалить все инстансы в многоинстансовых категориях Windows
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.WinCounterFactory.RemoveAllCategories">
            <summary>
            Удалить все дочерние категории из Windows
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.WinCounters.WinCounterFactory.Dispose(System.Boolean)">
            <summary>
            Внутренний метод освобождения ресурсов
            </summary>
            <param name="isUserCall">Вызван ли явно</param>
        </member>
        <member name="P:Libs.PerformanceCounters.WinCounters.WinCounterFactory.InstantiationMode">
            <summary>
            Режим работы счётчиков
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.WinCounters.WinCounterFactory.NamePrefix">
            <summary>
            Фиксированный префикс в имени категорий
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.WinCounters.WinCounterFactory.MachineName">
            <summary>
            Имя машины
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.WinCounters.WinCounterFactory.ReadOnlyCounters">
            <summary>
            Используются ли счётчики только для чтения
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.WinCounters.WinCounterFactory.Prefer64BitCounters">
            <summary>
            Предпочитать 64-ёх разрядные счётчики (если есть выбор)
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.WinCounters.WinCounterFactory.LoadAllExistedInstancesForMultiInstCategory">
            <summary>
            Загружать ли из Windows все существующие инстансы для многоинстансовых категорий
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.WinCounters.WinCounterFactory.State">
            <summary>
            Состояние фабрики
            </summary>
        </member>
        <member name="P:Libs.PerformanceCounters.WinCounters.WinCounterFactory.Categories">
            <summary>
            Перечень дочерних категорий
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.WinCounters.WinCounterState">
            <summary>
            Состояние счётчика в WinCounters
            </summary>
        </member>
        <member name="F:Libs.PerformanceCounters.WinCounters.WinCounterState.Created">
            <summary>
            Создан
            </summary>
        </member>
        <member name="F:Libs.PerformanceCounters.WinCounters.WinCounterState.Initialized">
            <summary>
            Проинициализирован
            </summary>
        </member>
        <member name="F:Libs.PerformanceCounters.WinCounters.WinCounterState.Disposed">
            <summary>
            Освобождён
            </summary>
        </member>
        <member name="T:Libs.PerformanceCounters.Helpers.CredentialsHelper">
            <summary>
            Класс который может проветить является ли пользователь, запустивший приложение Администратором
            Не уверен что это нужно
            так как при создании счетчиков и без того кинется говорящий Exception
            Просто это есть
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.Helpers.CredentialsHelper.IsUserAdministrator">
            <summary>
            Проверяем является ли пользователь, запустивший приложение Администратором
            </summary>
            <returns></returns>
        </member>
        <member name="T:Libs.PerformanceCounters.PerformanceCounterCreationException">
            <summary>
            Исключение при создании счётчика
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.PerformanceCounterCreationException.#ctor">
            <summary>
            Конструктор PerformanceCounterCreationException
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.PerformanceCounterCreationException.#ctor(System.String)">
            <summary>
            Конструктор PerformanceCounterCreationException
            </summary>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Libs.PerformanceCounters.PerformanceCounterCreationException.#ctor(System.String,System.Exception)">
            <summary>
            Конструктор PerformanceCounterCreationException
            </summary>
            <param name="message">Сообщение об ошибке</param>
            <param name="ex">Внутреннее исключение</param>
        </member>
        <member name="M:Libs.PerformanceCounters.PerformanceCounterCreationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Конструктор PerformanceCounterCreationException для десериализации
            </summary>
            <param name="info">info</param>
            <param name="context">context</param>
        </member>
        <member name="T:Libs.PerformanceCounters.CounterAutoInitialization.CounterPropertyInfoExtractor">
            <summary>
            Помощник для извлечения CounterPropertyInfo
            </summary>
        </member>
        <member name="M:Libs.PerformanceCounters.CounterAutoInitialization.CounterPropertyInfoExtractor.GetCounterPropertyInfo(System.Type,System.Reflection.PropertyInfo)">
            <summary>
            Получить описатель свойства счётчика
            </summary>
            <param name="type">Тип обёртки</param>
            <param name="property">Свойство</param>
            <returns>Описатель или null, если не помечен атрибутом</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.CounterAutoInitialization.CounterPropertyInfoExtractor.CreateSetMethod(System.Reflection.PropertyInfo)">
            <summary>
            Скомпилировать метод установки значения счётчика в обёртке
            </summary>
            <param name="propertyInfo">Свойство</param>
            <returns>Делегат на сеттер</returns>
        </member>
        <member name="M:Libs.PerformanceCounters.CounterAutoInitialization.CounterPropertyInfoExtractor.GetContainerCounterProperties(System.Type)">
            <summary>
            Получить описатель для всех свойств счётчиков в обёртке
            </summary>
            <param name="type">Тип обёртки</param>
            <returns>Перечень описателей</returns>
        </member>
        <member name="T:Libs.PerformanceCounters.CounterTypes">
            <summary>
            Типы счетчиков для создания
            За более подробной информацией на msdn.
            </summary>
        </member>
        <member name="F:Libs.PerformanceCounters.CounterTypes.NumberOfItems">
            <summary>
            Счетчик мгновенного значения, показывающий последнее наблюдавшееся значение.
            Используется, например, для хранения числа элементов или операций.
            </summary>
        </member>
        <member name="F:Libs.PerformanceCounters.CounterTypes.OperationsPerSecond">
            <summary>
            Счетчик , показывающий среднее число операций, завершенных в течение каждой секунды интервала измерения.
            </summary>
        </member>
        <member name="F:Libs.PerformanceCounters.CounterTypes.AverageCount">
            <summary>
            Счетчик средних значений, показывающий, сколько элементов обработано в среднем за операцию.
            Счетчики этого типа отображают отношение обработанных элементов к числу завершенных операций.
            Отношение вычисляется соотношением числа обработанных элементов в течение последнего интервала времени 
            к числу завершенных операций за этот же интервал.
            </summary>
        </member>
        <member name="F:Libs.PerformanceCounters.CounterTypes.AverageTime">
            <summary>
            Счетчик среднего значения, измеряющий время, которое он в среднем займет для завершения процесса или операции.
            Счетчики этого типа отображают отношение всего прошедшего интервала измерения к числу процессов или операций, 
            завершенных за это время.
            Этот тип счетчика измеряет время в тактах системных часов.
            Не перепутайте! Этот счетчик не показывает среднее время всех измерений, а название свое он берет из усреднения
            времени замера при увеличении базового счетчика больше чем на 1 еденицу.
            </summary>
        </member>
        <member name="F:Libs.PerformanceCounters.CounterTypes.MomentTime">
            <summary>
            Счётчик моментального значения времени. Хранит последнее записанное в него время.
            </summary>
        </member>
        <member name="F:Libs.PerformanceCounters.CounterTypes.ElapsedTime">
            <summary>
            Таймер, который показывает полное время от начала работы компонента или процесса
            </summary>
        </member>
    </members>
</doc>
